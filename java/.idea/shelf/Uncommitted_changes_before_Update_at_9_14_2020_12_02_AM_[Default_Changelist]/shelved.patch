Index: src/paypal/payments/samples/xmlpay/XMLPaySale.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Before you can use the XMLPay example, you must download the Xerces-J 2.7.1 package (XML parser) called Xerces-J-bin.2.7.1.tar.gz\r\n// from Apache's archive download Web site at http://archive.apache.org/dist/xml/xerces-j/. A higher version probably will work, but has\r\n// not been tested at this time.\r\n//\r\n// The Xerces jars (xercesImpl.jar and xml-apis.jar) need to be copied in the \"lib\" folder in the package.\r\n//\r\n\r\npackage paypal.payments.samples.xmlpay;\r\n\r\nimport paypal.payflow.*;\r\n\r\npublic class XMLPaySale {\r\n\r\n\tpublic static void main(String args[]) {\r\n\t\tSystem.out.println(\"------------------------------------------------------\");\r\n\t\tSystem.out.println(\"Executing Sample from File: XMLPaySale.java\");\r\n\t\tSystem.out.println(\"------------------------------------------------------\");\r\n\r\n\t\t// Payflow Pro Host Name. This is the host name for the PayPal Payment Gateway.\r\n\t\t// For testing: pilot-payflowpro.paypal.com\r\n\t\t// For production: payflowpro.paypal.com\r\n\t\t// DO NOT use payflow.verisign.com or test-payflow.verisign.com!\r\n\t\tSDKProperties.setHostAddress(\"pilot-payflowpro.paypal.com\");\r\n\t\tSDKProperties.setHostPort(443);\r\n\t\tSDKProperties.setTimeOut(45);\r\n\r\n\t\t// Logging is by default off. To turn logging on uncomment the following lines:\r\n\t\t// SDKProperties.setLogFileName(\"payflow_java.log\");\r\n\t\t// SDKProperties.setLoggingLevel(PayflowConstants.SEVERITY_DEBUG);\r\n\t\t// SDKProperties.setMaxLogFileSize(100000);\r\n\t\t// Log Stack Traces (boolean)\r\n\t\t// SDKProperties.setStackTraceOn(true);\r\n\r\n\t\t// Uncomment the lines below and set the proxy address and port, if a proxy has\r\n\t\t// to be used.\r\n\t\t// SDKProperties.setProxyAddress(\"\");\r\n\t\t// SDKProperties.setProxyPort(0);\r\n\r\n\t\t// Create an instance of PayflowAPI.\r\n\t\tPayflowAPI pa = new PayflowAPI();\r\n\r\n\t\t// Sample Request.\r\n\t\t// Please replace <user>, <vendor>, <password> & <partner> with your merchant\r\n\t\t// information.\r\n\t\tString request = \"<?xml version=\\\"1.0\\\"?><XMLPayRequest Timeout=\\\"45\\\" version=\\\"2.0\\\"><RequestData><Partner>[partner]</Partner><Vendor>[vendor]</Vendor><Transactions><Transaction><Sale><PayData><Invoice><TotalAmt Currency='USD'>25.12</TotalAmt><InvNum>INV12345</InvNum><BillTo><PONum>PO12345</PONum><Address><Street>123 Main St.</Street><Zip>12345</Zip></Address></BillTo></Invoice><Tender><Card><CardNum>5105105105105100</CardNum><ExpDate>200901</ExpDate></Card></Tender></PayData></Sale></Transaction></Transactions></RequestData><RequestAuth><UserPass><User>[user]</User><Password>[password]</Password></UserPass></RequestAuth></XMLPayRequest>\";\r\n\t\t// RequestId is a unique string that is required for each & every transaction.\r\n\t\t// The merchant can use her/his own algorithm to generate this unique request id\r\n\t\t// or\r\n\t\t// use the SDK provided API to generate this as shown below\r\n\t\t// (PayflowAPI.generateRequestId).\r\n\t\t// NOTE: Review the comments in the DoSaleComplete example under\r\n\t\t// BasicTransactions for\r\n\t\t// more information on the Request ID.\r\n\t\tString requestId = pa.generateRequestId();\r\n\t\t// submit the transaction\r\n\t\tString response = pa.submitTransaction(request, requestId);\r\n\r\n\t\t// Create a new Client Information data object.\r\n\t\tClientInfo clInfo = new ClientInfo();\r\n\r\n\t\t// Set the ClientInfo object of the PayflowAPI.\r\n\t\tpa.setClientInfo(clInfo);\r\n\r\n\t\tSystem.out.println(\"Transaction Request :\\n-------------------- \\n\" + pa.getTransactionRequest());\r\n\t\tSystem.out.println(\"Transaction Response :\\n-------------------- \\n\" + response);\r\n\r\n\t\t// Following lines of code are optional.\r\n\t\t// Begin optional code for displaying SDK errors ...\r\n\t\t// It is used to read any errors that might have occured in the SDK.\r\n\t\t// Get the transaction errors.\r\n\r\n\t\tString transErrors = pa.getTransactionContext().toString();\r\n\t\tif (transErrors != null && transErrors.length() > 0) {\r\n\t\t\tSystem.out.println(\"Transaction Errors from SDK = \\n\" + transErrors);\r\n\t\t}\r\n\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/paypal/payments/samples/xmlpay/XMLPaySale.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/paypal/payments/samples/xmlpay/XMLPaySale.java	(date 1600060641846)
@@ -40,7 +40,7 @@
 		PayflowAPI pa = new PayflowAPI();
 
 		// Sample Request.
-		// Please replace <user>, <vendor>, <password> & <partner> with your merchant
+		// Please replace %3Cuser%3E%2C+%3Cvendor%3E%2C+%3Cpassword%3E+%26+%3Cpartner%3E with your merchant
 		// information.
 		String request = "<?xml version=\"1.0\"?><XMLPayRequest Timeout=\"45\" version=\"2.0\"><RequestData><Partner>[partner]</Partner><Vendor>[vendor]</Vendor><Transactions><Transaction><Sale><PayData><Invoice><TotalAmt Currency='USD'>25.12</TotalAmt><InvNum>INV12345</InvNum><BillTo><PONum>PO12345</PONum><Address><Street>123 Main St.</Street><Zip>12345</Zip></Address></BillTo></Invoice><Tender><Card><CardNum>5105105105105100</CardNum><ExpDate>200901</ExpDate></Card></Tender></PayData></Sale></Transaction></Transactions></RequestData><RequestAuth><UserPass><User>[user]</User><Password>[password]</Password></UserPass></RequestAuth></XMLPayRequest>";
 		// RequestId is a unique string that is required for each & every transaction.
Index: src/sdk/dataobjects/paypal/payflow/ECGetRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for ExpressCheckout GET operation.\r\n * {@link ECSetRequest}\r\n * {@link ECDoRequest}\r\n */\r\n\r\npublic class ECGetRequest extends ExpressCheckoutRequest {\r\n\r\n    /**\r\n     * Constructor for ECGetRequest\r\n     *\r\n     * @param Token String\r\n     *              <p/>\r\n     *              <p/>\r\n     *              ECGetRequest is used to set the data required for a Express Checkout GET operation.\r\n     *              </p>\r\n     *  .............\r\n     * <p/>\r\n     * Create the ECGetRequest object\r\n     * ECGetRequest getEC = new ECGetRequest(\"[tokenid]\");\r\n     * <p/>\r\n     * .............\r\n     */\r\n    public ECGetRequest(String Token) {\r\n        super(PayflowConstants.PARAM_ACTION_GET, Token);\r\n    }\r\n\r\n    protected ECGetRequest(String Token, String Action) {\r\n        super(PayflowConstants.PARAM_ACTION_GETBA, Token);\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ECGetRequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ECGetRequest.java	(date 1600056993253)
@@ -12,15 +12,14 @@
      * Constructor for ECGetRequest
      *
      * @param Token String
-     *              <p/>
-     *              <p/>
+     *               * <p>
      *              ECGetRequest is used to set the data required for a Express Checkout GET operation.
      *              </p>
      *  .............
-     * <p/>
+     *  * <p>
      * Create the ECGetRequest object
      * ECGetRequest getEC = new ECGetRequest("[tokenid]");
-     * <p/>
+     *  * <p>
      * .............
      */
     public ECGetRequest(String Token) {
Index: src/sdk/dataobjects/paypal/payflow/IResponseDataObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Interface for all response data objects.\r\n * <p/>\r\n * This interface can be used to create a new response data object.\r\n * </p>\r\n */\r\n\r\npublic interface IResponseDataObject {\r\n\r\n    /**\r\n     * Sets response params.\r\n     * <p/>\r\n     * When implemented in the derived class, this method should be preferred to be made as an protected method.\r\n     * </p>\r\n     */\r\n    void SetParams();\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/IResponseDataObject.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/IResponseDataObject.java	(date 1600056998004)
@@ -2,7 +2,7 @@
 
 /**
  * Interface for all response data objects.
- * <p/>
+ *  * <p>
  * This interface can be used to create a new response data object.
  * </p>
  */
@@ -11,7 +11,7 @@
 
     /**
      * Sets response params.
-     * <p/>
+     *  * <p>
      * When implemented in the derived class, this method should be preferred to be made as an protected method.
      * </p>
      */
Index: src/paypal/payments/samples/namevaluepairs/NVPSale.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payments.samples.namevaluepairs;\r\n\r\nimport paypal.payflow.*;\r\n\r\npublic class NVPSale {\r\n\r\n\tpublic static void main(String args[]) {\r\n\t\tSystem.out.println(\"------------------------------------------------------\");\r\n\t\tSystem.out.println(\"Executing Sample from File: NVPSale.java\");\r\n\t\tSystem.out.println(\"------------------------------------------------------\");\r\n\r\n\t\t// Payflow Pro Host Name. This is the host name for the PayPal Payment Gateway.\r\n\t\t// For testing: pilot-payflowpro.paypal.com\r\n\t\t// For production: payflowpro.paypal.com\r\n\t\t// DO NOT use payflow.verisign.com or test-payflow.verisign.com!\r\n\t\tSDKProperties.setHostAddress(\"pilot-payflowpro.paypal.com\");\r\n\t\tSDKProperties.setHostPort(443);\r\n\t\tSDKProperties.setTimeOut(45);\r\n\r\n\t\t// Uncomment the lines below and set the proxy address and port, if a proxy has\r\n\t\t// to be used.\r\n\t\t// SDKProperties.setProxyAddress(\"\");\r\n\t\t// SDKProperties.setProxyPort(0);\r\n\t\t// SDKProperties.setProxyLogin(\"\");\r\n\t\t// SDKProperties.setProxyPassword(\"\");\r\n\r\n\t\t// Logging is by default off. To turn logging on uncomment the following lines:\r\n\t\t// SDKProperties.setLogFileName(\"payflow_java.log\");\r\n\t\t// SDKProperties.setLoggingLevel(PayflowConstants.SEVERITY_DEBUG);\r\n\t\t// SDKProperties.setMaxLogFileSize(1000000);\r\n\t\t// Log Stack Traces (boolean)\r\n\t\t// SDKProperties.setStackTraceOn(true);\r\n\r\n\t\t// Create an instance of PayflowAPI.\r\n\t\tPayflowAPI pa = new PayflowAPI();\r\n\r\n\t\t// Sample Request.\r\n\t\t// Please replace <user>, <vendor>, <password> & <partner> with your merchant\r\n\t\t// information.\r\n\t\tString request = \"USER=<user>&VENDOR=<vendor>&PARTNER=<partner>&PWD=<password>&TRXTYPE=S&ACCT=5100000000000008&EXPDATE=0119&TENDER=C&INVNUM=INV12345&PONUM=PO12345&STREET=123 Main St.&ZIP=12345&AMT=12.25&CVV2=123&VERBOSITY=HIGH\";\r\n\r\n\t\t// RequestId is a unique string that is required for each & every transaction.\r\n\t\t// The merchant can use her/his own algorithm to generate this unique request id\r\n\t\t// or\r\n\t\t// use the SDK provided API to generate this as shown below\r\n\t\t// (PayflowAPI.generateRequestId).\r\n\t\t// NOTE: Review the comments in the DoSaleComplete example under\r\n\t\t// BasicTransactions for\r\n\t\t// more information on the Request ID.\r\n\t\tString requestId = pa.generateRequestId();\r\n\r\n\t\tString response = pa.submitTransaction(request, requestId);\r\n\r\n\t\tSystem.out.println(\"Transaction Request :\\n-------------------- \\n\" + request);\r\n\t\tSystem.out.println(\"Transaction Response :\\n-------------------- \\n\" + response);\r\n\r\n\t\t// Following lines of code are optional.\r\n\t\t// Begin optional code for displaying SDK errors ...\r\n\t\t// It is used to read any errors that might have occurred in the SDK.\r\n\t\t// Get the transaction errors.\r\n\r\n\t\tString transErrors = pa.getTransactionContext().toString();\r\n\t\tif (transErrors != null && transErrors.length() > 0) {\r\n\t\t\tSystem.out.println(\"Transaction Errors from SDK = \\n\" + transErrors);\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/paypal/payments/samples/namevaluepairs/NVPSale.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/paypal/payments/samples/namevaluepairs/NVPSale.java	(date 1600060641942)
@@ -35,7 +35,7 @@
 		PayflowAPI pa = new PayflowAPI();
 
 		// Sample Request.
-		// Please replace <user>, <vendor>, <password> & <partner> with your merchant
+		// Please replace %3Cuser%3E%2C+%3Cvendor%3E%2C+%3Cpassword%3E+%26+%3Cpartner%3E with your merchant
 		// information.
 		String request = "USER=<user>&VENDOR=<vendor>&PARTNER=<partner>&PWD=<password>&TRXTYPE=S&ACCT=5100000000000008&EXPDATE=0119&TENDER=C&INVNUM=INV12345&PONUM=PO12345&STREET=123 Main St.&ZIP=12345&AMT=12.25&CVV2=123&VERBOSITY=HIGH";
 
Index: src/sdk/dataobjects/paypal/payflow/ECUpdateBARequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for ExpressCheckout UPDATE operation.\r\n * {@link ECGetRequest}\r\n * {@link ECDoRequest}\r\n */\r\npublic class ECUpdateBARequest extends ExpressCheckoutRequest {\r\n\r\n    private String baid;\r\n    private String ba_Status;\r\n    private String ba_Desc;\r\n\r\n    /**\r\n     * Constructor for ECSetRequest\r\n     *\r\n     * @param BAId - String\r\n     *             <p/>\r\n     *             ECUpdateRequest is used to set the data required for a Express Checkout UPDATE operation.\r\n     *             </p>\r\n     *  .............\r\n     * <p/>\r\n     * //Create the ECUpdateRequest object\r\n     * ECUpdateRequest updateEC = new ECUpdateRequest(\"baid\");\r\n     * <p/>\r\n     * .............\r\n     * </code>\r\n     */\r\n    public ECUpdateBARequest(String BAId) {\r\n        super(PayflowConstants.PARAM_ACTION_UPDATE);\r\n        baid = BAId;\r\n    }\r\n\r\n    /**\r\n     * Constructor for ECUpdateRequest\r\n     *\r\n     * @param BAId      - String\r\n     * @param BA_Status - String\r\n     *                  <p/>\r\n     *                  <p/>\r\n     *                  ECSetRequest is used to set the data required for a Express Checkout Update operation for\r\n     *                  Reference Transactions without Purchase.\r\n     *                  </p>\r\n     *  .............\r\n     * <p/>\r\n     * //Create the ECUpdateRequest object\r\n     * ECUpdateRequest updateEC = new ECSetRequest(\"baid\",\"ba_status\");\r\n     * <p/>\r\n     * .............\r\n     * </code>\r\n     */\r\n    public ECUpdateBARequest(String BAId, String BA_Status) {\r\n        super(PayflowConstants.PARAM_ACTION_UPDATE);\r\n        baid = BAId;\r\n        ba_Status = BA_Status;\r\n    }\r\n\r\n    /**\r\n     * Constructor for ECUpdateRequest\r\n     *\r\n     * @param BAId      - String\r\n     * @param BA_Status - String\r\n     * @param BA_Desc   - String\r\n     *                  <p/>\r\n     *                  <p/>\r\n     *                  ECSetRequest is used to set the data required for a Express Checkout Update operation for\r\n     *                  Reference Transactions without Purchase.\r\n     *                  </p>\r\n     *  .............\r\n     * <p/>\r\n     * //Create the ECUpdateRequest object\r\n     * ECUpdateRequest updateEC = new ECSetRequest(\"baid\",\"ba_status\", \"ba_desc\");\r\n     * <p/>\r\n     * .............\r\n     * </code>\r\n     */\r\n    public ECUpdateBARequest(String BAId, String BA_Status, String BA_Desc) {\r\n        super(PayflowConstants.PARAM_ACTION_UPDATE);\r\n        baid = BAId;\r\n        ba_Status = BA_Status;\r\n        ba_Desc = BA_Desc;\r\n    }\r\n\r\n    /**\r\n     * Gets the BAId parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BAID\r\n     */\r\n    public String getBAId() {\r\n        return baid;\r\n    }\r\n\r\n    /**\r\n     * Sets the BAId parameter.\r\n     *\r\n     * @param BAId - String\r\n     *  <p>Maps to Payflow Parameter: BAID\r\n     */\r\n\r\n    public void setBAId(String BAId) {\r\n        this.baid = BAId;\r\n    }\r\n\r\n    /**\r\n     * Gets the BA_Status parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BA_STATUS\r\n     */\r\n    public String getba_Status() {\r\n        return ba_Status;\r\n    }\r\n\r\n    /**\r\n     * Sets the BA_Status parameter.\r\n     *\r\n     * @param BA_Status - String\r\n     *  <p>Maps to Payflow Parameter: BA_STATUS\r\n     */\r\n\r\n    public void setba_Status(String BA_Status) {\r\n        this.ba_Status = BA_Status;\r\n    }\r\n\r\n    /**\r\n     * Gets the BA_Desc parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BA_DESC\r\n     */\r\n    public String getBA_Desc() {\r\n        return ba_Desc;\r\n    }\r\n\r\n    /**\r\n     * Sets the BA_Desc parameter.\r\n     *\r\n     * @param BA_Desc - String\r\n     *  <p>Maps to Payflow Parameter: BA_DESC\r\n     */\r\n\r\n    public void setBA_Desc(String BA_Desc) {\r\n        this.ba_Desc = BA_Desc;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        // This function is not called. All the\r\n        //address information is validated and generated\r\n        //in its respective derived classes.\r\n        super.generateRequest();\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BA_STATUS, ba_Status));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BA_DESC, ba_Desc));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BAID, baid));\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ECUpdateBARequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ECUpdateBARequest.java	(date 1600060217621)
@@ -15,16 +15,13 @@
      * Constructor for ECSetRequest
      *
      * @param BAId - String
-     *             <p/>
+     *              * <p>
      *             ECUpdateRequest is used to set the data required for a Express Checkout UPDATE operation.
      *             </p>
      *  .............
-     * <p/>
      * //Create the ECUpdateRequest object
      * ECUpdateRequest updateEC = new ECUpdateRequest("baid");
-     * <p/>
      * .............
-     * </code>
      */
     public ECUpdateBARequest(String BAId) {
         super(PayflowConstants.PARAM_ACTION_UPDATE);
@@ -36,16 +33,14 @@
      *
      * @param BAId      - String
      * @param BA_Status - String
-     *                  <p/>
-     *                  <p/>
+     *                   * <p>
      *                  ECSetRequest is used to set the data required for a Express Checkout Update operation for
      *                  Reference Transactions without Purchase.
      *                  </p>
+     *  <code>
      *  .............
-     * <p/>
      * //Create the ECUpdateRequest object
      * ECUpdateRequest updateEC = new ECSetRequest("baid","ba_status");
-     * <p/>
      * .............
      * </code>
      */
@@ -61,18 +56,14 @@
      * @param BAId      - String
      * @param BA_Status - String
      * @param BA_Desc   - String
-     *                  <p/>
-     *                  <p/>
+     *                   * <p>
      *                  ECSetRequest is used to set the data required for a Express Checkout Update operation for
      *                  Reference Transactions without Purchase.
      *                  </p>
      *  .............
-     * <p/>
      * //Create the ECUpdateRequest object
      * ECUpdateRequest updateEC = new ECSetRequest("baid","ba_status", "ba_desc");
-     * <p/>
      * .............
-     * </code>
      */
     public ECUpdateBARequest(String BAId, String BA_Status, String BA_Desc) {
         super(PayflowConstants.PARAM_ACTION_UPDATE);
Index: src/sdk/dataobjects/paypal/payflow/ECDoBARequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for ExpressCheckout with Billing Agreement (Reference Transaction) without Purchase DO operation.\r\n * {@link ECSetBARequest}\r\n * {@link ECGetBARequest}\r\n */\r\n\r\npublic class ECDoBARequest extends ECDoRequest {\r\n\r\n    /**\r\n     * * <summary>\r\n     * Constructor for ECDoBARequest\r\n     *\r\n     * @param token   String\r\n     * @param payerId String\r\n     *                <p/>\r\n     *                <p/>\r\n     *                ECDoBARequest is used to set the data required for a Express Checkout DO operation\r\n     *                with Billing Agreement (Reference Transaction) without Purchase.\r\n     *                </p>\r\n     *  .............\r\n     * <p/>\r\n     * Create the ECDoBARequest object\r\n     * ECDoBARequest doEC = new ECDoBARequest(\"[tokenid]\",\"[payerid]\");\r\n     * <p/>\r\n     * .............\r\n     */\r\n\r\n    public ECDoBARequest(String token, String payerId) {\r\n        super(token, payerId, PayflowConstants.PARAM_ACTION_DOBA);\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ECDoBARequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ECDoBARequest.java	(date 1600060218182)
@@ -9,21 +9,21 @@
 public class ECDoBARequest extends ECDoRequest {
 
     /**
-     * * <summary>
+     *
      * Constructor for ECDoBARequest
      *
+     *
      * @param token   String
      * @param payerId String
-     *                <p/>
-     *                <p/>
+     *                 * <p>
      *                ECDoBARequest is used to set the data required for a Express Checkout DO operation
      *                with Billing Agreement (Reference Transaction) without Purchase.
      *                </p>
      *  .............
-     * <p/>
+     *  * <p>
      * Create the ECDoBARequest object
      * ECDoBARequest doEC = new ECDoBARequest("[tokenid]","[payerid]");
-     * <p/>
+     *  * <p>
      * .............
      */
 
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"BranchesTreeState\">\r\n    <expand>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"LOCAL_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n      <path>\r\n        <item name=\"ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"REMOTE_ROOT\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n        <item name=\"GROUP_NODE:origin\" type=\"e8cecc67:BranchNodeDescriptor\" />\r\n      </path>\r\n    </expand>\r\n    <select />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"e9533da2-017e-4f68-8627-3fa704709969\" name=\"Default Changelist\" comment=\"New object: AdviceDetail, supports ADDLAMTn and ADDLAMTTYPEn&#10;New object: Devices, supports CATTYPE and CONTACTLESS&#10;Added to CustomerInfo: CUSTDATA, CUSTOMERID and CUSTOMERNUMBER\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/..\" value=\"tsN091220\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"1YxLiiSD0vUAJLwpYHhKcSnVklp\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"last_directory_selection\" value=\"$PROJECT_DIR$/src/sdk\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.15\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"paypal.payflow\" />\r\n      <recent name=\"paypal.payments.samples.dataobjects.basictransactions\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Application.DOSale\">\r\n    <configuration name=\"DOSale\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"paypal.payments.samples.dataobjects.basictransactions.DOSale\" />\r\n      <module name=\"Payflow Java SDK\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"DOSaleComplete\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"paypal.payments.samples.dataobjects.basictransactions.DOSaleComplete\" />\r\n      <module name=\"Payflow Java SDK\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"Application\" factoryName=\"Application\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"paypal.payments.samples.dataobjects.basictransactions.DOSale\" />\r\n      <module name=\"Payflow Java SDK\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Application.DOSale\" />\r\n      <item itemvalue=\"Application.DOSaleComplete\" />\r\n    </list>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"e9533da2-017e-4f68-8627-3fa704709969\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1583879429011</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1583879429011</updated>\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n    <option name=\"oldMeFiltersMigrated\" value=\"true\" />\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"New object: AdviceDetail, supports ADDLAMTn and ADDLAMTTYPEn&#10;New object: Devices, supports CATTYPE and CONTACTLESS&#10;Added to CustomerInfo: CUSTDATA, CUSTOMERID and CUSTOMERNUMBER\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"New object: AdviceDetail, supports ADDLAMTn and ADDLAMTTYPEn&#10;New object: Devices, supports CATTYPE and CONTACTLESS&#10;Added to CustomerInfo: CUSTDATA, CUSTOMERID and CUSTOMERNUMBER\" />\r\n  </component>\r\n  <component name=\"WindowStateProjectService\">\r\n    <state x=\"1663\" y=\"284\" key=\"#Project_Structure\" timestamp=\"1599886929653\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1663\" y=\"284\" key=\"#Project_Structure/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599886929653\" />\r\n    <state x=\"1637\" y=\"365\" width=\"1092\" height=\"714\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog\" timestamp=\"1599979326283\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1637\" y=\"365\" width=\"1092\" height=\"714\" key=\"#com.intellij.execution.impl.EditConfigurationsDialog/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599979326283\" />\r\n    <state x=\"1912\" y=\"500\" key=\"#com.intellij.ide.util.TreeClassChooserDialog\" timestamp=\"1599979322110\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1912\" y=\"500\" key=\"#com.intellij.ide.util.TreeClassChooserDialog/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599979322110\" />\r\n    <state x=\"148\" y=\"193\" width=\"2095\" height=\"988\" key=\"DiffContextDialog\" timestamp=\"1599975711254\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"148\" y=\"193\" width=\"2095\" height=\"988\" key=\"DiffContextDialog/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599975711254\" />\r\n    <state x=\"1858\" y=\"427\" key=\"FileChooserDialogImpl\" timestamp=\"1599884229698\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1858\" y=\"427\" key=\"FileChooserDialogImpl/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599884229698\" />\r\n    <state x=\"404\" y=\"0\" key=\"FileDocumentManager.FileCacheConflict\" timestamp=\"1599937804839\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"404\" y=\"0\" key=\"FileDocumentManager.FileCacheConflict/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599937804839\" />\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.bottom\" timestamp=\"1599986827159\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.bottom/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599986827159\" />\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.center\" timestamp=\"1599986827159\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.center/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599986827159\" />\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.left\" timestamp=\"1599986827159\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.left/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599986827159\" />\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.right\" timestamp=\"1599986827159\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"397\" key=\"GridCell.Tab.0.right/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599986827159\" />\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.bottom\" timestamp=\"1599979922796\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.bottom/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599979922796\" />\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.center\" timestamp=\"1599979922796\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.center/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599979922796\" />\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.left\" timestamp=\"1599979922796\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.left/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599979922796\" />\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.right\" timestamp=\"1599979922796\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state width=\"1674\" height=\"399\" key=\"GridCell.Tab.1.right/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599979922796\" />\r\n    <state x=\"1055\" y=\"259\" key=\"SettingsEditor\" timestamp=\"1599894780739\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1055\" y=\"259\" key=\"SettingsEditor/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599894780739\" />\r\n    <state x=\"93\" y=\"100\" width=\"1534\" height=\"1207\" key=\"ShowDiffWithBranchDialog\" timestamp=\"1599957499868\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"93\" y=\"100\" width=\"1534\" height=\"1207\" key=\"ShowDiffWithBranchDialog/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599957499868\" />\r\n    <state x=\"743\" y=\"443\" key=\"Vcs.Push.Dialog.v2\" timestamp=\"1599984151691\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"743\" y=\"443\" key=\"Vcs.Push.Dialog.v2/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599984151691\" />\r\n    <state x=\"1999\" y=\"488\" width=\"857\" height=\"444\" key=\"chooseDestDirectoryDialog\" timestamp=\"1599884830394\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1999\" y=\"488\" width=\"857\" height=\"444\" key=\"chooseDestDirectoryDialog/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599884830394\" />\r\n    <state x=\"1013\" y=\"601\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2\" timestamp=\"1599894048706\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"1013\" y=\"601\" key=\"com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599894048706\" />\r\n    <state x=\"291\" y=\"62\" width=\"1525\" height=\"811\" key=\"dock-window-1\" timestamp=\"1599942499697\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"291\" y=\"62\" width=\"1525\" height=\"811\" key=\"dock-window-1/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599942499697\" />\r\n    <state x=\"431\" y=\"238\" width=\"2723\" height=\"811\" key=\"dock-window-2\" timestamp=\"1599887946928\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"431\" y=\"238\" width=\"2723\" height=\"811\" key=\"dock-window-2/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599887946928\" />\r\n    <state x=\"198\" y=\"191\" width=\"1411\" height=\"964\" key=\"dock-window-3\" timestamp=\"1599941680940\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"198\" y=\"191\" width=\"1411\" height=\"964\" key=\"dock-window-3/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599941680940\" />\r\n    <state x=\"2402\" y=\"245\" width=\"747\" height=\"1023\" key=\"find.popup\" timestamp=\"1599984714669\">\r\n      <screen x=\"0\" y=\"0\" width=\"3440\" height=\"1400\" />\r\n    </state>\r\n    <state x=\"2402\" y=\"245\" width=\"747\" height=\"1023\" key=\"find.popup/0.0.3440.1400@0.0.3440.1400\" timestamp=\"1599984714669\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/workspace.xml	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ .idea/workspace.xml	(date 1600066956244)
@@ -19,7 +19,83 @@
     <select />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="e9533da2-017e-4f68-8627-3fa704709969" name="Default Changelist" comment="New object: AdviceDetail, supports ADDLAMTn and ADDLAMTTYPEn&#10;New object: Devices, supports CATTYPE and CONTACTLESS&#10;Added to CustomerInfo: CUSTDATA, CUSTOMERID and CUSTOMERNUMBER" />
+    <list default="true" id="e9533da2-017e-4f68-8627-3fa704709969" name="Default Changelist" comment="New object: AdviceDetail, supports ADDLAMTn and ADDLAMTTYPEn&#10;New object: Devices, supports CATTYPE and CONTACTLESS&#10;Added to CustomerInfo: CUSTDATA, CUSTOMERID and CUSTOMERNUMBER">
+      <change afterPath="$PROJECT_DIR$/.idea/ant.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../dotNET/PFProSDK/Properties/AssemblyInfo.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../dotNET/PFProSDK/Properties/AssemblyInfo.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../dotNET/PFProSDK/ndoc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../dotNET/PFProSDK/ndoc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../dotNET/PFProSDK/src/PayPal/Payments/DataObjects/Devices.cs" beforeDir="false" afterPath="$PROJECT_DIR$/../dotNET/PFProSDK/src/PayPal/Payments/DataObjects/Devices.cs" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/../dotNET/Payflow dotNET SDK.sln" beforeDir="false" afterPath="$PROJECT_DIR$/../dotNET/Payflow dotNET SDK.sln" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/paypal/payments/samples/namevaluepairs/NVPSale.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/paypal/payments/samples/namevaluepairs/NVPSale.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/paypal/payments/samples/xmlpay/XMLPaySale.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/paypal/payments/samples/xmlpay/XMLPaySale.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/Context.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/Context.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/Logger.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/Logger.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PayflowAPI.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PayflowAPI.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PayflowConstants.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PayflowConstants.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PayflowUtility.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PayflowUtility.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PaymentState.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/base/paypal/payflow/PaymentState.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ACHTender.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ACHTender.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/AdviceDetail.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/AdviceDetail.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/BankAcct.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/BankAcct.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/BaseTender.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/BaseTender.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/BillTo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/BillTo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CardTender.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CardTender.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CheckPayment.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CheckPayment.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CheckTender.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CheckTender.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CreditCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/CreditCard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/Currency.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/Currency.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECDoBARequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECDoBARequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECDoRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECDoRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECGetBARequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECGetBARequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECGetRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECGetRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECSetBARequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECSetBARequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECSetRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECSetRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECUpdateBARequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ECUpdateBARequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ExpressCheckoutRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ExpressCheckoutRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ExpressCheckoutResponse.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ExpressCheckoutResponse.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/FpsXmlData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/FpsXmlData.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/FraudResponse.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/FraudResponse.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/IRequestDataObject.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/IRequestDataObject.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/IResponseDataObject.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/IResponseDataObject.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/Invoice.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/Invoice.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/MagTekInfo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/MagTekInfo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/MerchantInfo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/MerchantInfo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayLater.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayLater.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayLaterLineItem.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayLaterLineItem.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayPalTender.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayPalTender.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayflowConnectionData.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PayflowConnectionData.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PaymentCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PaymentCard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PaymentDevice.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PaymentDevice.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PurchaseCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/PurchaseCard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/RecurringInfo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/RecurringInfo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/RecurringResponse.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/RecurringResponse.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/Response.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/Response.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ShipTo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/ShipTo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/SwipeCard.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/SwipeCard.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/TransactionResponse.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/TransactionResponse.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/UserInfo.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/dataobjects/paypal/payflow/UserInfo.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/AuthorizationTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/AuthorizationTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/BaseTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/BaseTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/BuyerAuthVATransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/BuyerAuthVATransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/BuyerAuthVETransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/BuyerAuthVETransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/CaptureTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/CaptureTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/CreditTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/CreditTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/FraudReviewTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/FraudReviewTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/InquiryTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/InquiryTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/OrderTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/OrderTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringAddTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringAddTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringCancelTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringCancelTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringInquiryTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringInquiryTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringModifyTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringModifyTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringPaymentTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringPaymentTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringReActivateTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringReActivateTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/RecurringTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/ReferenceTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/ReferenceTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/SaleTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/SaleTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/VoiceAuthTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/VoiceAuthTransaction.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/VoidTransaction.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/sdk/transactions/paypal/payflow/VoidTransaction.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -125,34 +201,38 @@
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
     <state x="1912" y="500" key="#com.intellij.ide.util.TreeClassChooserDialog/0.0.3440.1400@0.0.3440.1400" timestamp="1599979322110" />
+    <state x="898" y="439" key="ANALYSIS_DLG_com.intellij.analysis.BaseAnalysisAction$1" timestamp="1600063871539">
+      <screen x="0" y="0" width="3440" height="1400" />
+    </state>
+    <state x="898" y="439" key="ANALYSIS_DLG_com.intellij.analysis.BaseAnalysisAction$1/0.0.3440.1400@0.0.3440.1400" timestamp="1600063871539" />
     <state x="148" y="193" width="2095" height="988" key="DiffContextDialog" timestamp="1599975711254">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
     <state x="148" y="193" width="2095" height="988" key="DiffContextDialog/0.0.3440.1400@0.0.3440.1400" timestamp="1599975711254" />
-    <state x="1858" y="427" key="FileChooserDialogImpl" timestamp="1599884229698">
+    <state x="1858" y="427" key="FileChooserDialogImpl" timestamp="1600055538854">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
-    <state x="1858" y="427" key="FileChooserDialogImpl/0.0.3440.1400@0.0.3440.1400" timestamp="1599884229698" />
+    <state x="1858" y="427" key="FileChooserDialogImpl/0.0.3440.1400@0.0.3440.1400" timestamp="1600055538854" />
     <state x="404" y="0" key="FileDocumentManager.FileCacheConflict" timestamp="1599937804839">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
     <state x="404" y="0" key="FileDocumentManager.FileCacheConflict/0.0.3440.1400@0.0.3440.1400" timestamp="1599937804839" />
-    <state width="1674" height="397" key="GridCell.Tab.0.bottom" timestamp="1599986827159">
+    <state width="1674" height="397" key="GridCell.Tab.0.bottom" timestamp="1600064333657">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
-    <state width="1674" height="397" key="GridCell.Tab.0.bottom/0.0.3440.1400@0.0.3440.1400" timestamp="1599986827159" />
-    <state width="1674" height="397" key="GridCell.Tab.0.center" timestamp="1599986827159">
+    <state width="1674" height="397" key="GridCell.Tab.0.bottom/0.0.3440.1400@0.0.3440.1400" timestamp="1600064333657" />
+    <state width="1674" height="397" key="GridCell.Tab.0.center" timestamp="1600064333657">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
-    <state width="1674" height="397" key="GridCell.Tab.0.center/0.0.3440.1400@0.0.3440.1400" timestamp="1599986827159" />
-    <state width="1674" height="397" key="GridCell.Tab.0.left" timestamp="1599986827159">
+    <state width="1674" height="397" key="GridCell.Tab.0.center/0.0.3440.1400@0.0.3440.1400" timestamp="1600064333657" />
+    <state width="1674" height="397" key="GridCell.Tab.0.left" timestamp="1600064333657">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
-    <state width="1674" height="397" key="GridCell.Tab.0.left/0.0.3440.1400@0.0.3440.1400" timestamp="1599986827159" />
-    <state width="1674" height="397" key="GridCell.Tab.0.right" timestamp="1599986827159">
+    <state width="1674" height="397" key="GridCell.Tab.0.left/0.0.3440.1400@0.0.3440.1400" timestamp="1600064333657" />
+    <state width="1674" height="397" key="GridCell.Tab.0.right" timestamp="1600064333657">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
-    <state width="1674" height="397" key="GridCell.Tab.0.right/0.0.3440.1400@0.0.3440.1400" timestamp="1599986827159" />
+    <state width="1674" height="397" key="GridCell.Tab.0.right/0.0.3440.1400@0.0.3440.1400" timestamp="1600064333657" />
     <state width="1674" height="399" key="GridCell.Tab.1.bottom" timestamp="1599979922796">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
@@ -185,10 +265,10 @@
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
     <state x="1999" y="488" width="857" height="444" key="chooseDestDirectoryDialog/0.0.3440.1400@0.0.3440.1400" timestamp="1599884830394" />
-    <state x="1013" y="601" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1599894048706">
+    <state x="1013" y="601" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2" timestamp="1600066956138">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
-    <state x="1013" y="601" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.3440.1400@0.0.3440.1400" timestamp="1599894048706" />
+    <state x="1013" y="601" key="com.intellij.openapi.vcs.update.UpdateOrStatusOptionsDialogupdate-v2/0.0.3440.1400@0.0.3440.1400" timestamp="1600066956138" />
     <state x="291" y="62" width="1525" height="811" key="dock-window-1" timestamp="1599942499697">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
@@ -201,9 +281,13 @@
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
     <state x="198" y="191" width="1411" height="964" key="dock-window-3/0.0.3440.1400@0.0.3440.1400" timestamp="1599941680940" />
-    <state x="2402" y="245" width="747" height="1023" key="find.popup" timestamp="1599984714669">
+    <state x="2261" y="243" width="747" height="1023" key="find.popup" timestamp="1600061231701">
       <screen x="0" y="0" width="3440" height="1400" />
     </state>
-    <state x="2402" y="245" width="747" height="1023" key="find.popup/0.0.3440.1400@0.0.3440.1400" timestamp="1599984714669" />
+    <state x="2261" y="243" width="747" height="1023" key="find.popup/0.0.3440.1400@0.0.3440.1400" timestamp="1600061231701" />
+    <state x="720" y="372" key="new project wizard" timestamp="1600064376676">
+      <screen x="0" y="0" width="3440" height="1400" />
+    </state>
+    <state x="720" y="372" key="new project wizard/0.0.3440.1400@0.0.3440.1400" timestamp="1600064376676" />
   </component>
 </project>
\ No newline at end of file
Index: src/sdk/dataobjects/paypal/payflow/CreditCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Credit Card related information\r\n * CreditCard is associated with CardTender. {@link CardTender}\r\n */\r\npublic final class CreditCard extends PaymentCard {\r\n    /**\r\n     * @param acct    Credit card number\r\n     * @param expDate Card expiry date\r\n     *                This is used as Payment Device for the CardTender.\r\n     *                <p/>\r\n     *  Maps to Payflow Parameter: ACCT , EXPDATE\r\n     * //Create the CreditCard object\r\n     * CreditCard payDevice = new CreditCard(\"XXXXXXXXXX\",\"XXXX\");\r\n     * </p>\r\n     */\r\n    public CreditCard(String acct, String expDate) {\r\n        super(acct, expDate);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/CreditCard.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/CreditCard.java	(date 1600056993553)
@@ -9,7 +9,7 @@
      * @param acct    Credit card number
      * @param expDate Card expiry date
      *                This is used as Payment Device for the CardTender.
-     *                <p/>
+     *                 * <p>
      *  Maps to Payflow Parameter: ACCT , EXPDATE
      * //Create the CreditCard object
      * CreditCard payDevice = new CreditCard("XXXXXXXXXX","XXXX");
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_8\" default=\"false\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/bin\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ .idea/misc.xml	(date 1600055773120)
@@ -1,5 +1,8 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
+  <component name="JavadocGenerationManager">
+    <option name="OUTPUT_DIRECTORY" value="$PROJECT_DIR$/../../../Releases/Java/docs" />
+  </component>
   <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="false" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/bin" />
   </component>
Index: src/sdk/dataobjects/paypal/payflow/TransactionResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.util.Hashtable;\r\n\r\n/**\r\n * Used for transaction response.\r\n * <p/>\r\n * TransactionResponse object is contained in the main response\r\n * object Response of the transaction.\r\n * </p>\r\n * Following is the example of how to get the transaction response\r\n * after the transaction.\r\n *\r\n *  ..........\r\n * // Trans is the transaction object.\r\n * *\t\t...................\r\n * // Submit the transaction.\r\n * Response resp = trans.SubmitTransaction();\r\n * <p/>\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse!= null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n * }\r\n * }\r\n */\r\npublic final class TransactionResponse extends BaseResponseDataObject {\r\n\r\n    private int result;\r\n    private String ppref;\r\n    private String pnref;\r\n    private String respMsg;\r\n    private String authCode;\r\n    private String avsAddr;\r\n    private String avsZip;\r\n    private String cardSecure;\r\n    private String cvv2Match;\r\n    private String iavs;\r\n    private String origResult;\r\n    private String origPnref;\r\n    private String transState;\r\n    private String custRef;\r\n    private String startTime;\r\n    private String endTime;\r\n    private String duplicate;\r\n    private String dateToSettle;\r\n    private String batchId;\r\n    private String addlMsgs;\r\n    private String respText;\r\n    private String procAvs;\r\n    private String procCardSecure;\r\n    private String procCVV2;\r\n    private String hostCode;\r\n    private String settleDate;\r\n    private String correlationId;\r\n    private String feeAmt;\r\n    private String pendingReason;\r\n    private String paymentType;\r\n    private String status;\r\n    private String balAmt;\r\n    private String amexId;\r\n    private String amexPosData;\r\n    private String acct;\r\n    private String expDate;\r\n    private String amt;\r\n    private String billToLastName;\r\n    private String billToFirstName;\r\n    private String transTime;\r\n    private String cardType;\r\n    private String origAmt;\r\n    private String secureToken;\r\n    private String secureTokenId;\r\n    private String phoneMatch;\r\n    private String emailMatch;\r\n    private String extRspMsg;\r\n    private String paymentAdviceCode;\r\n    private String associationResponseCode;\r\n    private String transactionId;\r\n    private String magTResponse;\r\n    private String traceId;\r\n    private String achStatus;\r\n    private String txId;\r\n    private String type;\r\n    private String affluent;\r\n    private String ccUpdated;\r\n    private String rrn;\r\n    private String stan;\r\n    private String aci;\r\n    private String validationCode;\r\n    private String ccTransId;\r\n    private String ccTrans_PosData;\r\n\r\n    /**\r\n     * Gets the result.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RESULT\r\n     */\r\n    public int getResult() {\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * Gets the PPref parameter\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PPREF\r\n     */\r\n    public String getPPRef() {\r\n        return ppref;\r\n    }\r\n\r\n    /**\r\n     * Gets the pnref number(Reference Id).\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PNREF\r\n     */\r\n    public String getPnref() {\r\n        return pnref;\r\n    }\r\n\r\n    /**\r\n     * Gets the response message.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RESPMSG\r\n     */\r\n    public String getRespMsg() {\r\n        return respMsg;\r\n    }\r\n\r\n    /**\r\n     * Gets the AuthCode.\r\n     * Returned for Sale, Authorization, and Voice\r\n     * Authorization transactions. AUTHCODE is the\r\n     * approval code obtained over the phone from\r\n     * the processing network.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AUTHCODE\r\n     */\r\n    public String getAuthCode() {\r\n        return authCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the avsaddr.\r\n     * AVS address responses are for advice only.\r\n     * This process does not affect the outcome of the\r\n     * authorization.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AVSADDR\r\n     */\r\n    public String getAvsAddr() {\r\n        return avsAddr;\r\n    }\r\n\r\n    /**\r\n     * Gets the avsZip.\r\n     * <p>AVS ZIP code responses are for advice only.\r\n     * This process does not affect the outcome of the\r\n     * authorization.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AVSZIP\r\n     */\r\n    public String getAvsZip() {\r\n        return avsZip;\r\n    }\r\n\r\n    /**\r\n     * Gets the cardsecure parameter.\r\n     * <p>Obtained for Visa cards.\r\n     * CAVV validity.\r\n     * Y=valid, N=Not valid, X=cannot determine</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CARDSECURE\r\n     */\r\n    public String getCardSecure() {\r\n        return cardSecure;\r\n    }\r\n\r\n    /**\r\n     * Gets the acct parameter.\r\n     * <p>Obtain the last 4-digits of the credit card number</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ACCT\r\n     */\r\n    public String getAcct() {\r\n        return acct;\r\n    }\r\n\r\n    /**\r\n     * Gets the expdate parameter.\r\n     * <p>Obtain the expiration date of the credit card used.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: EXPDATE\r\n     */\r\n    public String getExpDate() {\r\n        return expDate;\r\n    }\r\n\r\n    /**\r\n     * Gets the amt parameter.\r\n     * <p>Obtain the amount of the transaction.  Used to validate\r\n     * that the amount sent was the amount authorized.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AMT\r\n     */\r\n    public String getAmt() {\r\n        return amt;\r\n    }\r\n\r\n    /**\r\n     * Gets the lastname parameter.\r\n     * <p>Obtain the last name of the card holder./p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BILLTOLASTNAME\r\n     */\r\n    public String getBillToLastName() {\r\n        return billToLastName;\r\n    }\r\n\r\n    /**\r\n     * Gets the firstname parameter.\r\n     * <p>Obtain the first name of the card holder./p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BILLTOFIRSTNAME\r\n     */\r\n    public String getBillToFirstName() {\r\n        return billToFirstName;\r\n    }\r\n\r\n    /**\r\n     * Gets the transtime parameter.\r\n     * <p>Obtain the transaction date and time./p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TRANSTIME\r\n     */\r\n    public String getTransTime() {\r\n        return transTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the cvv2match.\r\n     * <p>Result of the card security code (CVV2) check.\r\n     * This value does not affect the outcome of the\r\n     * transaction.</p>\r\n     *\r\n     * @return - String\r\n     * <p/>\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth} Value {@paypal.elth}\r\n     * {@paypal.lth} Description {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} Y {@paypal.eltd}\r\n     * {@paypal.ltd} The submitted value matches the data on file for the card. {@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} N {@paypal.eltd}\r\n     * {@paypal.ltd} The submitted value does not match the data on file for the card. {@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} X {@paypal.eltd}\r\n     * {@paypal.ltd} The cardholder's bank does not support this service. {@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     *  <p>Maps to Payflow Parameter: CVV2MATCH\r\n     */\r\n    public String getCvv2Match() {\r\n        return cvv2Match;\r\n    }\r\n\r\n    /**\r\n     * Gets the iavs.\r\n     * <p>International AVS address responses are for\r\n     * advice only. This value does not affect the\r\n     * outcome of the transaction.\r\n     * Indicates whether AVS response is\r\n     * international (Y), US (N), or cannot be\r\n     * determined (X).</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: IAVS\r\n     */\r\n    public String getIavs() {\r\n        return iavs;\r\n    }\r\n\r\n    /**\r\n     * Gets the Original transaction result for which\r\n     * inquiry transaction is performed.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ORIGRESULT\r\n     */\r\n    public String getOrigResult() {\r\n        return origResult;\r\n    }\r\n\r\n    /**\r\n     * Gets the orignal pnref for the primary transaction.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ORIGPNREF\r\n     */\r\n    public String getOrigPnref() {\r\n        return origPnref;\r\n    }\r\n\r\n    /**\r\n     * Gets the transaction state.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TRANSSTATE\r\n     */\r\n    public String getTransState() {\r\n        return transState;\r\n    }\r\n\r\n    /**\r\n     * Gets the custRef.\r\n     * <p>Merchant-defined identifier for reporting and\r\n     * auditing purposes. For example, you can set\r\n     * CUSTREF to the invoice number.\r\n     * You can use CUSTREF when performing Inquiry\r\n     * transactions. To ensure that you can always\r\n     * access the correct transaction when performing\r\n     * an Inquiry, you must provide a unique CUSTREF </p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CUSTREF\r\n     */\r\n    public String getCustRef() {\r\n        return custRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the startTime.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: STARTTIME\r\n     */\r\n    public String getStartTime() {\r\n        return startTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the end time.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ENDTIME\r\n     */\r\n    public String getEndTime() {\r\n        return endTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the duplicate parameter\r\n     * <p>Indicates transactions sent with duplicate identifier.\r\n     * If a transaction is performed with the request id that has\r\n     * been previously used for another transaction, Duplicate is\r\n     * returned as 1.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: DUPLICATE\r\n     */\r\n    public String getDuplicate() {\r\n        return duplicate;\r\n    }\r\n\r\n    /**\r\n     * Gets the inquiry DateToSettle.\r\n     * <p>Gets the settle date of the transaction for which\r\n     * inquiry transaction is performed.\r\n     * Value available only before settlement has started\r\n     * Value obtained when Payflow Verbosity paramter = MEDIUM\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: DATE_TO_SETTLE\r\n     */\r\n    public String getDateToSettle() {\r\n        return dateToSettle;\r\n    }\r\n\r\n    /**\r\n     * Gets the batchid.\r\n     * <p>Gets the batch id of the transaction for which the\r\n     * inquiry transaction is performed.\r\n     * Value available only after settlement has assigned a BatchId\r\n     * Value obtained when Payflow Verbosity paramter = MEDIUM </p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BATCHID\r\n     */\r\n    public String getBatchId() {\r\n        return batchId;\r\n    }\r\n\r\n    /**\r\n     * Gets the addlMsgs.\r\n     * Additional error message that indicates that the\r\n     * merchant used a feature that is disabled.\r\n     * Value obtained when Payflow Verbosity paramter = MEDIUM\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ADDLMSGS\r\n     */\r\n    public String getAddlMsgs() {\r\n        return addlMsgs;\r\n    }\r\n\r\n    /**\r\n     * Gets the respText.\r\n     * <p>Text corresponding to the response code\r\n     * returned by the processor. This text is not\r\n     * normalized by Gateway server.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RESPTEXT\r\n     */\r\n    public String getRespText() {\r\n        return respText;\r\n    }\r\n\r\n    /**\r\n     * Gets the procAvs.\r\n     * <p>AVS (Address Verification Service) response\r\n     * from the processor.\r\n     * Value obtained when Payflow Verbosity paramter = MEDIUM\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROCAVS\r\n     */\r\n    public String getProcAvs() {\r\n        return procAvs;\r\n    }\r\n\r\n    /**\r\n     * Gets the ProcCardSecure.\r\n     * <p>VPAS/SPA response from the processor.\r\n     * Value obtained when Payflow Verbosity paramter = MEDIUM\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROCCARDSECURE\r\n     */\r\n    public String getProcCardSecure() {\r\n        return procCardSecure;\r\n    }\r\n\r\n    /**\r\n     * Gets the PROCCVV2.\r\n     * <p>CVV2 (buyer authentication) response from the processor.\r\n     * Its a 3- or 4-digit code that is printed (not imprinted) on\r\n     * the back of a credit card. Used as partial assurance\r\n     * that the card is in the buyer's possession.\r\n     * Value obtained when Payflow Verbosity paramter = MEDIUM</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROCCVV2\r\n     */\r\n    public String getProcCVV2() {\r\n        return procCVV2;\r\n    }\r\n\r\n    /**\r\n     * Gets the hostCode.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: HOSTCODE\r\n     */\r\n    public String getHostCode() {\r\n        return hostCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the settleDate.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SETTLEDATE\r\n     */\r\n    public String getSettleDate() {\r\n        return settleDate;\r\n    }\r\n\r\n    /**\r\n     * Gets the status.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: STATUS\r\n     */\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Gets the status.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BALAMT\r\n     */\r\n    public String getBalAmt() {\r\n        return balAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the status.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AMEXID\r\n     */\r\n    public String getAmexId() {\r\n        return amexId;\r\n    }\r\n\r\n    /**\r\n     * Gets the status.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AMEXPOSDATA\r\n     */\r\n    public String getAmexPosData() {\r\n        return amexPosData;\r\n    }\r\n\r\n    /**\r\n     * Gets the card type.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CARDTYPE\r\n     */\r\n    public String getCardType() {\r\n        return cardType;\r\n    }\r\n\r\n    /**\r\n     * Gets the original amount.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ORIGAMT\r\n     */\r\n    public String getOrigAmt() {\r\n        return origAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the secure token.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SECURETOKEN\r\n     */\r\n    public String getSecureToken() {\r\n        return secureToken;\r\n    }\r\n\r\n    /**\r\n     * Gets the secure token id.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: EMAILMATCH\r\n     */\r\n    public String getEmailMatch() {\r\n        return emailMatch;\r\n    }\r\n\r\n    /**\r\n     * Gets the secure token.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PHONEMATCH\r\n     */\r\n    public String getPhoneMatch() {\r\n        return phoneMatch;\r\n    }\r\n\r\n    /**\r\n     * Gets the extended response message.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: EXTRSPMSG\r\n     */\r\n    public String getExtRspMsg() {\r\n        return extRspMsg;\r\n    }\r\n\r\n    /**\r\n     * Gets the secure token id.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SECURETOKENID\r\n     */\r\n    public String getSecureTokenId() {\r\n        return secureTokenId;\r\n    }\r\n\r\n    /**\r\n     * Gets the payment advice code.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTADVICECODE\r\n     */\r\n    public String getPaymentAdviceCode() {\r\n        return paymentAdviceCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the association response code.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ASSOCIATIONRESPCODE\r\n     */\r\n    public String getAssociationResponseCode() {\r\n        return associationResponseCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the Magtek Response.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: MAGTRESPONSE\r\n     */\r\n    public String getMagTResponse() {\r\n        return magTResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets Trace ID.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TRACEID\r\n     */\r\n    public String getTraceId() {\r\n        return traceId;\r\n    }\r\n\r\n    /**\r\n     * Gets the ACH Status/\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ACHSTATUS\r\n     */\r\n    public String getAchStatus() {\r\n        return achStatus;\r\n    }\r\n\r\n    /**\r\n     * Gets the Transaction ID (Card on File)\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TXID\r\n     */\r\n    public String getTxId() {\r\n        return txId;\r\n    }\r\n\r\n    /**\r\n     * Gets the transaction type\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TYPE\r\n     */\r\n    public String getType() {\r\n        return type;\r\n    }\r\n    /**\r\n     * Gets the cardholder status\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AFFLUENT\r\n     */\r\n    public String getAffluent() {\r\n        return affluent;\r\n    }\r\n    /**\r\n     * Gets the response if the credit card was updated\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CCUPDATED\r\n     */\r\n    public String getCcUpdated() {\r\n        return ccUpdated;\r\n    }\r\n    /**\r\n     * Gets the transaction id for Braintree.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TRANSACTIONID\r\n     */\r\n    public String getTransactionId() {\r\n        return transactionId;\r\n    }\r\n    /**\r\n     * Gets the Retrieve Reference transaction.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RRN\r\n     */\r\n    public String getRrn() {\r\n        return rrn;\r\n    }\r\n    /**\r\n     * Gets the System Trace Audit number.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: STAN\r\n     */\r\n    public String getStan() {\r\n        return stan;\r\n    }\r\n    /**\r\n     * Gets the Authorization Characteristics Indicator.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ACI\r\n     */\r\n    public String getAci() {\r\n        return aci;\r\n    }\r\n    /**\r\n     * Gets the Authorization Characteristics Indicator.\r\n     * The transaction identifier associated with the transaction being settled.\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: VALIDATIONCODE\r\n     */\r\n    public String getValidationCode() {\r\n        return validationCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the Credit Card Transaction Id.\r\n     * Unique transaction ID returned by some processors for all credit card transactions.\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CCTRANSID\r\n     */\r\n    public String getCcTransId() {\r\n        return ccTransId;\r\n    }\r\n    /**\r\n     * Gets the Credit Card Transaction POS Data.\r\n     * Value returned by some processors for all credit card transactions.\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CCTRANS_POSDATA\r\n     */\r\n    public String getCcTrans_PosData() {\r\n        return ccTrans_PosData;\r\n    }\r\n\r\n\r\n    protected TransactionResponse() {\r\n    }\r\n\r\n    protected void setParams(Hashtable ResponseHashTable) {\r\n\r\n        result = Integer.parseInt((String) ResponseHashTable.get(PayflowConstants.PARAM_RESULT));\r\n        ppref = (String) ResponseHashTable.get(PayflowConstants.PARAM_PPREF);\r\n        pnref = (String) ResponseHashTable.get(PayflowConstants.PARAM_PNREF);\r\n        respMsg = (String) ResponseHashTable.get(PayflowConstants.PARAM_RESPMSG);\r\n        authCode = (String) ResponseHashTable.get(PayflowConstants.PARAM_AUTHCODE);\r\n        avsAddr = (String) ResponseHashTable.get(PayflowConstants.PARAM_AVSADDR);\r\n        avsZip = (String) ResponseHashTable.get(PayflowConstants.PARAM_AVSZIP);\r\n        cardSecure = (String) ResponseHashTable.get(PayflowConstants.PARAM_CARDSECURE);\r\n        cvv2Match = (String) ResponseHashTable.get(PayflowConstants.PARAM_CVV2MATCH);\r\n        iavs = (String) ResponseHashTable.get(PayflowConstants.PARAM_IAVS);\r\n        origResult = (String) ResponseHashTable.get(PayflowConstants.PARAM_ORIGRESULT);\r\n        transState = (String) ResponseHashTable.get(PayflowConstants.PARAM_TRANSSTATE);\r\n        custRef = (String) ResponseHashTable.get(PayflowConstants.PARAM_CUSTREF);\r\n        startTime = (String) ResponseHashTable.get(PayflowConstants.PARAM_STARTTIME);\r\n        endTime = (String) ResponseHashTable.get(PayflowConstants.PARAM_ENDTIME);\r\n        duplicate = (String) ResponseHashTable.get(PayflowConstants.PARAM_DUPLICATE);\r\n        dateToSettle = (String) ResponseHashTable.get(PayflowConstants.PARAM_DATE_TO_SETTLE);\r\n        batchId = (String) ResponseHashTable.get(PayflowConstants.PARAM_BATCHID);\r\n        addlMsgs = (String) ResponseHashTable.get(PayflowConstants.PARAM_ADDLMSGS);\r\n        respText = (String) ResponseHashTable.get(PayflowConstants.PARAM_RESPTEXT);\r\n        procAvs = (String) ResponseHashTable.get(PayflowConstants.PARAM_PROCAVS);\r\n        procCardSecure = (String) ResponseHashTable.get(PayflowConstants.PARAM_PROCCARDSECURE);\r\n        procCVV2 = (String) ResponseHashTable.get(PayflowConstants.PARAM_PROCCVV2);\r\n        hostCode = (String) ResponseHashTable.get(PayflowConstants.PARAM_HOSTCODE);\r\n        settleDate = (String) ResponseHashTable.get(PayflowConstants.PARAM_SETTLE_DATE);\r\n        origPnref = (String) ResponseHashTable.get(PayflowConstants.PARAM_ORIGPNREF);\r\n        feeAmt = (String) ResponseHashTable.get(PayflowConstants.PARAM_FEEAMT);\r\n        pendingReason = (String) ResponseHashTable.get(PayflowConstants.PARAM_PENDINGREASON);\r\n        paymentType = (String) ResponseHashTable.get(PayflowConstants.PARAM_PAYMENTTYPE);\r\n        correlationId = (String) ResponseHashTable.get(PayflowConstants.PARAM_CORRELATIONID);\r\n        status = (String) ResponseHashTable.get(PayflowConstants.PARAM_STATUS);\r\n        balAmt = (String) ResponseHashTable.get(PayflowConstants.PARAM_BALAMT);\r\n        amexId = (String) ResponseHashTable.get(PayflowConstants.PARAM_AMEXID);\r\n        amexPosData = (String) ResponseHashTable.get(PayflowConstants.PARAM_AMEXPOSDATA);\r\n        acct = (String) ResponseHashTable.get(PayflowConstants.PARAM_ACCT);\r\n        billToLastName = (String) ResponseHashTable.get(PayflowConstants.PARAM_LASTNAME);\r\n        billToFirstName = (String) ResponseHashTable.get(PayflowConstants.PARAM_FIRSTNAME);\r\n        amt = (String) ResponseHashTable.get(PayflowConstants.PARAM_AMT);\r\n        transTime = (String) ResponseHashTable.get(PayflowConstants.PARAM_TRANSTIME);\r\n        expDate = (String) ResponseHashTable.get(PayflowConstants.PARAM_EXPDATE);\r\n        cardType = (String) ResponseHashTable.get(PayflowConstants.PARAM_CARDTYPE);\r\n        origAmt = (String) ResponseHashTable.get(PayflowConstants.PARAM_ORIGAMT);\r\n        secureToken = (String) ResponseHashTable.get(PayflowConstants.PARAM_SECURETOKEN);\r\n        secureTokenId = (String) ResponseHashTable.get(PayflowConstants.PARAM_SECURETOKENID);\r\n        phoneMatch = (String) ResponseHashTable.get(PayflowConstants.PARAM_PHONEMATCH);\r\n        emailMatch = (String) ResponseHashTable.get(PayflowConstants.PARAM_EMAILMATCH);\r\n        extRspMsg = (String) ResponseHashTable.get(PayflowConstants.PARAM_EXTRSPMSG);\r\n        paymentAdviceCode = (String) ResponseHashTable.get(PayflowConstants.PARAM_PAYMENTADVICECODE);\r\n        associationResponseCode = (String) ResponseHashTable.get(PayflowConstants.PARAM_ASSOCIATIONRESPCODE);\r\n        transactionId = (String) ResponseHashTable.get(PayflowConstants.PARAM_TRANSACTIONID);\r\n        txId = (String) ResponseHashTable.get(PayflowConstants.PARAM_TXID);\r\n        magTResponse = (String) ResponseHashTable.get(PayflowConstants.MAGTEK_PARAM_MAGTRESPONSE);\r\n        traceId = (String) ResponseHashTable.get(PayflowConstants.PARAM_TRACEID);\r\n        achStatus = (String) ResponseHashTable.get(PayflowConstants.PARAM_ACHSTATUS);\r\n        type = (String) ResponseHashTable.get(PayflowConstants.PARAM_TYPE);\r\n        affluent= (String) ResponseHashTable.get(PayflowConstants.PARAM_AFFLUENT);\r\n        ccUpdated = (String) ResponseHashTable.get(PayflowConstants.PARAM_CCUPDATED);\r\n        rrn = (String) ResponseHashTable.get(PayflowConstants.PARAM_RRN);\r\n        stan = (String) ResponseHashTable.get(PayflowConstants.PARAM_STAN);\r\n        aci = (String) ResponseHashTable.get(PayflowConstants.PARAM_ACI);\r\n        validationCode = (String) ResponseHashTable.get(PayflowConstants.PARAM_VALIDATIONCODE);\r\n        ccTransId = (String) ResponseHashTable.get(PayflowConstants.PARAM_CCTRANSID);\r\n        ccTrans_PosData = (String) ResponseHashTable.get(PayflowConstants.PARAM_CCTRANS_POSDATA);\r\n\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_RESULT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PPREF);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PNREF);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_RESPMSG);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AUTHCODE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AVSADDR);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AVSZIP);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CARDSECURE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CVV2MATCH);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_IAVS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ORIGRESULT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TRANSSTATE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CUSTREF);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_STARTTIME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ENDTIME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_DUPLICATE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_DATE_TO_SETTLE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_BATCHID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ADDLMSGS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_RESPTEXT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PROCAVS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PROCCARDSECURE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PROCCVV2);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_HOSTCODE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ORIGPNREF);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SETTLE_DATE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_FEEAMT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PENDINGREASON);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PAYMENTTYPE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CORRELATIONID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_STATUS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_BALAMT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AMEXID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AMEXPOSDATA);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ACCT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_LASTNAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_FIRSTNAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AMT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TRANSTIME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_EXPDATE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CARDTYPE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ORIGAMT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SECURETOKEN);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SECURETOKENID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PHONEMATCH);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_EMAILMATCH);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_EXTRSPMSG);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PAYMENTADVICECODE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ASSOCIATIONRESPCODE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TXID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TRANSACTIONID);\r\n        ResponseHashTable.remove(PayflowConstants.MAGTEK_PARAM_MAGTRESPONSE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TRACEID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ACHSTATUS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AFFLUENT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TYPE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_RRN);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_STAN);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ACI);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_VALIDATIONCODE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CCTRANSID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CCTRANS_POSDATA);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the feeAmt parameter\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: FEEAMT\r\n     */\r\n    public String getFeeAmt() {\r\n        return feeAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the pending reason parameter\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PENDINGREASON\r\n     */\r\n    public String getPendingReason() {\r\n        return pendingReason;\r\n    }\r\n\r\n    /**\r\n     * Gets the Payment Type parameter\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTTYPE\r\n     */\r\n    public String getPaymentType() {\r\n        return paymentType;\r\n    }\r\n\r\n    /**\r\n     * Gets the Correlation Id parameter\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CORRELATIONID\r\n     */\r\n\r\n    public String getCorrelationId() {\r\n        return correlationId;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/TransactionResponse.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/TransactionResponse.java	(date 1600062894755)
@@ -4,7 +4,7 @@
 
 /**
  * Used for transaction response.
- * <p/>
+ *  * <p>
  * TransactionResponse object is contained in the main response
  * object Response of the transaction.
  * </p>
@@ -16,7 +16,7 @@
  * *		...................
  * // Submit the transaction.
  * Response resp = trans.SubmitTransaction();
- * <p/>
+ *  * <p>
  * if (resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -227,7 +227,7 @@
 
     /**
      * Gets the lastname parameter.
-     * <p>Obtain the last name of the card holder./p>
+     * <p>Obtain the last name of the card holder.</p>
      *
      * @return - String
      *  <p>Maps to Payflow Parameter: BILLTOLASTNAME
@@ -238,7 +238,7 @@
 
     /**
      * Gets the firstname parameter.
-     * <p>Obtain the first name of the card holder./p>
+     * <p>Obtain the first name of the card holder.</p>
      *
      * @return - String
      *  <p>Maps to Payflow Parameter: BILLTOFIRSTNAME
@@ -249,7 +249,7 @@
 
     /**
      * Gets the transtime parameter.
-     * <p>Obtain the transaction date and time./p>
+     * <p>Obtain the transaction date and time.</p>
      *
      * @return - String
      *  <p>Maps to Payflow Parameter: TRANSTIME
@@ -265,26 +265,13 @@
      * transaction.</p>
      *
      * @return - String
-     * <p/>
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth} Value {@paypal.elth}
-     * {@paypal.lth} Description {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} Y {@paypal.eltd}
-     * {@paypal.ltd} The submitted value matches the data on file for the card. {@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} N {@paypal.eltd}
-     * {@paypal.ltd} The submitted value does not match the data on file for the card. {@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} X {@paypal.eltd}
-     * {@paypal.ltd} The cardholder's bank does not support this service. {@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
-     *  <p>Maps to Payflow Parameter: CVV2MATCH
+     *
+     * Value  Description
+     *   Y  - The submitted value matches the data on file for the card.
+     *   N  - The submitted value does not match the data on file for the card.
+     *   X  - The cardholder's bank does not support this service.
+     *
+     *  Maps to Payflow Parameter: CVV2MATCH
      */
     public String getCvv2Match() {
         return cvv2Match;
@@ -311,7 +298,7 @@
      * inquiry transaction is performed.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: ORIGRESULT
+     *  <p>Maps to Payflow Parameter: ORIGRESULT</p>
      */
     public String getOrigResult() {
         return origResult;
@@ -321,7 +308,7 @@
      * Gets the orignal pnref for the primary transaction.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: ORIGPNREF
+     *  <p>Maps to Payflow Parameter: ORIGPNREF</p>
      */
     public String getOrigPnref() {
         return origPnref;
@@ -331,7 +318,7 @@
      * Gets the transaction state.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: TRANSSTATE
+     *  <p>Maps to Payflow Parameter: TRANSSTATE</p>
      */
     public String getTransState() {
         return transState;
@@ -348,7 +335,7 @@
      * an Inquiry, you must provide a unique CUSTREF </p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: CUSTREF
+     *  <p>Maps to Payflow Parameter: CUSTREF</p>
      */
     public String getCustRef() {
         return custRef;
@@ -358,7 +345,7 @@
      * Gets the startTime.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: STARTTIME
+     *  <p>Maps to Payflow Parameter: STARTTIME</p>
      */
     public String getStartTime() {
         return startTime;
@@ -368,7 +355,7 @@
      * Gets the end time.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: ENDTIME
+     *  <p>Maps to Payflow Parameter: ENDTIME</p>
      */
     public String getEndTime() {
         return endTime;
@@ -382,7 +369,7 @@
      * returned as 1.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: DUPLICATE
+     *  <p>Maps to Payflow Parameter: DUPLICATE</p>
      */
     public String getDuplicate() {
         return duplicate;
@@ -396,7 +383,7 @@
      * Value obtained when Payflow Verbosity paramter = MEDIUM
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: DATE_TO_SETTLE
+     *  <p>Maps to Payflow Parameter: DATE_TO_SETTLE</p>
      */
     public String getDateToSettle() {
         return dateToSettle;
@@ -410,7 +397,7 @@
      * Value obtained when Payflow Verbosity paramter = MEDIUM </p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: BATCHID
+     *  <p>Maps to Payflow Parameter: BATCHID</p>
      */
     public String getBatchId() {
         return batchId;
@@ -423,7 +410,7 @@
      * Value obtained when Payflow Verbosity paramter = MEDIUM
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: ADDLMSGS
+     *  <p>Maps to Payflow Parameter: ADDLMSGS</p>
      */
     public String getAddlMsgs() {
         return addlMsgs;
@@ -436,7 +423,7 @@
      * normalized by Gateway server.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: RESPTEXT
+     *  <p>Maps to Payflow Parameter: RESPTEXT</p>
      */
     public String getRespText() {
         return respText;
@@ -449,7 +436,7 @@
      * Value obtained when Payflow Verbosity paramter = MEDIUM
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PROCAVS
+     *  <p>Maps to Payflow Parameter: PROCAVS</p>
      */
     public String getProcAvs() {
         return procAvs;
@@ -458,10 +445,10 @@
     /**
      * Gets the ProcCardSecure.
      * <p>VPAS/SPA response from the processor.
-     * Value obtained when Payflow Verbosity paramter = MEDIUM
+     * Value obtained when Payflow Verbosity parameter = MEDIUM
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PROCCARDSECURE
+     *  <p>Maps to Payflow Parameter: PROCCARDSECURE</p>
      */
     public String getProcCardSecure() {
         return procCardSecure;
@@ -473,10 +460,10 @@
      * Its a 3- or 4-digit code that is printed (not imprinted) on
      * the back of a credit card. Used as partial assurance
      * that the card is in the buyer's possession.
-     * Value obtained when Payflow Verbosity paramter = MEDIUM</p>
+     * Value obtained when Payflow Verbosity parameter = MEDIUM</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PROCCVV2
+     *  <p>Maps to Payflow Parameter: PROCCVV2</p>
      */
     public String getProcCVV2() {
         return procCVV2;
@@ -486,7 +473,7 @@
      * Gets the hostCode.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: HOSTCODE
+     *  <p>Maps to Payflow Parameter: HOSTCODE</p>
      */
     public String getHostCode() {
         return hostCode;
@@ -496,7 +483,7 @@
      * Gets the settleDate.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: SETTLEDATE
+     *  <p>Maps to Payflow Parameter: SETTLEDATE</p>
      */
     public String getSettleDate() {
         return settleDate;
@@ -506,7 +493,7 @@
      * Gets the status.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: STATUS
+     *  <p>Maps to Payflow Parameter: STATUS</p>
      */
     public String getStatus() {
         return status;
@@ -516,7 +503,7 @@
      * Gets the status.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: BALAMT
+     *  <p>Maps to Payflow Parameter: BALAMT</p>
      */
     public String getBalAmt() {
         return balAmt;
@@ -526,7 +513,7 @@
      * Gets the status.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: AMEXID
+     *  <p>Maps to Payflow Parameter: AMEXID</p>
      */
     public String getAmexId() {
         return amexId;
@@ -536,7 +523,7 @@
      * Gets the status.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: AMEXPOSDATA
+     *  <p>Maps to Payflow Parameter: AMEXPOSDATA</p>
      */
     public String getAmexPosData() {
         return amexPosData;
@@ -546,7 +533,7 @@
      * Gets the card type.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: CARDTYPE
+     *  <p>Maps to Payflow Parameter: CARDTYPE</p>
      */
     public String getCardType() {
         return cardType;
@@ -556,7 +543,7 @@
      * Gets the original amount.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: ORIGAMT
+     *  <p>Maps to Payflow Parameter: ORIGAMT</p>
      */
     public String getOrigAmt() {
         return origAmt;
@@ -566,7 +553,7 @@
      * Gets the secure token.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: SECURETOKEN
+     *  <p>Maps to Payflow Parameter: SECURETOKEN</p>
      */
     public String getSecureToken() {
         return secureToken;
@@ -576,7 +563,7 @@
      * Gets the secure token id.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: EMAILMATCH
+     *  <p>Maps to Payflow Parameter: EMAILMATCH</p>
      */
     public String getEmailMatch() {
         return emailMatch;
@@ -586,7 +573,7 @@
      * Gets the secure token.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PHONEMATCH
+     *  <p>Maps to Payflow Parameter: PHONEMATCH</p>
      */
     public String getPhoneMatch() {
         return phoneMatch;
@@ -596,7 +583,7 @@
      * Gets the extended response message.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: EXTRSPMSG
+     *  <p>Maps to Payflow Parameter: EXTRSPMSG</p>
      */
     public String getExtRspMsg() {
         return extRspMsg;
@@ -606,7 +593,7 @@
      * Gets the secure token id.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: SECURETOKENID
+     *  <p>Maps to Payflow Parameter: SECURETOKENID</p>
      */
     public String getSecureTokenId() {
         return secureTokenId;
@@ -616,7 +603,7 @@
      * Gets the payment advice code.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PAYMENTADVICECODE
+     *  <p>Maps to Payflow Parameter: PAYMENTADVICECODE</p>
      */
     public String getPaymentAdviceCode() {
         return paymentAdviceCode;
@@ -626,7 +613,7 @@
      * Gets the association response code.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: ASSOCIATIONRESPCODE
+     *  <p>Maps to Payflow Parameter: ASSOCIATIONRESPCODE</p>
      */
     public String getAssociationResponseCode() {
         return associationResponseCode;
Index: src/sdk/dataobjects/paypal/payflow/ExpressCheckoutRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This  class serves as base class of all ExpressCheckout request classes.\r\n * <p>Each request object is associated with a particular type of expressChecout operation.</p>\r\n * <p>Following are the request objects associated with\r\n * different operations of ExpressCheckout:</p>\r\n * <p/>\r\n * {@paypal.listtable}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}ExpressCheckout operation.{@paypal.eltd}\r\n * {@paypal.ltd}Request data object{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}SET operation for ExpressCheckout.{@paypal.eltd}\r\n * {@paypal.ltd}{@link ECSetRequest} {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}GET operation for ExpressCheckout.{@paypal.eltd}\r\n * {@paypal.ltd}{@link ECGetRequest} {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}DO operation for ExpressCheckout.{@paypal.eltd}\r\n * {@paypal.ltd}{@link ECDoRequest} {@paypal.eltd}\r\n * {@paypal.eltr}\r\n */\r\npublic class ExpressCheckoutRequest extends BaseRequestDataObject {\r\n\r\n\r\n    private String token;\r\n    private String countryCode;\r\n    private String postalCode;\r\n    private String action;\r\n    private String doReauthorization;\r\n\r\n    /**\r\n     * Gets the token parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TOKEN\r\n     */\r\n    public String getToken() {\r\n        return token;\r\n    }\r\n\r\n    /**\r\n     * Sets the token parameter.\r\n     *\r\n     * @param token - String\r\n     *  <p>Maps to Payflow Parameter: TOKEN\r\n     */\r\n    public void setToken(String token) {\r\n        this.token = token;\r\n    }\r\n\r\n    /**\r\n     * Gets the recountryCodeturnurl parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: COUNTRYCODE\r\n     */\r\n    public String getCountryCode() {\r\n        return countryCode;\r\n    }\r\n\r\n    /**\r\n     * Sets the countryCode parameter.\r\n     *\r\n     * @param countryCode - String\r\n     *  <p>Maps to Payflow Parameter: COUNTRYCODE\r\n     */\r\n    public void setCountryCode(String countryCode) {\r\n        this.countryCode = countryCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the postalCode parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: POSTALCODE\r\n     */\r\n    public String getPostalCode() {\r\n        return postalCode;\r\n    }\r\n\r\n    /**\r\n     * Sets the postalCode parameter.\r\n     *\r\n     * @param postalCode - String\r\n     *  <p>Maps to Payflow Parameter: POSTALCODE\r\n     */\r\n    public void setPostalCode(String postalCode) {\r\n        this.postalCode = postalCode;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the doReauthorization parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: DOREAUTHORIZATION\r\n     */\r\n    public String getDoReauthorization() {\r\n        return doReauthorization;\r\n    }\r\n\r\n    /**\r\n     * Sets the postalCode parameter.\r\n     *\r\n     * @param doReauthorization - String\r\n     *  <p>Maps to Payflow Parameter: DOREAUTHORIZATION\r\n     */\r\n    public void setDoReauthorization(String doReauthorization) {\r\n        this.doReauthorization = doReauthorization;\r\n    }\r\n\r\n\r\n    protected ExpressCheckoutRequest(String Action) {\r\n        action = Action;\r\n    }\r\n\r\n\r\n    protected ExpressCheckoutRequest(String Action, String Token) {\r\n        action = Action;\r\n        token = Token;\r\n    }\r\n\r\n\r\n    protected void generateRequest() {\r\n        // This function is not called. All the\r\n        //address information is validated and generated\r\n        //in its respective derived classes.\r\n        super.generateRequest();\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TOKEN, token));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_COUNTRYCODE, countryCode));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_POSTALCODE, postalCode));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ACTION, action));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DOREAUTHORIZATION, doReauthorization));\r\n\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ExpressCheckoutRequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ExpressCheckoutRequest.java	(date 1600058684844)
@@ -5,25 +5,13 @@
  * <p>Each request object is associated with a particular type of expressChecout operation.</p>
  * <p>Following are the request objects associated with
  * different operations of ExpressCheckout:</p>
- * <p/>
- * {@paypal.listtable}
- * {@paypal.ltr}
- * {@paypal.ltd}ExpressCheckout operation.{@paypal.eltd}
- * {@paypal.ltd}Request data object{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}SET operation for ExpressCheckout.{@paypal.eltd}
- * {@paypal.ltd}{@link ECSetRequest} {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}GET operation for ExpressCheckout.{@paypal.eltd}
- * {@paypal.ltd}{@link ECGetRequest} {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}DO operation for ExpressCheckout.{@paypal.eltd}
- * {@paypal.ltd}{@link ECDoRequest} {@paypal.eltd}
- * {@paypal.eltr}
+ *  * <p>
+ * ExpressCheckout operation. Request data object
+ * SET operation for ExpressCheckout {@link ExpressCheckoutResponse}
+ * GET operation for ExpressCheckout {@link ECGetResponse}
+ * DO operation for ExpressCheckout {@link ECDoResponse}
  */
+
 public class ExpressCheckoutRequest extends BaseRequestDataObject {
 
 
Index: src/sdk/dataobjects/paypal/payflow/IRequestDataObject.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Interface for all request data objects.\r\n * <p/>\r\n * This interface can be used to create a new request data object.\r\n * </p>\r\n */\r\n\r\npublic interface IRequestDataObject {\r\n\r\n    /**\r\n     * /// Generates the transaction request.\r\n     * /// <p>When implemented in the derived class, this method\r\n     * /// should be preferred to be made as an internal method.</p>\r\n     */\r\n    void generateRequest();\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/IRequestDataObject.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/IRequestDataObject.java	(date 1600056970251)
@@ -2,7 +2,7 @@
 
 /**
  * Interface for all request data objects.
- * <p/>
+ *  * <p>
  * This interface can be used to create a new request data object.
  * </p>
  */
Index: src/sdk/dataobjects/paypal/payflow/SwipeCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for swipe card information\r\n * <p/>\r\n * Used to pass the Track 1 or Track 2 data (the card's magnetic stripe information) for card-present\r\n * transactions. Include either Track 1 or Track 2 data'not both. If Track 1 is physically damaged, the\r\n * POS application can send Track 2 data instead.\r\n * <p/>\r\n * SwipeCard is associated with CardTender. {@link CardTender}\r\n * </p>\r\n */\r\n\r\npublic final class SwipeCard extends PaymentDevice {\r\n    /**\r\n     * Constructor for SwipeCard\r\n     *\r\n     * @param swipe Card Swipe value\r\n     *              <p/>\r\n     *              This is used as Payment Device for the CardTender.\r\n     *  <p>\r\n     * Maps to Payflow Parameter: SWIPE\r\n     * <p/>\r\n     * //Create the SwipeCard object\r\n     * SwipeCard payDevice = new SwipeCard(\"XXXXXXXXXXXXXXXXXXXXXXXXXXX\");\r\n     */\r\n    public SwipeCard(String swipe) {\r\n        super(swipe);\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SWIPE, super.getAcct()));\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/SwipeCard.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/SwipeCard.java	(date 1600056996958)
@@ -2,11 +2,11 @@
 
 /**
  * Used for swipe card information
- * <p/>
+ *  * <p>
  * Used to pass the Track 1 or Track 2 data (the card's magnetic stripe information) for card-present
  * transactions. Include either Track 1 or Track 2 data'not both. If Track 1 is physically damaged, the
  * POS application can send Track 2 data instead.
- * <p/>
+ *  * <p>
  * SwipeCard is associated with CardTender. {@link CardTender}
  * </p>
  */
@@ -16,11 +16,11 @@
      * Constructor for SwipeCard
      *
      * @param swipe Card Swipe value
-     *              <p/>
+     *               * <p>
      *              This is used as Payment Device for the CardTender.
      *  <p>
      * Maps to Payflow Parameter: SWIPE
-     * <p/>
+     *  * <p>
      * //Create the SwipeCard object
      * SwipeCard payDevice = new SwipeCard("XXXXXXXXXXXXXXXXXXXXXXXXXXX");
      */
Index: src/sdk/dataobjects/paypal/payflow/ShipTo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for shipping address information\r\n * <p>Shipping address is destination address information.</p>\r\n * <p>Following example shows how to use BillTo.</p>\r\n *\r\n * .................\r\n * //inv is the Invoice object.\r\n * .................\r\n * <p/>\r\n * //Set the Shipping Address details.\r\n * ShipTo ship = new ShipTo();\r\n * ship.setShipToStreet( \"123 Main St.\");\r\n * ship.setShipToZip(\"12345\");\r\n * inv.setShipTo (ship);\r\n * .................\r\n */\r\n\r\npublic final class ShipTo extends Address {\r\n    private String shipMethod;\r\n    private String shipCarrier;\r\n    private String shipFromZip;\r\n\r\n    /**\r\n     * Gets the shipping city\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOCITY</p>\r\n     */\r\n    public String getShipToCity() {\r\n        return super.getAddressCity();\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping city\r\n     *\r\n     * @param shipToCity String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOCITY</p>\r\n     */\r\n    public void setShipToCity(String shipToCity) {\r\n        super.setAddressCity(shipToCity);\r\n    }\r\n\r\n    /**\r\n     * Gets the Shipping Country\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOCOUNTRY</p>\r\n     */\r\n    public String getShipToCountry() {\r\n        return super.getAddressCountry();\r\n    }\r\n\r\n    /**\r\n     * Sets the Shipping Country\r\n     *\r\n     * @param shipToCountry String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOCOUNTRY</p>\r\n     */\r\n    public void setShipToCountry(String shipToCountry) {\r\n        super.setAddressCountry(shipToCountry);\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping email.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOEMAIL</p>\r\n     */\r\n    public String getShipToEmail() {\r\n        return super.getAddressEmail();\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping email.\r\n     *\r\n     * @param shipToEmail String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOEMAIL</p>\r\n     */\r\n    public void setShipToEmail(String shipToEmail) {\r\n        super.setAddressEmail(shipToEmail);\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping first name\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOFIRSTNAME</p>\r\n     */\r\n    public String getShipToFirstName() {\r\n        return super.getAddressFirstName();\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping first name\r\n     *\r\n     * @param shipToFirstName String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOFIRSTNAME</p>\r\n     */\r\n    public void setShipToFirstName(String shipToFirstName) {\r\n        super.setAddressFirstName(shipToFirstName);\r\n    }\r\n\r\n    /**\r\n     * Gets the last name from the shipping address.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOLASTNAME</p>\r\n     */\r\n    public String getShipToLastName() {\r\n        return super.getAddressLastName();\r\n    }\r\n\r\n    /**\r\n     * Sets the last name in the shipping address.\r\n     *\r\n     * @param shipToLastName String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOLASTNAME</p>\r\n     */\r\n    public void setShipToLastName(String shipToLastName) {\r\n        super.setAddressLastName(shipToLastName);\r\n    }\r\n\r\n    /**\r\n     * Gets the middlename from the shipping address.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOMIDDLENAME</p>\r\n     */\r\n    public String getShipToMiddleName() {\r\n        return super.getAddressMiddleName();\r\n    }\r\n\r\n    /**\r\n     * Sets the middlename in the shipping address.\r\n     *\r\n     * @param shipToMiddleName String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOMIDDLENAME</p>\r\n     */\r\n    public void setShipToMiddleName(String shipToMiddleName) {\r\n        super.setAddressMiddleName(shipToMiddleName);\r\n    }\r\n\r\n    /**\r\n     * Gets the Phone2 from the shipping address.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOPHONE2</p>\r\n     */\r\n    public String getShipToPhone2() {\r\n        return super.getAddressPhone2();\r\n    }\r\n\r\n    /**\r\n     * Sets the Phone2 in the shipping address.\r\n     *\r\n     * @param shipToPhone2 String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOPHONE2</p>\r\n     */\r\n    public void setShipToPhone2(String shipToPhone2) {\r\n        super.setAddressPhone2(shipToPhone2);\r\n    }\r\n\r\n    /**\r\n     * Gets the phone number from the shipping address.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOPHONE</p>\r\n     */\r\n    public String getShipToPhone() {\r\n        return super.getAddressPhone();\r\n    }\r\n\r\n    /**\r\n     * Sets the phone number in the shipping address.\r\n     *\r\n     * @param shipToPhone String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOPHONE</p>\r\n     */\r\n    public void setShipToPhone(String shipToPhone) {\r\n        super.setAddressPhone(shipToPhone);\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping state.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOSTATE</p>\r\n     */\r\n    public String getShipToState() {\r\n        return super.getAddressState();\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping state.\r\n     *\r\n     * @param shipToState String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOSTATE</p>\r\n     */\r\n    public void setShipToState(String shipToState) {\r\n        super.setAddressState(shipToState);\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping street.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOSTREET</p>\r\n     */\r\n    public String getShipToStreet() {\r\n        return super.getAddressStreet();\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping street.\r\n     *\r\n     * @param shipToStreet String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOSTREET</p>\r\n     */\r\n    public void setShipToStreet(String shipToStreet) {\r\n        super.setAddressStreet(shipToStreet);\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping street2.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOSTREET2</p>\r\n     */\r\n    public String getShipToStreet2() {\r\n        return super.getAddressStreet2();\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping street2.\r\n     *\r\n     * @param shipToStreet2 String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOSTREET2</p>\r\n     */\r\n    public void setShipToStreet2(String shipToStreet2) {\r\n        super.setAddressStreet2(shipToStreet2);\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping zip code.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOZIP</p>\r\n     */\r\n    public String getShipToZip() {\r\n        return super.getAddressZip();\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping zip code.\r\n     *\r\n     * @param shipToZip String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOZIP.</p>\r\n     */\r\n    public void setShipToZip(String shipToZip) {\r\n        super.setAddressZip(shipToZip);\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping method.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPMETHOD</p>\r\n     */\r\n    public String getShipMethod() {\r\n        return shipMethod;\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping method.\r\n     *\r\n     * @param shipMethod String\r\n     *  <p>Maps to Payflow Parameter: SHIPMETHOD</p>\r\n     */\r\n    public void setShipMethod(String shipMethod) {\r\n        this.shipMethod = shipMethod;\r\n    }\r\n\r\n    /**\r\n     * Gets the shipping carrier.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPCARRIER</p>\r\n     */\r\n    public String getShipCarrier() {\r\n        return shipCarrier;\r\n    }\r\n\r\n    /**\r\n     * Sets the shipping carrier.\r\n     *\r\n     * @param shipCarrier String\r\n     *  <p>Maps to Payflow Parameter: SHIPCARRIER</p>\r\n     */\r\n    public void setShipCarrier(String shipCarrier) {\r\n        this.shipCarrier = shipCarrier;\r\n    }\r\n\r\n    /**\r\n     * Gets the ship from zip.\r\n     * <p>Ship from postal code (called ZIP code in the USA).</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPFROMZIP</p>\r\n     */\r\n    public String getShipFromZip() {\r\n        return shipFromZip;\r\n    }\r\n\r\n    /**\r\n     * Sets the ship from zip.\r\n     * <p>Ship from postal code (called ZIP code in the USA).</P>\r\n     *\r\n     * @param shipFromZip String\r\n     *  <p>Maps to Payflow Parameter: SHIPFROMZIP</p>\r\n     */\r\n    public void setShipFromZip(String shipFromZip) {\r\n        this.shipFromZip = shipFromZip;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     * <p>Shipping address is destination address information.</p>\r\n     * <p>Following example shows how to use ShipTo.</p>\r\n     *\r\n     *  .................\r\n     * //inv is the Invoice object.\r\n     * .................\r\n     * <p/>\r\n     * //Set the Shipping Address details.\r\n     * ShipTo ship = new ShipTo();\r\n     * ship.setShipToStreet (\"685A E. Middlefield Rd.\");\r\n     * ship.ShipToZip (\"94043\");\r\n     * inv.setShipTo( ship);\r\n     * .................\r\n     */\r\n    public ShipTo() {\r\n    }\r\n\r\n    /**\r\n     * This method copies the common contents\r\n     * from shipping to billing address.\r\n     *\r\n     * @return BillTo\r\n     *         <p>This method can be used to\r\n     *         populate the shipping addresses directly\r\n     *         from the billing addresses when\r\n     *         both are the same.</p>\r\n     *  ................\r\n     * //ship is the object of\r\n     * //shipTo populated with\r\n     * //the shipping addresses.\r\n     * ................\r\n     * <p/>\r\n     * <p/>\r\n     * BillTo bill;\r\n     * <p/>\r\n     * //Populate billing addresses\r\n     * //from shipping addresses.\r\n     * bill = ship.copy();\r\n     * <p/>\r\n     * ................\r\n     */\r\n    public BillTo copy() {\r\n        BillTo copyObject = new BillTo();\r\n        copyObject.setAddressCity(this.getAddressCity());\r\n        copyObject.setAddressCountry(this.getAddressCountry());\r\n        copyObject.setAddressEmail(this.getAddressEmail());\r\n        copyObject.setAddressFax(this.getAddressFax());\r\n        copyObject.setAddressFirstName(this.getAddressFirstName());\r\n        copyObject.setAddressLastName(this.getAddressLastName());\r\n        copyObject.setAddressMiddleName(this.getAddressMiddleName());\r\n        copyObject.setAddressPhone2(this.getAddressPhone2());\r\n        copyObject.setAddressPhone(this.getAddressPhone());\r\n        copyObject.setAddressState(this.getAddressState());\r\n        copyObject.setAddressStreet(this.getAddressStreet());\r\n        copyObject.setAddressStreet2(this.getAddressStreet2());\r\n        copyObject.setAddressZip(this.getAddressZip());\r\n        return copyObject;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOSTREET, this.getShipToStreet()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOSTREET2, this.getShipToStreet2()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOCITY, this.getShipToCity()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOSTATE, this.getShipToState()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOCOUNTRY, this.getShipToCountry()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOZIP, this.getShipToZip()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOPHONE, this.getShipToPhone()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOPHONE2, this.getShipToPhone2()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOEMAIL, this.getShipToEmail()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOFIRSTNAME, this.getShipToFirstName()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOMIDDLENAME, this.getShipToMiddleName()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTOLASTNAME, this.getShipToLastName()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPCARRIER, shipCarrier));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPMETHOD, shipMethod));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPFROMZIP, shipFromZip));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPPEDFROMZIP, shipFromZip));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ShipTo.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ShipTo.java	(date 1600056996236)
@@ -8,7 +8,7 @@
  * .................
  * //inv is the Invoice object.
  * .................
- * <p/>
+ *  * <p>
  * //Set the Shipping Address details.
  * ShipTo ship = new ShipTo();
  * ship.setShipToStreet( "123 Main St.");
@@ -332,7 +332,7 @@
      *  .................
      * //inv is the Invoice object.
      * .................
-     * <p/>
+     *  * <p>
      * //Set the Shipping Address details.
      * ShipTo ship = new ShipTo();
      * ship.setShipToStreet ("685A E. Middlefield Rd.");
@@ -357,14 +357,13 @@
      * //shipTo populated with
      * //the shipping addresses.
      * ................
-     * <p/>
-     * <p/>
+     *  * <p>
      * BillTo bill;
-     * <p/>
+     *  * <p>
      * //Populate billing addresses
      * //from shipping addresses.
      * bill = ship.copy();
-     * <p/>
+     *  * <p>
      * ................
      */
     public BillTo copy() {
Index: src/sdk/dataobjects/paypal/payflow/ExpressCheckoutResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport paypal.payflow.ECGetResponse;\r\n\r\nimport java.util.Hashtable;\r\n\r\n/**\r\n * This  class serves as base class of all ExpressCheckout response classes.\r\n * <p>Each response object is associated with a particular type of expressCheckout operation.</p>\r\n * <p>Following are the request objects associated with\r\n * different operations of ExpressCheckout:</p>\r\n * <p/>\r\n * {@paypal.listtable}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}ExpressCheckout operation.{@paypal.eltd}\r\n * {@paypal.ltd}Request data object{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}SET operation for ExpressCheckout.{@paypal.eltd}\r\n * {@paypal.ltd}{@link ExpressCheckoutResponse} {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}GET operation for ExpressCheckout.{@paypal.eltd}\r\n * {@paypal.ltd}{@link ECGetResponse} {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}DO operation for ExpressCheckout.{@paypal.eltd}\r\n * {@paypal.ltd}{@link ECDoResponse} {@paypal.eltd}\r\n * {@paypal.eltr}\r\n */\r\n\r\n\r\npublic class ExpressCheckoutResponse extends BaseResponseDataObject {\r\n    private String token;\r\n\r\n    /**\r\n     * Gets the token parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TOKEN\r\n     */\r\n    public String getToken() {\r\n        return token;\r\n    }\r\n\r\n    protected ExpressCheckoutResponse() {\r\n    }\r\n\r\n    protected void setParams(Hashtable ResponseHashTable) {\r\n        token = (String) ResponseHashTable.get(PayflowConstants.PARAM_TOKEN);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TOKEN);\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ExpressCheckoutResponse.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ExpressCheckoutResponse.java	(date 1600058400581)
@@ -9,26 +9,12 @@
  * <p>Each response object is associated with a particular type of expressCheckout operation.</p>
  * <p>Following are the request objects associated with
  * different operations of ExpressCheckout:</p>
- * <p/>
- * {@paypal.listtable}
- * {@paypal.ltr}
- * {@paypal.ltd}ExpressCheckout operation.{@paypal.eltd}
- * {@paypal.ltd}Request data object{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}SET operation for ExpressCheckout.{@paypal.eltd}
- * {@paypal.ltd}{@link ExpressCheckoutResponse} {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}GET operation for ExpressCheckout.{@paypal.eltd}
- * {@paypal.ltd}{@link ECGetResponse} {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}DO operation for ExpressCheckout.{@paypal.eltd}
- * {@paypal.ltd}{@link ECDoResponse} {@paypal.eltd}
- * {@paypal.eltr}
+ * <p>
+ * ExpressCheckout operation. Request data object
+ * SET operation for ExpressCheckout {@link ExpressCheckoutResponse}
+ * GET operation for ExpressCheckout {@link ECGetResponse}
+ * DO operation for ExpressCheckout {@link ECDoResponse}
  */
-
 
 public class ExpressCheckoutResponse extends BaseResponseDataObject {
     private String token;
Index: src/sdk/dataobjects/paypal/payflow/ECDoRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for ExpressCheckout DO operation.\r\n * {@link ECSetRequest}\r\n * {@link ECGetRequest}\r\n */\r\npublic class ECDoRequest extends ExpressCheckoutRequest {\r\n\r\n    private String payerId;\r\n\r\n    /**\r\n     * * <summary>\r\n     * Constructor for ECDoRequest\r\n     *\r\n     * @param token   - String\r\n     * @param payerId String\r\n     *                <p/>\r\n     *                ECDoRequest is used to set the data required for a Express Checkout DO operation.\r\n     *                </p>\r\n     *  .............\r\n     * <p/>\r\n     * Create the ECDoRequest object\r\n     * ECDoRequest doEC = new ECDoRequest(\"[tokenid]\",\"[payerid]\");\r\n     * <p/>\r\n     * .............\r\n     */\r\n    public ECDoRequest(String token, String payerId) {\r\n        super(PayflowConstants.PARAM_ACTION_DO, token);\r\n        this.payerId = payerId;\r\n    }\r\n\r\n    protected ECDoRequest(String token, String payerId, String Action) {\r\n        super(PayflowConstants.PARAM_ACTION_DOBA, token);\r\n        this.payerId = payerId;\r\n    }\r\n\r\n    /**\r\n     * Gets the payerid parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYERID\r\n     */\r\n    public String getPayerId() {\r\n        return payerId;\r\n    }\r\n\r\n    /**\r\n     * Sets the payerid parameter.\r\n     *\r\n     * @param payerId - String\r\n     *  <p>Maps to Payflow Parameter: PAYERID\r\n     */\r\n\r\n    public void setPayerId(String payerId) {\r\n        this.payerId = payerId;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        // This function is not called. All the\r\n        //address information is validated and generated\r\n        //in its respective derived classes.\r\n        super.generateRequest();\r\n\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAYERID, payerId));\r\n\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ECDoRequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ECDoRequest.java	(date 1600060217756)
@@ -10,20 +10,20 @@
     private String payerId;
 
     /**
-     * * <summary>
+     *
      * Constructor for ECDoRequest
      *
      * @param token   - String
      * @param payerId String
-     *                <p/>
-     *                ECDoRequest is used to set the data required for a Express Checkout DO operation.
-     *                </p>
-     *  .............
-     * <p/>
-     * Create the ECDoRequest object
+     *
+     * ECDoRequest is used to set the data required for a Express Checkout DO operation.
+     *
+     * <code>
+     * *.............
+     * * Create the ECDoRequest object
      * ECDoRequest doEC = new ECDoRequest("[tokenid]","[payerid]");
-     * <p/>
-     * .............
+     * *.............
+     * </code>
      */
     public ECDoRequest(String token, String payerId) {
         super(PayflowConstants.PARAM_ACTION_DO, token);
Index: src/sdk/dataobjects/paypal/payflow/RecurringResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.util.Hashtable;\r\n\r\n/**\r\n * Container class for all the messages related to\r\n * recurring transactions.\r\n * <p>This class contains response messages specific to\r\n * the recurring transactions.</p>\r\n * <p>Following example shows how to obtain and use the recurring\r\n * response.\r\n *\r\n *  ...................\r\n * // Trans is the recurring transaction.\r\n * ...................\r\n * // Submit the transaction.\r\n * Response resp = trans.SubmitTransaction();\r\n * <p/>\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse!= null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.Result);\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.RespMsg);\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * <p/>\r\n * ...................\r\n */\r\npublic final class RecurringResponse extends BaseResponseDataObject {\r\n\r\n\r\n    private String profileId;\r\n    private String rpRef;\r\n    private String trxPNRef;\r\n    private String trxResult;\r\n    private String trxRespMsg;\r\n    private String profileName;\r\n    private String start;\r\n    private String term;\r\n    private String payPeriod;\r\n    private String status;\r\n    private String tender;\r\n    private String paymentsLeft;\r\n    private String nextPayment;\r\n    private String end;\r\n    private String aggregateAmt;\r\n    private String aggregateOptionalAmt;\r\n    private String amt;\r\n    private String acct;\r\n    private String expDate;\r\n    private String maxFailPayments;\r\n    private String numFailPayments;\r\n    private String retryNumDays;\r\n    private String email;\r\n    private String companyName;\r\n    private String name;\r\n    private String firstName;\r\n    private String middleName;\r\n    private String lastname;\r\n    private String street;\r\n    private String city;\r\n    private String state;\r\n    private String zip;\r\n    private String country;\r\n    private String phoneNum;\r\n    private String shipToFName;\r\n    private String shipToMName;\r\n    private String shipToLName;\r\n    private String shipToStreet;\r\n    private String shipToCity;\r\n    private String shipToState;\r\n    private String shipToZip;\r\n    private String shipToCountry;\r\n    private Hashtable inquiryParams;\r\n\r\n    /**\r\n     * Gets the Profile ID of the original profile.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROFILEID\r\n     */\r\n    public String getProfileId() {\r\n        return profileId;\r\n    }\r\n\r\n    /**\r\n     * Gets the Reference number to this particular action request.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RPREF\r\n     */\r\n    public String getRpRef() {\r\n        return rpRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the PNREF of the optional transaction.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TRXPNREF\r\n     */\r\n    public String getTrxPNRef() {\r\n        return trxPNRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the RESULT of the optional transaction.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TRXRESULT\r\n     */\r\n    public String getTrxResult() {\r\n        return trxResult;\r\n    }\r\n\r\n    /**\r\n     * Gets the RESPMSG of the optional transaction.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TRXRESPMSG\r\n     */\r\n    public String getTrxRespMsg() {\r\n        return trxRespMsg;\r\n    }\r\n\r\n    /**\r\n     * Gets the profileName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROFILENAME\r\n     */\r\n    public String getProfileName() {\r\n        return profileName;\r\n    }\r\n\r\n    /**\r\n     * Gets the Beginning date for the recurring billing cycle.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: START\r\n     */\r\n    public String getStart() {\r\n        return start;\r\n    }\r\n\r\n    /**\r\n     * Gets the Number of payments to be made over the life of the agreement.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TERM\r\n     */\r\n    public String getTerm() {\r\n        return term;\r\n    }\r\n\r\n    /**\r\n     * Gets the PayPeriod parameter.Specifies how often the payment occurs.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYPERIOD\r\n     */\r\n    public String getPayPeriod() {\r\n        return payPeriod;\r\n    }\r\n\r\n    /**\r\n     * Gets the Current status of the profile.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: STATUS\r\n     */\r\n    public String getStatus() {\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Gets the tendertype.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TENDER\r\n     */\r\n    public String getTender() {\r\n        return tender;\r\n    }\r\n\r\n    /**\r\n     * Gets the PaymentsLeft parameter. Number of payments left to be billed.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTSLEFT\r\n     */\r\n    public String getPaymentsLeft() {\r\n        return paymentsLeft;\r\n    }\r\n\r\n    /**\r\n     * Gets the next payment parameter.Date that the next payment is due.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: NEXTPAYMENT\r\n     */\r\n    public String getNextPayment() {\r\n        return nextPayment;\r\n    }\r\n\r\n    /**\r\n     * Gets the profileName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: END\r\n     */\r\n    public String getEnd() {\r\n        return end;\r\n    }\r\n\r\n    /**\r\n     * Gets AggregateAmt.Amount collected so far for scheduled payments.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AGGREGATEAMT\r\n     */\r\n    public String getAggregateAmt() {\r\n        return aggregateAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the AggregateOptAmt parameter.Amount collected through sending optional transactions.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AGGREGATEOPTIONALAMT\r\n     */\r\n    public String getAggregateOptionalAmt() {\r\n        return aggregateOptionalAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the amt parameter.Base dollar amount to be billed.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: AMT\r\n     */\r\n    public String getAmt() {\r\n        return amt;\r\n    }\r\n\r\n    /**\r\n     * Gets Acct.Masked credit card number.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ACCT\r\n     */\r\n    public String getAcct() {\r\n        return acct;\r\n    }\r\n\r\n    /**\r\n     * Gets the ExpDate parameter.Expiration date of the credit card account.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: EXPDATE\r\n     */\r\n    public String getExpDate() {\r\n        return expDate;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxfailpayments parameter.The number of payment periods (specified by\r\n     * PAYPERIOD) for which the transaction is allowed to fail\r\n     * before PayPal cancels a profile.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: MAXFAILPAYMENTS\r\n     */\r\n    public String getMaxFailPayments() {\r\n        return maxFailPayments;\r\n    }\r\n\r\n    /**\r\n     * Gets the NumFailPayments parameter.Number of payments that failed.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: NUMFAILPAYMENTS\r\n     */\r\n    public String getNumFailPayments() {\r\n        return numFailPayments;\r\n    }\r\n\r\n    /**\r\n     * Gets the retryNumDays parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RETRYNUMDAYS\r\n     */\r\n    public String getRetryNumDays() {\r\n        return retryNumDays;\r\n    }\r\n\r\n    /**\r\n     * Gets the email parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: EMAIL\r\n     */\r\n    public String getEmail() {\r\n        return email;\r\n    }\r\n\r\n    /**\r\n     * Gets the companyName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: COMPANYNAME\r\n     */\r\n    public String getCompanyName() {\r\n        return companyName;\r\n    }\r\n\r\n    /**\r\n     * Gets the name parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: NAME\r\n     */\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * Gets the firstName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: FIRSTNAME\r\n     */\r\n    public String getFirstName() {\r\n        return firstName;\r\n    }\r\n\r\n    /**\r\n     * Gets the middleName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: MIDDLENAME\r\n     */\r\n    public String getMiddleName() {\r\n        return middleName;\r\n    }\r\n\r\n    /**\r\n     * Gets the lastname parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: LASTNAME\r\n     */\r\n    public String getLastname() {\r\n        return lastname;\r\n    }\r\n\r\n    /**\r\n     * Gets the street parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: STREET\r\n     */\r\n    public String getStreet() {\r\n        return street;\r\n    }\r\n\r\n    /**\r\n     * Gets the city parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CITY\r\n     */\r\n    public String getCity() {\r\n        return city;\r\n    }\r\n\r\n    /**\r\n     * Gets the state parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: STATE\r\n     */\r\n    public String getState() {\r\n        return state;\r\n    }\r\n\r\n    /**\r\n     * Gets the Zip parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ZIP\r\n     */\r\n    public String getZip() {\r\n        return zip;\r\n    }\r\n\r\n    /**\r\n     * Gets the Country parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: COUNTRY\r\n     */\r\n    public String getCountry() {\r\n        return country;\r\n    }\r\n\r\n    /**\r\n     * Gets the PhoneNum parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PHONENUM\r\n     */\r\n    public String getPhoneNum() {\r\n        return phoneNum;\r\n    }\r\n\r\n    /**\r\n     * Gets the hipToFName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOFIRSTNAME\r\n     */\r\n    public String getShipToFName() {\r\n        return shipToFName;\r\n    }\r\n\r\n    /**\r\n     * Gets the ShipToMName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOMIDDLENAME\r\n     */\r\n    public String getShipToMName() {\r\n        return shipToMName;\r\n    }\r\n\r\n    /**\r\n     * Gets the ShipToLName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOLASTNAME\r\n     */\r\n    public String getShipToLName() {\r\n        return shipToLName;\r\n    }\r\n\r\n    /**\r\n     * Gets the ShipToStreet parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOSTREET\r\n     */\r\n    public String getShipToStreet() {\r\n        return shipToStreet;\r\n    }\r\n\r\n    /**\r\n     * Gets the ShipToCity parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOCITY\r\n     */\r\n    public String getShipToCity() {\r\n        return shipToCity;\r\n    }\r\n\r\n    /**\r\n     * Gets the profileName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROFILENAME\r\n     */\r\n    public String getShipToState() {\r\n        return shipToState;\r\n    }\r\n\r\n    /**\r\n     * Gets the ShipToZip parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOZIP\r\n     */\r\n    public String getShipToZip() {\r\n        return shipToZip;\r\n    }\r\n\r\n    /**\r\n     * Gets the ShipToCountry parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTOCOUNTRY\r\n     */\r\n    public String getShipToCountry() {\r\n        return shipToCountry;\r\n    }\r\n\r\n    /**\r\n     * Gets the profileName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROFILENAME\r\n     */\r\n    public Hashtable getInquiryParams() {\r\n        return inquiryParams;\r\n    }\r\n\r\n    protected RecurringResponse() {\r\n        inquiryParams = new Hashtable();\r\n    }\r\n\r\n    protected void setParams(Hashtable ResponseHashTable) {\r\n        profileId = (String) ResponseHashTable.get(PayflowConstants.PARAM_PROFILEID);\r\n        rpRef = (String) ResponseHashTable.get(PayflowConstants.PARAM_RPREF);\r\n        trxPNRef = (String) ResponseHashTable.get(PayflowConstants.PARAM_TRXPNREF);\r\n        trxResult = (String) ResponseHashTable.get(PayflowConstants.PARAM_TRXRESULT);\r\n        trxRespMsg = (String) ResponseHashTable.get(PayflowConstants.PARAM_TRXRESPMSG);\r\n\r\n        //Additional fields for Inquiry transaction\r\n        profileName = (String) ResponseHashTable.get(PayflowConstants.PARAM_PROFILENAME);\r\n        start = (String) ResponseHashTable.get(PayflowConstants.PARAM_START);\r\n        term = (String) ResponseHashTable.get(PayflowConstants.PARAM_TERM);\r\n        payPeriod = (String) ResponseHashTable.get(PayflowConstants.PARAM_PAYPERIOD);\r\n        status = (String) ResponseHashTable.get(PayflowConstants.PARAM_STATUS);\r\n        tender = (String) ResponseHashTable.get(PayflowConstants.PARAM_TENDER);\r\n        paymentsLeft = (String) ResponseHashTable.get(PayflowConstants.PARAM_PAYMENTSLEFT);\r\n        nextPayment = (String) ResponseHashTable.get(PayflowConstants.PARAM_NEXTPAYMENT);\r\n        end = (String) ResponseHashTable.get(PayflowConstants.PARAM_END);\r\n        aggregateAmt = (String) ResponseHashTable.get(PayflowConstants.PARAM_AGGREGATEAMT);\r\n        aggregateOptionalAmt = (String) ResponseHashTable.get(PayflowConstants.PARAM_AGGREGATEOPTIONALAMT);\r\n        amt = (String) ResponseHashTable.get(PayflowConstants.PARAM_AMT);\r\n        acct = (String) ResponseHashTable.get(PayflowConstants.PARAM_ACCT);\r\n        expDate = (String) ResponseHashTable.get(PayflowConstants.PARAM_EXPDATE);\r\n        maxFailPayments = (String) ResponseHashTable.get(PayflowConstants.PARAM_MAXFAILPAYMENTS);\r\n        numFailPayments = (String) ResponseHashTable.get(PayflowConstants.PARAM_NUMFAILPAYMENTS);\r\n        retryNumDays = (String) ResponseHashTable.get(PayflowConstants.PARAM_RETRYNUMDAYS);\r\n        email = (String) ResponseHashTable.get(PayflowConstants.PARAM_EMAIL);\r\n        companyName = (String) ResponseHashTable.get(PayflowConstants.PARAM_COMPANYNAME);\r\n        name = (String) ResponseHashTable.get(PayflowConstants.PARAM_NAME);\r\n        firstName = (String) ResponseHashTable.get(PayflowConstants.PARAM_FIRSTNAME);\r\n        middleName = (String) ResponseHashTable.get(PayflowConstants.PARAM_MIDDLENAME);\r\n        lastname = (String) ResponseHashTable.get(PayflowConstants.PARAM_LASTNAME);\r\n        street = (String) ResponseHashTable.get(PayflowConstants.PARAM_STREET);\r\n        city = (String) ResponseHashTable.get(PayflowConstants.PARAM_CITY);\r\n        state = (String) ResponseHashTable.get(PayflowConstants.PARAM_STATE);\r\n        zip = (String) ResponseHashTable.get(PayflowConstants.PARAM_ZIP);\r\n        country = (String) ResponseHashTable.get(PayflowConstants.PARAM_COUNTRY);\r\n        phoneNum = (String) ResponseHashTable.get(PayflowConstants.PARAM_PHONENUM);\r\n        shipToFName = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOFIRSTNAME);\r\n        shipToMName = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOMIDDLENAME);\r\n        shipToLName = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOLASTNAME);\r\n        shipToStreet = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOSTREET);\r\n        shipToCity = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOCITY);\r\n        shipToState = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOSTATE);\r\n        shipToZip = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOZIP);\r\n        shipToCountry = (String) ResponseHashTable.get(PayflowConstants.PARAM_SHIPTOCOUNTRY);\r\n\r\n\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PROFILEID);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_RPREF);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TRXPNREF);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TRXRESULT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TRXRESPMSG);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PROFILENAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_START);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TERM);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PAYPERIOD);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_STATUS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_TENDER);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PAYMENTSLEFT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_NEXTPAYMENT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_END);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AGGREGATEAMT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AGGREGATEOPTIONALAMT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_AMT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ACCT);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_EXPDATE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_MAXFAILPAYMENTS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_NUMFAILPAYMENTS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_RETRYNUMDAYS);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_EMAIL);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_COMPANYNAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_NAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_FIRSTNAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_MIDDLENAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_LASTNAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_STREET);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_CITY);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_STATE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_ZIP);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_COUNTRY);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PHONENUM);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOFIRSTNAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOMIDDLENAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOLASTNAME);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOSTREET);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOCITY);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOSTATE);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOZIP);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_SHIPTOCOUNTRY);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_P_RESULTn);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_P_PNREFn);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_P_TRANSTATEn);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_P_TENDERn);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_P_TRANSTIMEn);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_P_AMOUNTn);\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/RecurringResponse.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/RecurringResponse.java	(date 1600056994512)
@@ -15,7 +15,7 @@
  * ...................
  * // Submit the transaction.
  * Response resp = trans.SubmitTransaction();
- * <p/>
+ *  * <p>
  * if (resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -25,7 +25,7 @@
  * System.out.println("RESULT = " + trxnResponse.Result);
  * System.out.println("RESPMSG = " + trxnResponse.RespMsg);
  * }
- * <p/>
+ *  * <p>
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -34,7 +34,7 @@
  * System.out.println("PROFILEID = " + recurResponse.getProfileId());
  * }
  * }
- * <p/>
+ *  * <p>
  * ...................
  */
 public final class RecurringResponse extends BaseResponseDataObject {
Index: src/sdk/dataobjects/paypal/payflow/Invoice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * Used as the Purchase Invoice class. All the purchase related information can be stored in this class.\r\n * <p/>\r\n * Following transactions do require invoice object:</p>\r\n * <ol>\r\n * <li>Sale Transaction</li>\r\n * <li>Authorization Transaction</li>\r\n * <li>Voice Authorization Transaction</li>\r\n * <li>Primary Credit Transaction</li>\r\n * <li>Recurring Transaction : Action --> Add, Payment</li>\r\n * </ol>\r\n * <p>However, Invoice information can also be passed in the following transactions:</p>\r\n * <ol>\r\n * <li>Delayed Capture Transaction</li>\r\n * <li>Credit Transaction</li>\r\n * <li>Void Authorization Transaction</li>\r\n * <li>Reference Credit Transaction</li>\r\n * </ol>\r\n *\r\n *  <p>\r\n * .................\r\n * // Create a new Invoice data object with the Amount, Billing Address etc. details.\r\n * Invoice inv = new Invoice();\r\n * // Set Amount.\r\n * Currency amt = new Currency(new decimal(25.12));\r\n * inv.setAmt(amt);\r\n * inv.setPoNum(\"PO12345\");\r\n * inv.setInvNum(\"INV12345\");\r\n * inv.setAltTaxAmt(new Currency(new decimal(25.14)));\r\n * // Set the Billing Address details.\r\n * BillTo bill = new BillTo();\r\n * bill.setBillToStreet(\"123 Main St.\");\r\n * bill.setBillToZip(\"12345\");\r\n * inv.setBillTo (Bill);\r\n * .................\r\n */\r\npublic class Invoice extends BaseRequestDataObject {\r\n\r\n    private BillTo billTo;\r\n    private ShipTo shipTo;\r\n    private ArrayList itemList;\r\n    private String invNum;\r\n    private Currency amt;\r\n    private Currency taxAmt;\r\n    private Currency dutyAmt;\r\n    private Currency freightAmt;\r\n    private Currency handlingAmt;\r\n    private Currency shippingAmt;\r\n    private Currency discount;\r\n    private String desc;\r\n    private String comment1;\r\n    private String comment2;\r\n    private String desc1;\r\n    private String desc2;\r\n    private String desc3;\r\n    private String desc4;\r\n    private String custRef;\r\n    private String invoiceDate;\r\n    private String startTime;\r\n    private String endTime;\r\n    private String poNum;\r\n    private String vatRegNum;\r\n    private Currency vatTaxAmt;\r\n    private Currency localTaxAmt;\r\n    private Currency nationalTaxAmt;\r\n    private Currency altTaxAmt;\r\n    private String taxExempt;\r\n    private BrowserInfo browserInfo;\r\n    private CustomerInfo customerInfo;\r\n    private MerchantInfo merchantInfo;\r\n    private UserItem userItem;\r\n    private String orderDate;\r\n    private String orderTime;\r\n    private String orderDesc;\r\n    private String commCode;\r\n    private String vatTaxPercent;\r\n    private String recurring;\r\n    private Currency itemAmt;\r\n    private String recurringType;\r\n    private String transactionId;\r\n    private String echoData;\r\n    private String orderId;\r\n    private String custIp;\r\n    private String vatInvNum;\r\n    private String vatTaxRate;\r\n    private String reportGroup;\r\n    private ArrayList adviceDetailList;\r\n    private Devices devices;\r\n\tprivate String miscData;\r\n\r\n\r\n    /**\r\n     * Constructor.This is a default constructor which does not take any parameters.\r\n     * *\r\n     */\r\n    public Invoice() {\r\n        itemList = new ArrayList();\r\n        adviceDetailList = new ArrayList();\r\n    }\r\n\r\n    /**\r\n     * Adds a line item to line item list.\r\n     *\r\n     * @param item Lineitem object\r\n     *             <p>Use this method to add a line item in the purchase order.</p>\r\n     *             <p>Line item data describes the details of the item purchased and can be can be passed\r\n     *             for each transaction. The convention for passing line item data in name/value pairs\r\n     *             is that each name/value starts with L_ and ends with n where n is the line item number.\r\n     *             For example L_QTY0=1 is the quantity for line item 0 and is equal to 1,\r\n     *             with n starting at 0</p>\r\n     *             <p>Following example shows how to use line item.</p>\r\n     *  <p>\r\n     * .................\r\n     * //inv is the Invoice object.\r\n     * .................\r\n     * // Create a line item.\r\n     * LineItem item = new LineItem();\r\n     * // Add first item.\r\n     * Currency lnamt = new Currency(new Double(8.95), \"USD\");\r\n     * item.setAmt(lnamt);\r\n     * item.setDesc(\"Line 1\");\r\n     * item.setQty(1);\r\n     * item.setItemNumber(\"1\");\r\n     * // Add line item to invoice.\r\n     * inv.addLineItem(item);\r\n     * // Create a line item.\r\n     * LineItem item1 = new LineItem();\r\n     * // Add second item.\r\n     * Currency lnamt1 = new Currency(new Double(5.25), \"USD\");\r\n     * item1.setAmt(lnamt);\r\n     * item1.setDesc(\"Line 2\");\r\n     * item1.setQty(2);\r\n     * item1.setItemNumber(\"2\");\r\n     * // Add line item to invoice.\r\n     * inv.addLineItem(item1);\r\n     * .................\r\n     */\r\n    public void addLineItem(LineItem item) {\r\n        itemList.add(item);\r\n    }\r\n\r\n    /**\r\n     * Removes a line item from line item list.\r\n     *\r\n     * @param index Index of lineitem to be removed.\r\n     *              <p>Use this method to remove a line item at a particular index in the purchase order.</P>\r\n     *  <p>\r\n     * .................\r\n     * // Inv is the Invoice object\r\n     * .................\r\n     * // Remove item at index 0\r\n     * inv.removeLineItem(0);\r\n     * .................\r\n     */\r\n    public void removeLineItem(int index) {\r\n        itemList.remove(index);\r\n    }\r\n\r\n    /**\r\n     * Clears the line item list.\r\n     * <p>Use this method to clear all the\r\n     * line items added to the purchase order.</p>\r\n     *\r\n     *  <p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Remove all line items.\r\n     * inv.removeAllLineItems();\r\n     * .................\r\n     */\r\n    public void removeAllLineItems() {\r\n        itemList.clear();\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     */\r\n    private void generateItemRequest() {\r\n        for (int index = 0; index < itemList.size(); index++) {\r\n            LineItem item = (LineItem) itemList.get(index);\r\n            if (item != null) {\r\n                item.setContext(getContext());\r\n                item.setRequestBuffer(super.getRequestBuffer());\r\n                item.generateRequest(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a advice detail item to the list.\r\n     *\r\n     * @param item AdviceDetail object\r\n     *\r\n     * This class holds the advice detail related information.\r\n     * Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.\r\n     * For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,\r\n     * <p>Following example shows how to use advice detail.</p>\r\n     * <p>\r\n     * .................\r\n     * //inv is the Invoice object.\r\n     * .................\r\n     * // Create a advice detail item.\r\n     * AdviceDetail addDetail1 = new AdviceDetail();\r\n     * addDetail1.setAddLAmt(\"1\");\r\n     * addDetail1.setAddLAmtType(\"1\");\r\n     * inv.addAdviceDetailItem(addDetail1);\r\n     * // To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2\r\n     * ..................\r\n     */\r\n    public void addAdviceDetailItem(AdviceDetail item) {\r\n        adviceDetailList.add(item);\r\n    }\r\n\r\n    /**\r\n     * Removes a advice detail item from the list.\r\n     *\r\n     * @param index Index of the AdviceDetailItem to be removed.\r\n     * <p>Use this method to remove a advice detail item at a particular index in the purchase order.</P>\r\n     * .................\r\n     * // Inv is the Invoice object\r\n     * .................\r\n     * // Remove item at index 2\r\n     * inv.removeAdviceDetailItem(2);\r\n     * .................\r\n     */\r\n    public void removeAdviceDetailItem(int index) {\r\n        adviceDetailList.remove(index);\r\n    }\r\n\r\n    /**\r\n     * Clears the advice detail item list.\r\n     * <p>Use this method to clear all the items added to the purchase order.</p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Remove all advice detail items.\r\n     * inv.removeAllAdviceDetailItem();\r\n     * .................\r\n     */\r\n    public void removeAllAdviceDetailItem() {\r\n        adviceDetailList.clear();\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    private void generateAdviceDetailRequest() {\r\n        for (int index = 0; index < adviceDetailList.size(); index++) {\r\n            AdviceDetail item = (AdviceDetail) adviceDetailList.get(index);\r\n            if (item != null) {\r\n                item.setContext(getContext());\r\n                item.setRequestBuffer(super.getRequestBuffer());\r\n                item.generateRequest(index);\r\n            }\r\n        }\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        try {\r\n            initErrorContext();\r\n\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_INVNUM, invNum));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_AMT, amt));\r\n            if (amt != null) {\r\n                super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CURRENCY, amt.getCurrencyCode()));\r\n            }\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TAXEXEMPT, taxExempt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TAXAMT, taxAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DUTYAMT, dutyAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_FREIGHTAMT, freightAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_HANDLINGAMT, handlingAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPPINGAMT, shippingAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DISCOUNT, discount));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DESC, desc));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_COMMENT1, comment1));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_COMMENT2, comment2));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DESC1, desc1));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DESC2, desc2));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DESC3, desc3));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DESC4, desc4));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CUSTREF, custRef));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PONUM, poNum));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_VATREGNUM, vatRegNum));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_VATTAXAMT, vatTaxAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_LOCALTAXAMT, localTaxAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_NATIONALTAXAMT, nationalTaxAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ALTTAXAMT, altTaxAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_COMMCODE, commCode));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_VATTAXPERCENT, vatTaxPercent));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_INVOICEDATE, invoiceDate));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_STARTTIME, startTime));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ENDTIME, endTime));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORDERDATE, orderDate));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORDERTIME, orderTime));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_RECURRING, recurring));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ITEMAMT, itemAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORDERDESC, orderDesc));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CUSTIP, custIp));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_RECURRINGTYPE, recurringType));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TRANSACTIONID, transactionId));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ECHODATA, echoData));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORDERID, orderId));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_VATINVNUM, vatInvNum));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_VATTAXRATE, vatTaxRate));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_REPORTGROUP, reportGroup));\r\n\t\t\tsuper.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MISCDATA, miscData));\r\n\r\n\r\n            if (billTo != null) {\r\n                billTo.setRequestBuffer(getRequestBuffer());\r\n                billTo.generateRequest();\r\n            }\r\n            if (shipTo != null) {\r\n                shipTo.setRequestBuffer(getRequestBuffer());\r\n                shipTo.generateRequest();\r\n            }\r\n            if (browserInfo != null) {\r\n                browserInfo.setRequestBuffer(getRequestBuffer());\r\n                browserInfo.generateRequest();\r\n            }\r\n            if (customerInfo != null) {\r\n                customerInfo.setRequestBuffer(getRequestBuffer());\r\n                customerInfo.generateRequest();\r\n            }\r\n            if (userItem != null) {\r\n                userItem.setRequestBuffer(getRequestBuffer());\r\n                userItem.generateRequest();\r\n            }\r\n            if (itemList != null && itemList.size() > 0) {\r\n                generateItemRequest();\r\n            }\r\n            if (adviceDetailList != null && adviceDetailList.size() > 0) {\r\n                generateAdviceDetailRequest();\r\n            }\r\n            if (devices != null) {\r\n                devices.setRequestBuffer(getRequestBuffer());\r\n                devices.generateRequest();\r\n            }\r\n\r\n        } catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() == null) {\r\n                getContext().addError(err);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void initErrorContext() {\r\n        if (billTo != null) {\r\n            billTo.setContext(getContext());\r\n        }\r\n        if (shipTo != null) {\r\n            shipTo.setContext(getContext());\r\n        }\r\n        if (amt != null) {\r\n            amt.setContext(getContext());\r\n        }\r\n        if (taxAmt != null) {\r\n            taxAmt.setContext(getContext());\r\n        }\r\n        if (dutyAmt != null) {\r\n            dutyAmt.setContext(getContext());\r\n        }\r\n        if (freightAmt != null) {\r\n            freightAmt.setContext(getContext());\r\n        }\r\n        if (handlingAmt != null) {\r\n            handlingAmt.setContext(getContext());\r\n        }\r\n        if (discount != null) {\r\n            discount.setContext(getContext());\r\n        }\r\n        if (vatTaxAmt != null) {\r\n            vatTaxAmt.setContext(getContext());\r\n        }\r\n        if (localTaxAmt != null) {\r\n            localTaxAmt.setContext(getContext());\r\n        }\r\n        if (nationalTaxAmt != null) {\r\n            nationalTaxAmt.setContext(getContext());\r\n        }\r\n        if (browserInfo != null) {\r\n            browserInfo.setContext(getContext());\r\n        }\r\n        if (customerInfo != null) {\r\n            customerInfo.setContext(getContext());\r\n        }\r\n        if (userItem != null) {\r\n            userItem.setContext(getContext());\r\n        }\r\n        if (merchantInfo != null) {\r\n            merchantInfo.setContext(getContext());\r\n        }\r\n        if (devices != null) {\r\n            devices.setContext(getContext());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the AltTaxAmount\r\n     * <p>Alternate Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: ALTTAXAMT</p>\r\n     */\r\n    public Currency getAltTaxAmt() {\r\n        return altTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the AltTaxAmount\r\n     * <p>Alternate Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param altTaxAmt Currency\r\n     *  <p>Maps to Payflow Parameter: ALTTAXAMT</p>\r\n     */\r\n    public void setAltTaxAmt(Currency altTaxAmt) {\r\n        this.altTaxAmt = altTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the Amount\r\n     * <p>Amount (US Dollars) U.S. based currency.\r\n     * Specify the exact amount to the cent using a decimal\r\n     * point'use 34.00, not 34. Do not include comma\r\n     * separators'use 1199.95 not 1,199.95.</P>\r\n     * <p>Your processor and/or Internet merchant account\r\n     * provider may stipulate a maximum amount.</p>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: AMT</p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Amount for the invoice.\r\n     * // A valid amount is a two decimal value.\r\n     * Currency amt = new Currency(new decimal(25.12))\r\n     * //For values which have more than two decimal places\r\n     * Currency amt = new Currency(new decimal(25.1214));\r\n     * amt.setNoOfDecimalDigits (2);\r\n     * //If the NoOfDecimalDigits property is used then it is mandatory to set one of the following properties to true.\r\n     * amt.setRound (true);\r\n     * amt.setTruncate (true);\r\n     * inv.setAmt (Amt);\r\n     */\r\n    public Currency getAmt() {\r\n        return amt;\r\n    }\r\n\r\n    /**\r\n     * Sets the Amount\r\n     * <p>Amount (US Dollars) U.S. based currency.\r\n     * Specify the exact amount to the cent using a decimal\r\n     * point'use 34.00, not 34. Do not include comma\r\n     * separators'use 1199.95 not 1,199.95.</P>\r\n     * <p>Your processor and/or Internet merchant account\r\n     * provider may stipulate a maximum amount.</p>\r\n     *\r\n     * @param amt Currency\r\n     *  <p>Maps to Payflow Parameter: AMT</p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Amount for the invoice.\r\n     * // A valid amount is a two decimal value.\r\n     * Currency amt = new Currency(new decimal(25.12))\r\n     * //For values which have more than two decimal places\r\n     * Currency amt = new Currency(new decimal(25.1214));\r\n     * amt.setNoOfDecimalDigits (2);\r\n     * //If the NoOfDecimalDigits property is used then it is mandatory to set one of the following properties to true.\r\n     * amt.setRound (true);\r\n     * amt.setTruncate (true);\r\n     * inv.setAmt (Amt);\r\n     */\r\n    public void setAmt(Currency amt) {\r\n        this.amt = amt;\r\n    }\r\n\r\n    /**\r\n     * Gets the BillTo Object\r\n     * <p>Use this method to get the billing\r\n     * addresses of the purchase order.</P>\r\n     *\r\n     * @return BillTo\r\n     */\r\n    public BillTo getBillTo() {\r\n        return billTo;\r\n    }\r\n\r\n    /**\r\n     * Sets the BillTo Object\r\n     * <p>Use this method to set the billing\r\n     * addresses of the purchase order.</P>\r\n     *\r\n     * @param billTo BillTo\r\n     *  <p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Billing Address details.\r\n     * BillTo bill = New BillTo();\r\n     * bill.setBillToStreet(\"123 Main St.\");\r\n     * bill.setBillToZip(\"12345\");\r\n     * inv.setBillTo (bill);\r\n     * .................\r\n     */\r\n    public void setBillTo(BillTo billTo) {\r\n        this.billTo = billTo;\r\n    }\r\n\r\n    /**\r\n     * Gets the BrowserInfo Object\r\n     * <p>Use this method to get the browser\r\n     * related information of the purchase order.</P>\r\n     *\r\n     * @return BrowserInfo\r\n     */\r\n    public BrowserInfo getBrowserInfo() {\r\n        return browserInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the BrowserInfo Object\r\n     * <p>Use this method to set the browser\r\n     * related information of the purchase order.</P>\r\n     *\r\n     * @param browserInfo BrowserInfo\r\n     *  <p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Browser Info details.\r\n     * BrowserInfo browser = New BrowserInfo();\r\n     * browser.setBrowserCountryCode (\"USA\");\r\n     * browser.setBrowserUserAgent (\"IE 6.0\");\r\n     * inv.setBrowserInfo (browser);\r\n     * .................\r\n     */\r\n    public void setBrowserInfo(BrowserInfo browserInfo) {\r\n        this.browserInfo = browserInfo;\r\n    }\r\n\r\n    /**\r\n     * Gets the CommCode\r\n     * <p>Use this method to get the Commodity Code\r\n     * for the purchase order.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: COMMCODE</p>\r\n     */\r\n    public String getCommCode() {\r\n        return commCode;\r\n    }\r\n\r\n    /**\r\n     * Sets the CommCode\r\n     * <p>Use this method to set the Commodity Code\r\n     * for the purchase order.</P>\r\n     *\r\n     * @param commCode String\r\n     *  <p>Maps to Payflow Parameter: COMMCODE</p>\r\n     */\r\n    public void setCommCode(String commCode) {\r\n        this.commCode = commCode;\r\n    }\r\n\r\n    /**\r\n     * Gets Comment1\r\n     * <p>Merchant-defined value for reporting and auditing\r\n     * purposes.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: COMMENT1</p>\r\n     */\r\n    public String getComment1() {\r\n        return comment1;\r\n    }\r\n\r\n    /**\r\n     * Sets Comment1\r\n     * <p>Merchant-defined value for reporting and auditing\r\n     * purposes.</P>\r\n     *\r\n     * @param comment1 String\r\n     *  <p>Maps to Payflow Parameter: COMMENT1</p>\r\n     */\r\n    public void setComment1(String comment1) {\r\n        this.comment1 = comment1;\r\n    }\r\n\r\n    /**\r\n     * Gets Comment2\r\n     * <p>Merchant-defined value for reporting and auditing\r\n     * purposes.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: COMMENT2</p>\r\n     */\r\n    public String getComment2() {\r\n        return comment2;\r\n    }\r\n\r\n    /**\r\n     * Sets Comment2\r\n     * <p>Merchant-defined value for reporting and auditing\r\n     * purposes.</P>\r\n     *\r\n     * @param comment2 String\r\n     *  <p>Maps to Payflow Parameter: COMMENT2</p>\r\n     */\r\n    public void setComment2(String comment2) {\r\n        this.comment2 = comment2;\r\n    }\r\n\r\n    /**\r\n     * Gets the CustomerInfo Object\r\n     * <p>Use this method to get the customer\r\n     * related information of the purchase order.</P>\r\n     *\r\n     * @return CustomerInfo\r\n     */\r\n    public CustomerInfo getCustomerInfo() {\r\n        return customerInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the CustomerInfo Object\r\n     * <p>Use this method to set the customer\r\n     * related information of the purchase order.</P>\r\n     *\r\n     * @param customerInfo CustomerInfo\r\n     *  <p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Customer Info details.\r\n     * CustomerInfo cust = New CustomerInfo();\r\n     * cust.setCustCode (\"CustXXXXX\");\r\n     * cust.setCustIP (\"255.255.255.255\");\r\n     * inv.setCustomerInfo (Cust);\r\n     * .................\r\n     */\r\n    public void setCustomerInfo(CustomerInfo customerInfo) {\r\n        this.customerInfo = customerInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the MerchantInfo Object\r\n     * <p>Use this method to set the merchant\r\n     * related information of the purchase order.</P>\r\n     *\r\n     * @param merchantInfo MerchantInfo\r\n     *  <p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Merchant Info details.\r\n     * MerchantInfo merchant = new MerchantInfo();\r\n     * merchant.setMerchantName(\"MerchantXXXXX\");\r\n     * merchant.setMerchantCity(\"Somewhere\");\r\n     * inv.setMerchantInfo (merchant);\r\n     * .................\r\n     */\r\n    public void setMerchantInfo(MerchantInfo merchantInfo) {\r\n        this.merchantInfo = merchantInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the Devices Object\r\n     * <p>Use this method to set the devices the cardholder used.</P>\r\n     *\r\n     * @param devices Devices\r\n     *  <p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Devices details.\r\n     * Devices devices = new Devices();\r\n     * devices.setCatType(\"3\");\r\n     * devices.setContactLess(\"RFD\");\r\n     * inv.set\r\n     * .................\r\n     */\r\n    public void setDevices(Devices devices) {\r\n        this.devices = devices;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the UserItem Object\r\n     * <p>Use this method to get the User items.</P>\r\n     *\r\n     * @return UserItem\r\n     */\r\n    public UserItem getUserItem() {\r\n        return userItem;\r\n    }\r\n\r\n    /**\r\n     * Sets the UserItem Object\r\n     * <p>Use this method to set the User Items.</P>\r\n     *\r\n     * @param userItem UserItem\r\n     *  <p>\r\n     * .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the User Item details.\r\n     * UserItem nUser = new UserItem();\r\n     * nUser.setUserItem1(\"TUSER1\");\r\n     * nUser.setUserItem2(\"TUSER2\");\r\n     * inv.setUserItem(nUser);\r\n     * .................\r\n     */\r\n    public void setUserItem(UserItem userItem) {\r\n        this.userItem = userItem;\r\n    }\r\n\r\n    /**\r\n     * Gets the custref\r\n     * <p>Merchant-defined identifier for reporting and auditing\r\n     * purposes.</P>\r\n     * <p>You can use CUSTREF when performing Inquiry\r\n     * transactions. To ensure that you can always access\r\n     * the correct transaction when performing an Inquiry,\r\n     * you must provide a unique CUSTREF when\r\n     * submitting any transaction, including retries.</p>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: CUSTREF</p>\r\n     */\r\n    public String getCustRef() {\r\n        return custRef;\r\n    }\r\n\r\n    /**\r\n     * Sets the CommCode\r\n     * <p>Merchant-defined identifier for reporting and auditing\r\n     * purposes.</P>\r\n     * <p>You can use CUSTREF when performing Inquiry\r\n     * transactions. To ensure that you can always access\r\n     * the correct transaction when performing an Inquiry,\r\n     * you must provide a unique CUSTREF when\r\n     * submitting any transaction, including retries.</p>\r\n     *\r\n     * @param custRef String\r\n     *  <p>Maps to Payflow Parameter: CUSTREF</p>\r\n     */\r\n    public void setCustRef(String custRef) {\r\n        this.custRef = custRef;\r\n    }\r\n\r\n    /**\r\n     * Gets the description\r\n     * <p>General description of the transaction.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: DESC</p>\r\n     */\r\n    public String getDesc() {\r\n        return desc;\r\n    }\r\n\r\n    /**\r\n     * Sets the description\r\n     * <p>General description of the transaction.</P>\r\n     *\r\n     * @param desc String\r\n     *  <p>Maps to Payflow Parameter: DESC</p>\r\n     */\r\n    public void setDesc(String desc) {\r\n        this.desc = desc;\r\n    }\r\n\r\n    /**\r\n     * Gets the description1\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: DESC1</p>\r\n     */\r\n    public String getDesc1() {\r\n        return desc1;\r\n    }\r\n\r\n    /**\r\n     * Sets the description1\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @param desc1 String\r\n     *  <p>Maps to Payflow Parameter: DESC1</p>\r\n     */\r\n    public void setDesc1(String desc1) {\r\n        this.desc1 = desc1;\r\n    }\r\n\r\n    /**\r\n     * Gets the description2\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: DESC2</p>\r\n     */\r\n    public String getDesc2() {\r\n        return desc2;\r\n    }\r\n\r\n    /**\r\n     * Sets the description2\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @param desc2 String\r\n     *  <p>Maps to Payflow Parameter: DESC2</p>\r\n     */\r\n    public void setDesc2(String desc2) {\r\n        this.desc2 = desc2;\r\n    }\r\n\r\n    /**\r\n     * Gets the description3\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: DESC3</p>\r\n     */\r\n    public String getDesc3() {\r\n        return desc3;\r\n    }\r\n\r\n    /**\r\n     * Sets the description3\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @param desc3 String\r\n     *  <p>Maps to Payflow Parameter: DESC3</p>\r\n     */\r\n    public void setDesc3(String desc3) {\r\n        this.desc3 = desc3;\r\n    }\r\n\r\n    /**\r\n     * Gets the description4\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: DESC4</p>\r\n     */\r\n    public String getDesc4() {\r\n        return desc4;\r\n    }\r\n\r\n    /**\r\n     * Sets the description4\r\n     * <p>Up to 4 lines of additional description of\r\n     * the charge.</P>\r\n     *\r\n     * @param desc4 String\r\n     *  <p>Maps to Payflow Parameter: DESC4</p>\r\n     */\r\n    public void setDesc4(String desc4) {\r\n        this.desc4 = desc4;\r\n    }\r\n\r\n    /**\r\n     * Gets the Discount\r\n     * <p>Discount amount on total sale. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: DISCOUNT</p>\r\n     */\r\n    public Currency getDiscount() {\r\n        return discount;\r\n    }\r\n\r\n    /**\r\n     * Sets the Discount\r\n     * <p>Discount amount on total sale. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param discount Currency\r\n     *  <p>Maps to Payflow Parameter: DISCOUNT</p>\r\n     */\r\n    public void setDiscount(Currency discount) {\r\n        this.discount = discount;\r\n    }\r\n\r\n    /**\r\n     * Gets the DutyAmount\r\n     * <p>Sometimes called import tax.\r\n     * Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: DUTYAMT</p>\r\n     */\r\n    public Currency getDutyAmt() {\r\n        return dutyAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the DutyAmount\r\n     * <p>Sometimes called import tax.\r\n     * Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param dutyAmt Currency\r\n     *  <p>Maps to Payflow Parameter: DUTYAMT</p>\r\n     */\r\n    public void setDutyAmt(Currency dutyAmt) {\r\n        this.dutyAmt = dutyAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the EndTime\r\n     * <p>\tENDTIME specifies the end of the time period during\r\n     * which the transaction specified by the CUSTREF occurred.</p>\r\n     * <p>\tENDTIME must be less than 30 days after STARTTIME.\r\n     * An inquiry cannot be performed across a date range\r\n     * greater than 30 days.</p>\r\n     * <p>\tIf you set ENDTIME, and not STARTTIME, then STARTTIME is\r\n     * defaulted to 30 days before ENDTIME. If neither\r\n     * STARTTIME nor ENDTIME is specified, then the\r\n     * system searches the last 30 days.</p>\r\n     * <p>\tFormat: yyyymmddhhmmss</p>\r\n     * <p>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</p>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: ENDTIME</p>\r\n     */\r\n    public String getEndTime() {\r\n        return endTime;\r\n    }\r\n\r\n    /**\r\n     * Sets the EndTime\r\n     * <p>\tENDTIME specifies the end of the time period during\r\n     * which the transaction specified by the CUSTREF occurred.</p>\r\n     * <p>\tENDTIME must be less than 30 days after STARTTIME.\r\n     * An inquiry cannot be performed across a date range\r\n     * greater than 30 days.</p>\r\n     * <p>\tIf you set ENDTIME, and not STARTTIME, then STARTTIME is\r\n     * defaulted to 30 days before ENDTIME. If neither\r\n     * STARTTIME nor ENDTIME is specified, then the\r\n     * system searches the last 30 days.</p>\r\n     * <p>\tFormat: yyyymmddhhmmss</p>\r\n     * <p>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</p>\r\n     *\r\n     * @param endTime String\r\n     *  <p>Maps to Payflow Parameter: ENDTIME</p>\r\n     */\r\n    public void setEndTime(String endTime) {\r\n        this.endTime = endTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the Freight Amount\r\n     * <p>Freight Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</p>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: FREIGHTAMT</p>\r\n     */\r\n    public Currency getFreightAmt() {\r\n        return freightAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the Freight Amount\r\n     * <p>Freight Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</p>\r\n     *\r\n     * @param freightAmt Currency\r\n     *  <p>Maps to Payflow Parameter: FREIGHTAMT</p>\r\n     */\r\n    public void setFreightAmt(Currency freightAmt) {\r\n        this.freightAmt = freightAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the Handling Amount\r\n     * <p>Handling Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: HANDLINGAMT</p>\r\n     */\r\n    public Currency getHandlingAmt() {\r\n        return handlingAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the Handling Amount\r\n     * <p>UHandling Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param handlingAmt Currency\r\n     *  <p>Maps to Payflow Parameter: HANDLINGAMT</p>\r\n     */\r\n    public void setHandlingAmt(Currency handlingAmt) {\r\n        this.handlingAmt = handlingAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the InvNum\r\n     * <p>Merchant invoice number. This reference number\r\n     * (PNREF'generated by PayPal) is used for authorizations\r\n     * and settlements.</para>\r\n     * <para>The Acquirer decides if this information will\r\n     * appear on the merchant's bank reconciliation statement.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: INVNUM</p>\r\n     */\r\n    public String getInvNum() {\r\n        return invNum;\r\n    }\r\n\r\n    /**\r\n     * Sets the InvNum\r\n     * <p>Merchant invoice number. This reference number\r\n     * (PNREF'generated by PayPal) is used for authorizations\r\n     * and settlements.</para>\r\n     * <para>The Acquirer decides if this information will\r\n     * appear on the merchant's bank reconciliation statement.</P>\r\n     *\r\n     * @param invNum String\r\n     *  <p>Maps to Payflow Parameter: INVNUM</p>\r\n     */\r\n    public void setInvNum(String invNum) {\r\n        this.invNum = invNum;\r\n    }\r\n\r\n    /**\r\n     * Gets the Invoice Date\r\n     * <p>Transaction Date.</p>\r\n     * <p>Format: yyyymmdd.</p>\r\n     * <p>yyyy - Year, mm - Month, dd - Day.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: INVOICEDATE</p>\r\n     */\r\n    public String getInvoiceDate() {\r\n        return invoiceDate;\r\n    }\r\n\r\n    /**\r\n     * Sets the Invoice Date\r\n     * <p>Transaction Date.</p>\r\n     * <p>Format: yyyymmdd.</p>\r\n     * <para>yyyy - Year, mm - Month, dd - Day.</P>\r\n     *\r\n     * @param invoiceDate String\r\n     *  <p>Maps to Payflow Parameter: INVOICEDATE</p>\r\n     */\r\n    public void setInvoiceDate(String invoiceDate) {\r\n        this.invoiceDate = invoiceDate;\r\n    }\r\n\r\n\r\n    /**\r\n     * Gets the Local Tax Amount.\r\n     * <p>Local Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: LOCALTAXAMT</p>\r\n     */\r\n    public Currency getLocalTaxAmt() {\r\n        return localTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the Local Tax Amount.\r\n     * <p>Local Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param localTaxAmt Currency\r\n     *  <p>Maps to Payflow Parameter: LOCALTAXAMT</p>\r\n     */\r\n    public void setLocalTaxAmt(Currency localTaxAmt) {\r\n        this.localTaxAmt = localTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the National Tax Amount\r\n     * <p>National Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: NATIONALTAXAMT</p>\r\n     */\r\n    public Currency getNationalTaxAmt() {\r\n        return nationalTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the National Tax Amount.\r\n     * <p>National Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95./P>\r\n     *\r\n     * @param nationalTaxAmt Currency\r\n     *  <p>Maps to Payflow Parameter: NATIONALTAXAMT</p>\r\n     */\r\n    public void setNationalTaxAmt(Currency nationalTaxAmt) {\r\n        this.nationalTaxAmt = nationalTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the Order date\r\n     * <p>Order date.</para>\r\n     * <para>Format: mmddyy</para>\r\n     * <para>mm - Month, dd - Day, yy - Year.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: ORDERDATE</p>\r\n     */\r\n    public String getOrderDate() {\r\n        return orderDate;\r\n    }\r\n\r\n    /**\r\n     * Sets the Order Date\r\n     * <p>Order date.</para>\r\n     * <para>Format: mmddyy</para>\r\n     * <para>mm - Month, dd - Day, yy - Year.</P>\r\n     *\r\n     * @param orderDate String\r\n     *  <p>Maps to Payflow Parameter: ORDERDATE</p>\r\n     */\r\n    public void setOrderDate(String orderDate) {\r\n        this.orderDate = orderDate;\r\n    }\r\n\r\n    /**\r\n     * Gets the Order Time\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: ORDERTIME</p>\r\n     */\r\n    public String getOrderTime() {\r\n        return orderTime;\r\n    }\r\n\r\n    /**\r\n     * Sets the Order Time\r\n     *\r\n     * @param orderTime String\r\n     *  <p>Maps to Payflow Parameter: ORDERTIME</p>\r\n     */\r\n    public void setOrderTime(String orderTime) {\r\n        this.orderTime = orderTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the PoNum.\r\n     * <P>Purchase Order Number / Merchant related data.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: PONUM</p>\r\n     */\r\n    public String getPoNum() {\r\n        return poNum;\r\n    }\r\n\r\n    /**\r\n     * Sets the PoNum.\r\n     * <P>Purchase Order Number / Merchant related data.</P>\r\n     *\r\n     * @param poNum String\r\n     *  <p>Maps to Payflow Parameter: PONUM</p>\r\n     */\r\n    public void setPoNum(String poNum) {\r\n        this.poNum = poNum;\r\n    }\r\n\r\n    /**\r\n     * Gets the TransactionId.\r\n     * <P>Transaction ID / Merchant related data.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: TRANSACTIONID</p>\r\n     */\r\n    public String getTransactionId() {\r\n        return transactionId;\r\n    }\r\n\r\n    /**\r\n     * Sets the TransactionId.\r\n     * <P>Transaction Id / Merchant related data.</P>\r\n     *\r\n     * @param transactionId String\r\n     *  <p>Maps to Payflow Parameter: TRANSACTIONID</p>\r\n     */\r\n    public void setTransactionId(String transactionId) {\r\n        this.transactionId = transactionId;\r\n    }\r\n\r\n    /**\r\n     * Gets the EchoData.\r\n     * <P>Used to echo data back in response.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: ECHODATA</p>\r\n     */\r\n    public String getEchoData() {\r\n        return echoData;\r\n    }\r\n\r\n    /**\r\n     * Sets the EchoData.\r\n     * <p>Echo Data is used to \"echo\" back data sent for processing in the response.</p>\r\n     * <p>For example, if you send \"ECHODATA=ADDRESS\" then the Billing Address fields\r\n     * will be returned in the response</p>\r\n     *\r\n     * @param echoData String\r\n     *  <p>Maps to Payflow Parameter: ECHODATA</p>\r\n     */\r\n    public void setEchoData(String echoData) {\r\n        this.echoData = echoData;\r\n    }\r\n\r\n    /**\r\n     * Gets the OrderID\r\n     * <P>Used for Order ID</P>\r\n     *\r\n     * @return orderID String\r\n     *  <p>Maps to Payflow Parameter: ORDERID</p>\r\n     */\r\n    public String getOrderId() {\r\n        return orderId;\r\n    }\r\n\r\n    /**\r\n     * Sets the OrderID.\r\n     * <p>Order ID is used to prevent duplicate \"orders\" from being processed.\r\n     * This is NOT the same as Request ID; which is used at the transaction level.\r\n     * Order ID (ORDERID) is used to check for a duplicate order in the future.\r\n     * For example, if you pass ORDERID=10101 and in two weeks another order is processed\r\n     * with the same ORDERID, a duplicate condition will occur.  The results you receive\r\n     * will be from the original order with DUPLICATE=2 to show that it was ORDERID that\r\n     * triggered the duplicate.  The order id is stored for 3 years.</p>\r\n     *\r\n     * <p>Important Note: Order ID functionality to catch duplicate orders processed withing\r\n     * seconds of each other is limited.  Order ID should be used in conjunction with Request ID\r\n     * to prevent duplicates due to processing / communication errors. DO NOT use ORDERID\r\n     * as your only means to check for duplicate transactions.</p>\r\n     *\r\n     * @param orderId String\r\n     *  <p>Maps to Payflow Parameter: ORDERID</p>\r\n     */\r\n    public void setOrderId (String orderId) {\r\n        this.orderId = orderId;\r\n    }\r\n\r\n    /**\r\n     * Gets the Recurring status.\r\n     * <p>Is a recurring transaction? Y or N.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: RECURRING</p>\r\n     */\r\n    public String getRecurring() {\r\n        return recurring;\r\n    }\r\n\r\n    /**\r\n     * Sets the Recurring status.\r\n     * <p>Is a recurring transaction? Y or N.</P>\r\n     *\r\n     * @param recurring String\r\n     *  <p>Maps to Payflow Parameter: RECURRING</p>\r\n     */\r\n    public void setRecurring(String recurring) {\r\n        this.recurring = recurring;\r\n    }\r\n\r\n    /**\r\n     * Gets the Shipping Amt.\r\n     * <p>Shipping Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return Currency\r\n     *  <p>Maps to Payflow Parameter: SHIPPINGAMT</p>\r\n     */\r\n    public Currency getShippingAmt() {\r\n        return shippingAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the Shipping Amt\r\n     * <p>Shipping Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param shippingAmt Currency\r\n     *  <p>Maps to Payflow Parameter: SHIPPINGAMT</p>\r\n     */\r\n    public void setShippingAmt(Currency shippingAmt) {\r\n        this.shippingAmt = shippingAmt;\r\n    }\r\n\r\n    /**\r\n     * @return ShipTo\r\n     *         <p>Use this method to get the shipping\r\n     *         addresses of the purchase order.</p>\r\n     */\r\n    public ShipTo getShipTo() {\r\n        return shipTo;\r\n    }\r\n\r\n    /**\r\n     * @param shipTo <p>Use this property to set the shipping\r\n     *               addresses of the purchase order.</p>\r\n     *  .................\r\n     * // inv is the Invoice object\r\n     * .................\r\n     * // Set the Shipping Address details.\r\n     * ShipTo ship = New ShipTo();\r\n     * ship.setShipToStreet (\"685A E. Middlefield Rd.\");\r\n     * ship.setShipToZip (\"94043\");\r\n     * inv.setShipTo(ship);\r\n     * .................\r\n     */\r\n    public void setShipTo(ShipTo shipTo) {\r\n        this.shipTo = shipTo;\r\n    }\r\n\r\n    /**\r\n     * Gets the Start Time\r\n     * <p>STARTTIME specifies the beginning of the time\r\n     * period during which the transaction specified by the\r\n     * CUSTREF occurred. </para>\r\n     * <para>If you set STARTTIME, and not ENDTIME, then\r\n     * ENDTIME is defaulted to 30 days after STARTTIME.\r\n     * If neither STARTTIME nor ENDTIME is specified, then\r\n     * the system searches the last 30 days.</para>\r\n     * <para>Format: yyyymmddhhmmss</para>\r\n     * <para>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</P>\r\n     *\r\n     * @return startTime String\r\n     *  <p>Maps to Payflow Parameter: STARTTIME</p>\r\n     */\r\n    public String getStartTime() {\r\n        return startTime;\r\n    }\r\n\r\n    /**\r\n     * Sets the Start Time.\r\n     * <p>STARTTIME specifies the beginning of the time\r\n     * period during which the transaction specified by the\r\n     * CUSTREF occurred. </para>\r\n     * <para>If you set STARTTIME, and not ENDTIME, then\r\n     * ENDTIME is defaulted to 30 days after STARTTIME.\r\n     * If neither STARTTIME nor ENDTIME is specified, then\r\n     * the system searches the last 30 days.</para>\r\n     * <para>Format: yyyymmddhhmmss</para>\r\n     * <p>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</P>\r\n     *\r\n     * @param startTime String\r\n     *  <p>Maps to Payflow Parameter: STARTTIME</p>\r\n     */\r\n    public void setStartTime(String startTime) {\r\n        this.startTime = startTime;\r\n    }\r\n\r\n    /**\r\n     * Gets the Tax Amt\r\n     * <p>Tax Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return taxAmt Currency\r\n     *  <p>Maps to Payflow Parameter: TAXAMT</p>\r\n     */\r\n    public Currency getTaxAmt() {\r\n        return taxAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the Tax Amt\r\n     * <p>Tax Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param taxAmt Currency\r\n     *  <p>Maps to Payflow Parameter: TAXAMT</p>\r\n     */\r\n    public void setTaxAmt(Currency taxAmt) {\r\n        this.taxAmt = taxAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the TaxExempt\r\n     * <p>Is the customer tax exempt? Y or N</P>\r\n     *\r\n     * @return taxExempt String\r\n     *  <p>Maps to Payflow Parameter: TAXEXEMPT</p>\r\n     */\r\n    public String getTaxExempt() {\r\n        return taxExempt;\r\n    }\r\n\r\n    /**\r\n     * Sets the TaxExempt\r\n     * <p>Is the customer tax exempt? Y or N</P>\r\n     *\r\n     * @param taxExempt String\r\n     *  <p>Maps to Payflow Parameter: TAXEXEMPT</p>\r\n     */\r\n    public void setTaxExempt(String taxExempt) {\r\n        this.taxExempt = taxExempt;\r\n    }\r\n\r\n    /**\r\n     * Gets the VAT registration number\r\n     *\r\n     * @return vatRegNum String\r\n     *  <p>Maps to Payflow Parameter: VATREGNUM</p>\r\n     */\r\n    public String getVatRegNum() {\r\n        return vatRegNum;\r\n    }\r\n\r\n    /**\r\n     * Sets the VAT registration number\r\n     *\r\n     * @param vatRegNum String\r\n     *  <p>Maps to Payflow Parameter: VATREGNUM</p>\r\n     */\r\n    public void setVatRegNum(String vatRegNum) {\r\n        this.vatRegNum = vatRegNum;\r\n    }\r\n\r\n    /**\r\n     * Gets the Vat Tax Amt\r\n     * <p>VAT Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return vatTaxAmt Currency\r\n     *  <p>Maps to Payflow Parameter: VATTAXAMT</p>\r\n     */\r\n    public Currency getVatTaxAmt() {\r\n        return vatTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the Vat Tax Amt\r\n     * <p>VAT Tax Amount. Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param vatTaxAmt Currency\r\n     *  <p>Maps to Payflow Parameter: VATTAXAMT</p>\r\n     */\r\n    public void setVatTaxAmt(Currency vatTaxAmt) {\r\n        this.vatTaxAmt = vatTaxAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the VAT Tax percentage.\r\n     *\r\n     * @return vatTaxPercent String\r\n     *  <p>Maps to Payflow Parameter: VATTAXPERCENT</p>\r\n     */\r\n    public String getVatTaxPercent() {\r\n        return vatTaxPercent;\r\n    }\r\n\r\n    /**\r\n     * Sets the VAT Tax percentage.\r\n     *\r\n     * @param vatTaxPercent String\r\n     *  <p>Maps to Payflow Parameter: VATTAXPERCENT</p>\r\n     */\r\n    public void setVatTaxPercent(String vatTaxPercent) {\r\n        this.vatTaxPercent = vatTaxPercent;\r\n    }\r\n\r\n    /**\r\n     * Gets the line item Amount.\r\n     * <p>Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @return itemAmt String\r\n     *  <p>Maps to Payflow Parameter: ITEMAMT</p>\r\n     */\r\n    public Currency getItemAmt() {\r\n        return itemAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the line item Amount.\r\n     * <p>Amount should always be a decimal.\r\n     * Exact amount to the cent (34.00, not 34).\r\n     * Do not include comma separators. Use 1199.95\r\n     * instead of 1,199.95.</P>\r\n     *\r\n     * @param itemAmt String\r\n     *  <p>Maps to Payflow Parameter: ITEMAMT</p>\r\n     */\r\n    public void setItemAmt(Currency itemAmt) {\r\n        this.itemAmt = itemAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the order description for this Invoice\r\n     *\r\n     * @return orderDesc String\r\n     *  <p> Maps to Payflow Parameter: ORDERDESC</p>\r\n     */\r\n    public String getOrderDesc() {\r\n        return orderDesc;\r\n    }\r\n\r\n    /**\r\n     * Sets the order description for this Invoice\r\n     *\r\n     * @param orderDesc String\r\n     *  <p> Maps to Payflow Parameter: ORDERDESC</p>\r\n     */\r\n    public void setOrderDesc(String orderDesc) {\r\n        this.orderDesc = orderDesc;\r\n    }\r\n\r\n    /**\r\n     * Sets the type of the Recurring transaction (UK).\r\n     * Type of transaction occurrence. The values are:\r\n     * F = First occurrence / S = Subsequent occurrence (default)\r\n     *\r\n     * @param recurringType String\r\n     *  <p>Maps to Payflow Parameter: RECURRINGTYPE</p>\r\n     */\r\n    public void setRecurringType(String recurringType) {\r\n        this.recurringType = recurringType;\r\n    }\r\n\r\n    /**\r\n     * Gets the type of the Recurring transaction (UK).\r\n     *\r\n     * @return recurringType String\r\n     *  <p>Maps to Payflow Parameter: RECURRINGTYPE</p>\r\n     */\r\n    public String getRecurringType() {\r\n        return recurringType;\r\n    }\r\n\r\n    /**\r\n     * Sets the Customer's IP Address.\r\n    *\r\n     * @param custIp String\r\n     *  <p>Maps to Payflow Parameter: CUSTIP</p>\r\n     */\r\n    public void setCustIp(String custIp) {\r\n        this.custIp = custIp;\r\n    }\r\n\r\n    /**\r\n     * Gets the Customer's IP Address.\r\n     *\r\n     * @return custIp String\r\n     *  <p>Maps to Payflow Parameter: CUSTIP</p>\r\n     */\r\n    public String getCustIp() {\r\n        return custIp;\r\n    }\r\n\r\n    /**\r\n     * Sets the VAT Invoice Number.\r\n     *\r\n     * @param vatInvNum String\r\n     *  <p>Maps to Payflow Parameter: VATINVNUM</p>\r\n     */\r\n    public void setVatInvNum(String vatInvNum) {\r\n        this.vatInvNum = vatInvNum;\r\n    }\r\n\r\n    /**\r\n     * Gets the VAT Invoice Number.\r\n     *\r\n     * @return vatInvNum String\r\n     *  <p>Maps to Payflow Parameter: VATINVNUM</p>\r\n     */\r\n    public String getVatInvNum() {\r\n        return vatInvNum;\r\n    }\r\n\r\n    /**\r\n     * Sets the VAT Tax Rate.\r\n     *\r\n     * @param vatTaxRate String\r\n     *  <p>Maps to Payflow Parameter: VATTAXRATE</p>\r\n     */\r\n    public void setVatTaxRate(String vatTaxRate) {\r\n        this.vatTaxRate = vatTaxRate;\r\n    }\r\n\r\n    /**\r\n     * Gets the VAT Tax Rate.\r\n     *\r\n     * @return vatTaxRate String\r\n     *  <p>Maps to Payflow Parameter: VATTAXRATE</p>\r\n     */\r\n    public String getVatTaxRate() {\r\n        return vatTaxRate;\r\n    }\r\n\r\n    /**\r\n     * Sets the Report Group.\r\n     * Category that the transaction is in, for example: coffee mugs.\r\n     * @param reportGroup String\r\n     *  <p>Maps to Payflow Parameter: REPORTGROUP</p>\r\n     */\r\n    public void setReportGroup(String reportGroup) {\r\n        this.reportGroup = reportGroup;\r\n    }\r\n    /**\r\n     * Gets the Report Group.\r\n     *\r\n     * @return reportGroup String\r\n     *  <p>Maps to Payflow Parameter: REPORTGROUP</p>\r\n     */\r\n    public String getReportGroup() {\r\n        return reportGroup;\r\n    }\r\n\t\r\n\t/**\r\n     * Sets the Miscellaneous Data.\r\n     * @param miscData String\r\n     *  <p>Maps to Payflow Parameter: MISCDATA</p>\r\n     */\r\n    public void setMiscData(String miscData) {\r\n        this.miscData = miscData;\r\n    }\r\n    /**\r\n     * Gets the Miscellaneous Data.\r\n     *\r\n     * @return miscData String\r\n     *  <p>Maps to Payflow Parameter: MISCDATA</p>\r\n     */\r\n    public String getMiscData() {\r\n        return miscData;\r\n    }\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/Invoice.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/Invoice.java	(date 1600060433102)
@@ -4,14 +4,14 @@
 
 /**
  * Used as the Purchase Invoice class. All the purchase related information can be stored in this class.
- * <p/>
+ *  * <p>
  * Following transactions do require invoice object:</p>
  * <ol>
  * <li>Sale Transaction</li>
  * <li>Authorization Transaction</li>
  * <li>Voice Authorization Transaction</li>
  * <li>Primary Credit Transaction</li>
- * <li>Recurring Transaction : Action --> Add, Payment</li>
+ * <li>Recurring Transaction : Action -- Add, Payment</li>
  * </ol>
  * <p>However, Invoice information can also be passed in the following transactions:</p>
  * <ol>
@@ -1041,8 +1041,8 @@
      * Gets the InvNum
      * <p>Merchant invoice number. This reference number
      * (PNREF'generated by PayPal) is used for authorizations
-     * and settlements.</para>
-     * <para>The Acquirer decides if this information will
+     * and settlements.
+     * The Acquirer decides if this information will
      * appear on the merchant's bank reconciliation statement.</P>
      *
      * @return String
@@ -1056,8 +1056,8 @@
      * Sets the InvNum
      * <p>Merchant invoice number. This reference number
      * (PNREF'generated by PayPal) is used for authorizations
-     * and settlements.</para>
-     * <para>The Acquirer decides if this information will
+     * and settlements.
+     * The Acquirer decides if this information will
      * appear on the merchant's bank reconciliation statement.</P>
      *
      * @param invNum String
@@ -1084,7 +1084,7 @@
      * Sets the Invoice Date
      * <p>Transaction Date.</p>
      * <p>Format: yyyymmdd.</p>
-     * <para>yyyy - Year, mm - Month, dd - Day.</P>
+     * yyyy - Year, mm - Month, dd - Day.
      *
      * @param invoiceDate String
      *  <p>Maps to Payflow Parameter: INVOICEDATE</p>
@@ -1141,7 +1141,7 @@
      * <p>National Tax Amount. Amount should always be a decimal.
      * Exact amount to the cent (34.00, not 34).
      * Do not include comma separators. Use 1199.95
-     * instead of 1,199.95./P>
+     * instead of 1,199.95.</p>
      *
      * @param nationalTaxAmt Currency
      *  <p>Maps to Payflow Parameter: NATIONALTAXAMT</p>
@@ -1152,9 +1152,9 @@
 
     /**
      * Gets the Order date
-     * <p>Order date.</para>
-     * <para>Format: mmddyy</para>
-     * <para>mm - Month, dd - Day, yy - Year.</P>
+     * <p>Order date.
+     * Format: mmddyy
+     * mm - Month, dd - Day, yy - Year.</P>
      *
      * @return String
      *  <p>Maps to Payflow Parameter: ORDERDATE</p>
@@ -1165,9 +1165,9 @@
 
     /**
      * Sets the Order Date
-     * <p>Order date.</para>
-     * <para>Format: mmddyy</para>
-     * <para>mm - Month, dd - Day, yy - Year.</P>
+     * <p>Order date.
+     * Format: mmddyy
+     * mm - Month, dd - Day, yy - Year.</P>
      *
      * @param orderDate String
      *  <p>Maps to Payflow Parameter: ORDERDATE</p>
@@ -1377,13 +1377,13 @@
      * Gets the Start Time
      * <p>STARTTIME specifies the beginning of the time
      * period during which the transaction specified by the
-     * CUSTREF occurred. </para>
-     * <para>If you set STARTTIME, and not ENDTIME, then
+     * CUSTREF occurred.
+     * If you set STARTTIME, and not ENDTIME, then
      * ENDTIME is defaulted to 30 days after STARTTIME.
      * If neither STARTTIME nor ENDTIME is specified, then
-     * the system searches the last 30 days.</para>
-     * <para>Format: yyyymmddhhmmss</para>
-     * <para>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</P>
+     * the system searches the last 30 days.
+     * Format: yyyymmddhhmmss
+     * yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</P>
      *
      * @return startTime String
      *  <p>Maps to Payflow Parameter: STARTTIME</p>
@@ -1396,12 +1396,12 @@
      * Sets the Start Time.
      * <p>STARTTIME specifies the beginning of the time
      * period during which the transaction specified by the
-     * CUSTREF occurred. </para>
-     * <para>If you set STARTTIME, and not ENDTIME, then
+     * CUSTREF occurred.
+     * If you set STARTTIME, and not ENDTIME, then
      * ENDTIME is defaulted to 30 days after STARTTIME.
      * If neither STARTTIME nor ENDTIME is specified, then
-     * the system searches the last 30 days.</para>
-     * <para>Format: yyyymmddhhmmss</para>
+     * the system searches the last 30 days.
+     * Format: yyyymmddhhmmss
      * <p>yyyy - Year, mm - Month dd - Day, hh - Hours, mm - Minutes ss - Seconds.</P>
      *
      * @param startTime String
Index: src/sdk/dataobjects/paypal/payflow/PayLater.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * PayPal Pay Later is a new, convenient, and secure service that allows you to offer your\r\n * customers promotional financing. Buyers that choose the promotional offer can defer\r\n * payments for purchases on participating merchant web sites, allowing them to shop now and\r\n * pay later.\r\n * <p/>\r\n * The PayPal Pay Later service allows online merchants to offer promotional financing to\r\n * buyers at checkout - even if a buyer doesn't have a PayPal account. Promotional offers, such as\r\n * no payments for 90 days, give merchants new and powerful ways to market to online\r\n * shoppers.\r\n *\r\n *  <p>\r\n * .................\r\n * // Following example shows how to use Pay Later.\r\n * PayLater setPayLater = new PayLater();\r\n * setPayLater.setshippingMethod(\"UPSGround\");\r\n * setPayLater.setproductCategory(\"E\"); // Camera and Photos\r\n * setPayLater.setpromoCodeOverride(\"1\");\r\n * setPayLater.setpaypalCheckoutBtnType(\"P\");\r\n * // You can combine up to 10 promotions for PayPal Promotional Financing.\r\n * // L_PROMOCODE0\r\n * PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();\r\n * setPayLaterLineItem.setpromoCode(\"101\");\r\n * setPayLater.PayLaterAddLineItem(setPayLaterLineItem);\r\n * // L_PROMOCODE1\r\n * PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();\r\n * setPayLaterLineItem1.setpromoCode(\"102\");\r\n * setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);\r\n * .................\r\n */\r\npublic class PayLater extends BaseRequestDataObject {\r\n\r\n    private String productCategory;\r\n    private String shippingMethod;\r\n    private String paypalCheckoutBtnType;\r\n    private String profileAddressChangeDate;\r\n    private String promoCodeOverride;\r\n    private ArrayList itemList;\r\n\r\n    /**\r\n     * Constructor. This is a default constructor which does not take any parameters.\r\n     * *\r\n     */\r\n    public PayLater() {\r\n        itemList = new ArrayList();\r\n    }\r\n\r\n    /**\r\n     * Adds a promo code to promo code list.\r\n     *\r\n     * @param item PayLaterLineItem object\r\n     *             <p>Use this method to add a promo code to the request.  A promotion code for\r\n     *             PayPal Promotional Financing where n is a value from 0 to 9. The first promotion\r\n     *             must be specified as L_PROMOCODE0.\r\n     *             Combine promotions by using additonal parameters, such as L_PROMOCODE1 and L_PROMOCODE2</p>\r\n     *  <p>\r\n     * .................\r\n     * // setPayLaterLineItem is the PayLaterLineItem object.\r\n     * .................\r\n     * // Create new Promo Code or Codes.  You can combine up to 10 promotions.\r\n     * // First promo code, L_PROMOCODE0\r\n     * PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();\r\n     * setPayLaterLineItem.setpromoCode(\"101\");\r\n     * setPayLater.PayLaterAddLineItem(setPayLaterLineItem);\r\n     * // Additional promo code (if needed), L_PROMOCODE1.  All addtional codes created in\r\n     * // this manner.\r\n     * PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();\r\n     * setPayLaterLineItem1.setpromoCode(\"102\");\r\n     * setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);\r\n     * .................\r\n     */\r\n\r\n    public void PayLaterAddLineItem(PayLaterLineItem item) {\r\n        itemList.add(item);\r\n    }\r\n\r\n    /**\r\n     * Removes a line item from line item list.\r\n     *\r\n     * @param index Index of promo code to be removed.\r\n     *              <p>Use this method to remove a promo code at a particular index in the requestr.</P>\r\n     *  <p>\r\n     * .................\r\n     * // setPayLater is the PayLater object\r\n     * .................\r\n     * // Remove promo code at index 0\r\n     * setPayLater.PayLaterRemoveLineItem(0);\r\n     * .................\r\n     */\r\n    public void PayLaterRemoveLineItem(int index) {\r\n        itemList.remove(index);\r\n    }\r\n\r\n    /**\r\n     * Clears the promo code  list.\r\n     * <p>Use this method to clear all the\r\n     * promo codes added to the request.</p>\r\n     *\r\n     *  <p>\r\n     * .................\r\n     * // setPayLater is the PayLater object\r\n     * .................\r\n     * // Remove all promo codes.\r\n     * setPayLater.PayLaterRemoveAllLineItems();\r\n     * .................\r\n     */\r\n    public void PayLaterRemoveAllLineItems() {\r\n        itemList.clear();\r\n    }\r\n\r\n    /**\r\n     *\r\n     *\r\n     */\r\n    private void generateItemRequest() {\r\n        for (int index = 0; index < itemList.size(); index++) {\r\n            PayLaterLineItem item = (PayLaterLineItem) itemList.get(index);\r\n            if (item != null) {\r\n                item.setContext(getContext());\r\n                item.setRequestBuffer(super.getRequestBuffer());\r\n                item.generateRequest(index);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    protected void generateRequest() {\r\n        try {\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPPINGMETHOD, shippingMethod));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PROMOCODEOVERRIDE, promoCodeOverride));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PROFILEADDRESSCHANGEDATE, profileAddressChangeDate));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAYPALCHECKOUTBTNTYPE, paypalCheckoutBtnType));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PRODUCTCATEGORY, productCategory));\r\n            if (itemList != null && itemList.size() > 0) {\r\n                generateItemRequest();\r\n            }\r\n        } catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() == null) {\r\n                getContext().addError(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the shippingMethod\r\n     * <p>Use this to get the Shipping method\r\n     * for this transaction.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: SHIPPINGMETHOD</p>\r\n     */\r\n    public String getshippingMethod() {\r\n        return shippingMethod;\r\n    }\r\n\r\n    /**\r\n     * Sets the shippingMethod\r\n     * <p>Use this method to set the Shipping method\r\n     * for this transaction.</P>\r\n     *\r\n     * @param shippingMethod String\r\n     *  <p>Maps to Payflow Parameter: SHIPPINGMETHOD</p>\r\n     */\r\n    public void setshippingMethod(String shippingMethod) {\r\n        this.shippingMethod = shippingMethod;\r\n    }\r\n\r\n    /**\r\n     * Gets Promo Code Override\r\n     * <p>Value is 0 or 1. Default value is 0.\r\n     * Set to 1 to override promotions from\r\n     * Set Express Checkout request.\r\n     * Otherwise, promotions will not be\r\n     * overridden.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: PROMOCODEOVERRIDE</p>\r\n     */\r\n    public String getpromoCodeOverride() {\r\n        return promoCodeOverride;\r\n    }\r\n\r\n    /**\r\n     * Sets Promo Code Override\r\n     * <p>Value is 0 or 1. Default value is 0.\r\n     * Set to 1 to override promotions from\r\n     * Set Express Checkout request.\r\n     * Otherwise, promotions will not be\r\n     * overridden.</P>\r\n     *\r\n     * @param promoCodeOverride String\r\n     *  <p>Maps to Payflow Parameter: PROMOCODEOVERRIDE</p>\r\n     */\r\n    public void setpromoCodeOverride(String promoCodeOverride) {\r\n        this.promoCodeOverride = promoCodeOverride;\r\n    }\r\n\r\n    /**\r\n     * Gets Profile Address Change Date\r\n     * <p>The last date that the billing address\r\n     * stored in the customer's profile with\r\n     * the merchant was changed. The date\r\n     * must be in UTC/GMT format. For\r\n     * example, 2007-12-15T17:23:15Z.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: PROFILEADDRESSCHANGEDATE</p>\r\n     */\r\n    public String getprofileAddressChangeDate() {\r\n        return profileAddressChangeDate;\r\n    }\r\n\r\n    /**\r\n     * Sets Profile Address Change Date\r\n     * <p>The last date that the billing address\r\n     * stored in the customer's profile with\r\n     * the merchant was changed. The date\r\n     * must be in UTC/GMT format. For\r\n     * example, 2007-12-15T17:23:15Z.</P>\r\n     *\r\n     * @param profileAddressChangeDate String\r\n     *  <p>Maps to Payflow Parameter: PROFILEADDRESSCHANGEDATE</p>\r\n     */\r\n    public void setprofileAddressChangeDate(String profileAddressChangeDate) {\r\n        this.profileAddressChangeDate = profileAddressChangeDate;\r\n    }\r\n\r\n    /**\r\n     * Gets the PayPal Checkout Button Type\r\n     * <p>Only for the No payment 90 days\r\n     * button, you must set this variable to P,\r\n     * which allows PayPal to make 90 days\r\n     * no payments the default payment\r\n     * option in the PayPal checkout flow.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: PAYPALCHECKOUTBTNTYPE</p>\r\n     */\r\n    public String getpaypalCheckoutBtnType() {\r\n        return paypalCheckoutBtnType;\r\n    }\r\n\r\n    /**\r\n     * Sets the PayPal Checkout Button Type\r\n     * <p>Only for the No payment 90 days\r\n     * button, you must set this variable to P,\r\n     * which allows PayPal to make 90 days\r\n     * no payments the default payment\r\n     * option in the PayPal checkout flow.</P>\r\n     *\r\n     * @param paypalCheckoutBtnType String\r\n     *  <p>Maps to Payflow Parameter: PAYPALCHECKOUTBTNTYPE</p>\r\n     */\r\n    public void setpaypalCheckoutBtnType(String paypalCheckoutBtnType) {\r\n        this.paypalCheckoutBtnType = paypalCheckoutBtnType;\r\n    }\r\n\r\n    /**\r\n     * Gets the Product Category.\r\n     * <p>The product category for this order. If\r\n     * the customer's cart contains more\r\n     * than one item, use the product\r\n     * category for the most expensive item.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: PRODUCTCATEGORY</p>\r\n     */\r\n    public String getproductCategory() {\r\n        return productCategory;\r\n    }\r\n\r\n    /**\r\n     * Sets the Product Category.\r\n     * <p>The product category for this order. If\r\n     * the customer's cart contains more\r\n     * than one item, use the product\r\n     * category for the most expensive item.</P>\r\n     *\r\n     * @param productCategory String\r\n     *  <p>Maps to Payflow Parameter: PRODUCTCATEGORY</p>\r\n     */\r\n    public void setproductCategory(String productCategory) {\r\n        this.productCategory = productCategory;\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/PayLater.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/PayLater.java	(date 1600056996500)
@@ -7,7 +7,7 @@
  * customers promotional financing. Buyers that choose the promotional offer can defer
  * payments for purchases on participating merchant web sites, allowing them to shop now and
  * pay later.
- * <p/>
+ *  * <p>
  * The PayPal Pay Later service allows online merchants to offer promotional financing to
  * buyers at checkout - even if a buyer doesn't have a PayPal account. Promotional offers, such as
  * no payments for 90 days, give merchants new and powerful ways to market to online
Index: src/sdk/dataobjects/paypal/payflow/FraudResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport org.apache.xerces.parsers.DOMParser;\r\nimport org.w3c.dom.Document;\r\nimport org.w3c.dom.Element;\r\nimport org.w3c.dom.Node;\r\nimport org.w3c.dom.NodeList;\r\nimport org.xml.sax.InputSource;\r\n\r\nimport java.io.ByteArrayInputStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Hashtable;\r\n\r\n/**\r\n * Container class for response messages specific Fraud Protections Services.\r\n * <p/>\r\n * This class contains the fraud protection\r\n * services related response messages and data objects parsed\r\n * from the xml data in the fraud response.\r\n * </p>\r\n * {@link FpsXmlData}\r\n */\r\npublic final class FraudResponse extends BaseResponseDataObject {\r\n\r\n    private Context context;\r\n    private String preFpsMsg;\r\n    private String postFpsMsg;\r\n    private FpsXmlData fpsPreXmlData;\r\n    private FpsXmlData fpsPostXmlData;\r\n\r\n    /**\r\n     * Gets the PreFpsMsg parameter.\r\n     *\r\n     * @return - String\r\n     *  Maps to Payflow Parameter: PREFPSMSG\r\n     */\r\n    public String getPreFpsMsg() {\r\n        return preFpsMsg;\r\n    }\r\n\r\n    /**\r\n     * Gets the PostFpsMsg parameter.\r\n     *\r\n     * @return - String\r\n     *  Maps to Payflow Parameter: POSTFPSMSG\r\n     */\r\n    public String getPostFpsMsg() {\r\n        return postFpsMsg;\r\n    }\r\n\r\n    /**\r\n     * Gets the Fps_PreXmlData parameter.\r\n     *\r\n     * @return - String\r\n     *         <p>Its an itemized list of responses for triggered filters</p>\r\n     *         {@link FpsXmlData}\r\n     */\r\n    public FpsXmlData getFpsPreXmlData() {\r\n        return fpsPreXmlData;\r\n    }\r\n\r\n    /**\r\n     * Gets the FpsPostXmlData parameter.\r\n     *\r\n     * @return - String\r\n     *         Gets the FPS Post Xml data message populated in FpsXmlData object.\r\n     *         {@link FpsXmlData}\r\n     *  <p>Maps to Payflow Parameter: FPS_POSTXMLDATA\r\n     */\r\n    public FpsXmlData getFpsPostXmlData() {\r\n        return fpsPostXmlData;\r\n    }\r\n\r\n\r\n    protected void setContext(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    protected FraudResponse() {\r\n    }\r\n\r\n    private ArrayList parseXmlData(String XmlData) throws Exception {\r\n\r\n        DOMParser parser = new DOMParser();\r\n        ByteArrayInputStream byteStream = new ByteArrayInputStream(XmlData.getBytes());\r\n        InputSource source = new InputSource(byteStream);\r\n        ArrayList fraudRuleList = new ArrayList();\r\n        //try\r\n        //{\r\n        parser.parse(source);\r\n\r\n        Document xmlDocument = parser.getDocument();\r\n\r\n        NodeList ruleList = xmlDocument.getElementsByTagName(PayflowConstants.XML_PARAM_RULE);\r\n        if (ruleList != null) {\r\n            int length = ruleList.getLength();\r\n            if (length > 0) {\r\n                for (int index = 0; index < length; index++) {\r\n                    Node ruleNode = ruleList.item(index);\r\n                    Rule currRule = new Rule();\r\n                    currRule.setNum(Integer.parseInt(ruleNode.getAttributes().getNamedItem(PayflowConstants.XML_PARAM_NUM).getNodeValue()));\r\n                    NodeList childNodes = ruleNode.getChildNodes();\r\n                    int childLength = childNodes.getLength();\r\n                    for (int cindex = 0; cindex < childLength; cindex++) {\r\n                        Element currChild = (Element) childNodes.item(cindex);\r\n                        String Name = currChild.getNodeName();\r\n                        Node child = currChild.getFirstChild();\r\n                        if (PayflowConstants.XML_PARAM_RULEID.equals(Name)) {\r\n                            currRule.setRuleId(child.getNodeValue());\r\n                        } else if (PayflowConstants.XML_PARAM_RULEALIAS.equals(Name)) {\r\n                            currRule.setRuleAlias(child.getNodeValue());\r\n                        } else if (PayflowConstants.XML_PARAM_RULEDESCRIPTION.equals(Name)) {\r\n                            currRule.setRuleDescription(child.getNodeValue());\r\n                        } else if (PayflowConstants.XML_PARAM_ACTION.equals(Name)) {\r\n                            currRule.setAction(child.getNodeValue());\r\n                        } else if (PayflowConstants.XML_PARAM_TRIGGEREDMESSAGE.equals(Name)) {\r\n                            currRule.setTriggeredMessage(child.getNodeValue());\r\n                        } else if (PayflowConstants.XML_PARAM_RULEVENDORPARMS.equals(Name)) {\r\n                            Element ruleVendorParams;\r\n                            ruleVendorParams = currChild;\r\n                            NodeList ruleParamList = ruleVendorParams.getElementsByTagName(PayflowConstants.XML_PARAM_RULEPARAMETER);\r\n                            int ruleParamLength = ruleParamList.getLength();\r\n                            for (int rindex = 0; rindex < ruleParamLength; rindex++) {\r\n                                Node ruleParamNode = ruleParamList.item(rindex);\r\n                                RuleParameter currRuleParam = new RuleParameter();\r\n                                currRuleParam.setNum(Integer.parseInt(ruleParamNode.getAttributes().getNamedItem(PayflowConstants.XML_PARAM_NUM).getNodeValue()));\r\n                                NodeList ruleParamChildNodes = ruleParamNode.getChildNodes();\r\n                                int ruleParamChildLength = ruleParamChildNodes.getLength();\r\n                                for (int rpindex = 0; rpindex < ruleParamChildLength; rpindex++) {\r\n                                    Element currRuleParamChild = (Element) ruleParamChildNodes.item(rpindex);\r\n                                    String ruleParamName = currRuleParamChild.getNodeName();\r\n                                    Node ruleParamChild = currRuleParamChild.getFirstChild();\r\n                                    if (PayflowConstants.XML_PARAM_NAME.equals(ruleParamName)) {\r\n                                        currRuleParam.setName(ruleParamChild.getNodeValue());\r\n                                    } else if (PayflowConstants.XML_PARAM_VALUE.equals(ruleParamName)) {\r\n                                        currRuleParam.setType(currRuleParamChild.getAttribute(PayflowConstants.XML_PARAM_TYPE));\r\n                                        currRuleParam.setValue(ruleParamChild.getNodeValue());\r\n                                    }\r\n                                }\r\n                                currRule.getRuleVendorParms().add(currRuleParam);\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    fraudRuleList.add(currRule);\r\n                }\r\n            }\r\n        }\r\n\r\n        //}\r\n        //catch(Exception ex)\r\n        //{\r\n        //\tthrow ex;\r\n        //}\r\n        return fraudRuleList;\r\n    }\r\n\r\n\r\n    protected void setParams(Hashtable ResponseHashTable) {\r\n        preFpsMsg = (String) ResponseHashTable.get(PayflowConstants.PARAM_PREFPSMSG);\r\n        postFpsMsg = (String) ResponseHashTable.get(PayflowConstants.PARAM_POSTFPSMSG);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_PREFPSMSG);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_POSTFPSMSG);\r\n        SetFpsXmlData(ResponseHashTable);\r\n    }\r\n\r\n    private void SetFpsXmlData(Hashtable ResponseHashTable) {\r\n        String XmlData;\r\n        XmlData = (String) ResponseHashTable.get(PayflowConstants.PARAM_FPS_PREXMLDATA);\r\n        fpsPreXmlData = SetRules(XmlData);\r\n        XmlData = (String) ResponseHashTable.get(PayflowConstants.PARAM_FPS_POSTXMLDATA);\r\n        fpsPostXmlData = SetRules(XmlData);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_FPS_PREXMLDATA);\r\n        ResponseHashTable.remove(PayflowConstants.PARAM_FPS_POSTXMLDATA);\r\n    }\r\n\r\n    private FpsXmlData SetRules(String XmlData) {\r\n        FpsXmlData FpsData = new FpsXmlData();\r\n        try {\r\n            if (XmlData != null && XmlData.length() > 0) {\r\n                ArrayList ruleList;\r\n\r\n                ruleList = parseXmlData(XmlData);\r\n                if (ruleList != null && ruleList.size() > 0) {\r\n                    FpsData.SetRuleList(ruleList);\r\n                }\r\n            }\r\n        }\r\n        catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", \"Error occured while parsing: \" + ex.toString());\r\n            if (context != null) {\r\n                context.addError(err);\r\n            }\r\n        }\r\n        return FpsData;\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/FraudResponse.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/FraudResponse.java	(date 1600056992317)
@@ -13,7 +13,7 @@
 
 /**
  * Container class for response messages specific Fraud Protections Services.
- * <p/>
+ *  * <p>
  * This class contains the fraud protection
  * services related response messages and data objects parsed
  * from the xml data in the fraud response.
Index: src/sdk/dataobjects/paypal/payflow/PurchaseCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Purchase card related information\r\n * PurchaseCard is associated with CardTender. {@link CardTender}\r\n */\r\npublic final class PurchaseCard extends PaymentCard {\r\n\r\n    private String commCard;\r\n\r\n    /**\r\n     * @param acct     Purchase Card number\r\n     * @param expDate  Card expiry date (format mmyy)\r\n     * @param cardType Purchase Card  type (P - Personal, C - Corprate, B - Business)\r\n     *                 <p/>\r\n     *  Maps to Payflow Parameter:\r\n     * ACCT , EXPDATE , COMMCARD\r\n     * <p/>\r\n     * //Create the PaymentDevice object\r\n     * PurchaseCard payDevice = new PurchaseCard(\"XXXXXXXXXX\",\"XXXX\",\"C\");\r\n     * </p>\r\n     */\r\n    public PurchaseCard(String acct, String expDate, String cardType) {\r\n        super(acct, expDate);\r\n        commCard = cardType;\r\n    }\r\n\r\n    /**\r\n     * Generate the Transaction request. Overrides PaymentCard.generateRequest()\r\n     */\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_COMMCARD, commCard));\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/PurchaseCard.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/PurchaseCard.java	(date 1600056994821)
@@ -12,10 +12,10 @@
      * @param acct     Purchase Card number
      * @param expDate  Card expiry date (format mmyy)
      * @param cardType Purchase Card  type (P - Personal, C - Corprate, B - Business)
-     *                 <p/>
+     *                  * <p>
      *  Maps to Payflow Parameter:
      * ACCT , EXPDATE , COMMCARD
-     * <p/>
+     *  * <p>
      * //Create the PaymentDevice object
      * PurchaseCard payDevice = new PurchaseCard("XXXXXXXXXX","XXXX","C");
      * </p>
Index: src/sdk/dataobjects/paypal/payflow/PaymentDevice.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This abstract class serves as base class of all the payment devices.\r\n * Each Payment Device is associated with a tender type.\r\n * Following are the Payment Devices associated with different tender types:\r\n * {@paypal.listtable}\r\n * {@paypal.ltr}\r\n * {@paypal.lth}Payment Device Data {@paypal.elth}\r\n * {@paypal.lth}Tender Type {@paypal.elth}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}BankAcct {@paypal.eltd}\r\n * {@paypal.ltd}{@link ACHTender}{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} CreditCard ,PurchaseCard ,SwipeCard{@paypal.eltd}\r\n * {@paypal.ltd}\r\n * {@link CardTender}\r\n * {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} CheckPayment {@paypal.eltd}\r\n * {@paypal.ltd} {@link CheckTender}{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.endlisttable}\r\n */\r\nabstract class PaymentDevice extends BaseRequestDataObject {\r\n\r\n    /**\r\n     * Payment Device number\r\n     */\r\n    private String acct;\r\n\r\n    /**\r\n     * Payment Device Holder's name\r\n     */\r\n    private String name;\r\n\r\n    /**\r\n     * MagTek Information.\r\n     */\r\n    private String magtek;\r\n\r\n    protected PaymentDevice() {\r\n    }\r\n\r\n    /**\r\n     * This constructor takes in Payment device Number.\r\n     *\r\n     * @param acct String\r\n     */\r\n    public PaymentDevice(String acct) {\r\n        this.acct = acct;\r\n    }\r\n\r\n    /**\r\n     * This constructor takes in Payment device Number and Payment device holder's name.\r\n     *\r\n     * @param acct String\r\n     * @param name String\r\n     */\r\n    public PaymentDevice(String acct, String name) {\r\n        this.acct = acct;\r\n        this.name = name;\r\n    }\r\n\r\n    /**\r\n     * gets the Account holder's account number.\r\n     *\r\n     * @return String\r\n     *         <p/>\r\n     *         Maps to Payflow Parameters as follows:\r\n     *         {@paypal.listtable}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.lth} Specific transaction {@paypal.elth}\r\n     *         {@paypal.lth}Payflow Parameter{@paypal.elth}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} Transactions with CreditCard, PurchaseCard, BankAcct payment devices {@paypal.eltd}\r\n     *         {@paypal.ltd} ACCT {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} Transactions with CheckPayment {@paypal.eltd}\r\n     *         {@paypal.ltd} MICR {@paypal.ltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} Transactions with SwipeCard {@paypal.eltd}\r\n     *         {@paypal.ltd} SWIPE {@paypal.ltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.endlisttable}\r\n     *         </p>\r\n     */\r\n    public String getAcct() {\r\n        return acct;\r\n    }\r\n\r\n    /**\r\n     * gets the account holder's name.\r\n     *\r\n     * @return String\r\n     *         <p/>\r\n     * Maps to Payflow Parameters as follows: NAME\r\n     * </p>\r\n     */\r\n\r\n    public String getName() {\r\n        return name;\r\n    }\r\n\r\n    /**\r\n     * gets the account holder's name.\r\n     *\r\n     * @param name <p/>\r\n     * Maps to Payflow Parameters as follows: NAME\r\n     * </p>\r\n     */\r\n    public void setName(String name) {\r\n        this.name = name;\r\n    }\r\n\r\n    public String getMagTek(MagTekInfo mT) {\r\n        return magtek;\r\n    }\r\n\r\n    /**\r\n     * gets the MagTek Encrypted Swipe Data.\r\n     *\r\n     * @param magtek <p/>\r\n     *\r\n     */\r\n    public void setMagtek(String magtek) {\r\n        this.magtek = magtek;\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ACCT, acct));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_NAME, name));\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/PaymentDevice.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/PaymentDevice.java	(date 1600057725677)
@@ -4,26 +4,13 @@
  * This abstract class serves as base class of all the payment devices.
  * Each Payment Device is associated with a tender type.
  * Following are the Payment Devices associated with different tender types:
- * {@paypal.listtable}
- * {@paypal.ltr}
- * {@paypal.lth}Payment Device Data {@paypal.elth}
- * {@paypal.lth}Tender Type {@paypal.elth}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}BankAcct {@paypal.eltd}
- * {@paypal.ltd}{@link ACHTender}{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} CreditCard ,PurchaseCard ,SwipeCard{@paypal.eltd}
- * {@paypal.ltd}
- * {@link CardTender}
- * {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} CheckPayment {@paypal.eltd}
- * {@paypal.ltd} {@link CheckTender}{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.endlisttable}
+ *
+ * Payment Device Data Tender Type
+ *
+ * BankAcct {@link ACHTender}
+ * CreditCard, PurchaseCard, SwipeCard {@link CardTender}
+ * CheckPayment {@link CheckTender}
+ *
  */
 abstract class PaymentDevice extends BaseRequestDataObject {
 
@@ -69,27 +56,13 @@
      * gets the Account holder's account number.
      *
      * @return String
-     *         <p/>
-     *         Maps to Payflow Parameters as follows:
-     *         {@paypal.listtable}
-     *         {@paypal.ltr}
-     *         {@paypal.lth} Specific transaction {@paypal.elth}
-     *         {@paypal.lth}Payflow Parameter{@paypal.elth}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} Transactions with CreditCard, PurchaseCard, BankAcct payment devices {@paypal.eltd}
-     *         {@paypal.ltd} ACCT {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} Transactions with CheckPayment {@paypal.eltd}
-     *         {@paypal.ltd} MICR {@paypal.ltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} Transactions with SwipeCard {@paypal.eltd}
-     *         {@paypal.ltd} SWIPE {@paypal.ltd}
-     *         {@paypal.eltr}
-     *         {@paypal.endlisttable}
-     *         </p>
+     *
+     * Maps to Payflow Parameters as follows:
+     *
+     * ACCT - Transactions with CreditCard, PurchaseCard, BankAcct payment devices
+     * MICR - Transactions with CheckPayment
+     * SWIPE - Transactions with SwipeCard
+     *
      */
     public String getAcct() {
         return acct;
@@ -99,7 +72,7 @@
      * gets the account holder's name.
      *
      * @return String
-     *         <p/>
+     *          * <p>
      * Maps to Payflow Parameters as follows: NAME
      * </p>
      */
@@ -111,7 +84,7 @@
     /**
      * gets the account holder's name.
      *
-     * @param name <p/>
+     * @param name  * <p>
      * Maps to Payflow Parameters as follows: NAME
      * </p>
      */
@@ -126,7 +99,7 @@
     /**
      * gets the MagTek Encrypted Swipe Data.
      *
-     * @param magtek <p/>
+     * @param magtek Magtek Encrypted Swipe Data
      *
      */
     public void setMagtek(String magtek) {
Index: src/sdk/dataobjects/paypal/payflow/Currency.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.text.DecimalFormat;\r\n\r\n/**\r\n * This class is used as the currency data type\r\n * by all data and transaction objects.\r\n * <p>This class should be used to denote any\r\n * currency parameter. By default, the currency code is\r\n * USD (US Dollars).</p>\r\n *\r\n *  Following example shows how to use this class.\r\n * .............\r\n * //inv is the Invoice object\r\n * .............\r\n * <p/>\r\n * //Set the currency object.\r\n * Currency mt = new Currency(new Double(25.12));\r\n * // A valid amount is a two decimal value.\r\n * // For values which have more than two decimal places\r\n * Currency amt = new Currency(new Double(25.1214));\r\n * amt.setNoOfDecimalDigits( 2);\r\n * //If the NoOfDecimalDigits property is used then it is mandatory to set one of the following properties to true.\r\n * amt.setRound (true);\r\n * amt.setTruncate (true);\r\n * <p/>\r\n * //Set the amount in the invoice object\r\n * inv.setAmt( Amt);\r\n * .............\r\n */\r\npublic final class Currency extends BaseRequestDataObject {\r\n\r\n    private Double currencyValue;\r\n    private String currencyCode = \"USD\";\r\n    private boolean round = false;\r\n    private boolean truncate = false;\r\n    private int noOfDecimalDigits = 2;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param currValue Double\r\n     *                  <p>Currency code is set as default USD.</p>\r\n     *  .............\r\n     * //inv is the Invoice object\r\n     * .............\r\n     * <p/>\r\n     * //Set the invoice amount.\r\n     * inv.setAmt(new Currency(new Double(25.12)));\r\n     * <p/>\r\n     * .............\r\n     */\r\n\r\n    public Currency(Double currValue) {\r\n        currencyValue = currValue;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param currencyValue Double Currency value\r\n     * @param currCode      String 3 letter Currency code\r\n     *                      <p>Currency code if not given is set as default USD.</p>\r\n     *  .............\r\n     * //inv is the Invoice object\r\n     * .............\r\n     * <p/>\r\n     * //Set the invoice amount.\r\n     * inv.setAmt(new Currency(new Double(25.12),\"USD\"));\r\n     * <p/>\r\n     * .............\r\n     */\r\n\r\n    public Currency(Double currencyValue, String currCode) {\r\n        this(currencyValue);\r\n        if (currCode != null && currCode.length() > 0) {\r\n            currencyCode = currCode;\r\n        }\r\n    }\r\n\r\n\r\n    protected String roundCurrencyValue(String currStringValue, int noOfdecimalDigits) {\r\n\r\n        StringBuffer retVal = new StringBuffer(currStringValue);\r\n\r\n        if (retVal.length() == 0) {\r\n            return PayflowConstants.EMPTY_STRING;\r\n        }\r\n\r\n        int indexOfDecimal = retVal.indexOf(\".\");\r\n        int length = retVal.length();\r\n\r\n        if (indexOfDecimal > 0 && indexOfDecimal < length) {\r\n            if (indexOfDecimal == length - 1) {\r\n                for (int i = 0; i < noOfdecimalDigits; i++) {\r\n                    retVal.append(\"0\");\r\n                }\r\n            } else if (noOfdecimalDigits == 0) {\r\n                retVal = new StringBuffer(retVal.substring(0, indexOfDecimal));\r\n            } else {\r\n                int lenAfterTruncate = indexOfDecimal + noOfdecimalDigits + 1;\r\n\r\n                if (lenAfterTruncate > length) {\r\n                    int padding = lenAfterTruncate - length;\r\n                    for (int i = 0; i < padding; i++) {\r\n                        retVal.append(\"0\");\r\n                    }\r\n                } else if (lenAfterTruncate < length) {\r\n                    int trimming = length - lenAfterTruncate;\r\n                    int endLen = length - 1;\r\n                    for (int i = 0; i < trimming; i++) {\r\n                        int val = Integer.parseInt(retVal.substring(endLen, 1));\r\n                        if (val >= 5) {\r\n                            int roundVal = Integer.parseInt(retVal.substring(endLen - 1, 1));\r\n                            roundVal += 1;\r\n                            if (roundVal >= 10) {\r\n                                roundVal = 1;\r\n                            }\r\n                            retVal = retVal.delete(endLen - 1, 2);\r\n                            retVal = retVal.insert(endLen - 1, Integer.toString(roundVal));\r\n                        } else {\r\n                            retVal = retVal.delete(endLen, 1);\r\n                        }\r\n                        endLen -= 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n        }\r\n        return retVal.toString();\r\n    }\r\n\r\n\r\n    protected String truncateCurrencyValue(String currStringValue, int noOfdecimalDigits) {\r\n\r\n        String retVal;\r\n        retVal = currStringValue;\r\n        if (retVal == null || retVal.length() == 0) {\r\n            return PayflowConstants.EMPTY_STRING;\r\n        }\r\n\r\n        int indexOfDecimal = retVal.indexOf(\".\");\r\n        int length = retVal.length();\r\n        if (indexOfDecimal > 0 && indexOfDecimal <= length - 1) {\r\n            if (indexOfDecimal == length - 1) {\r\n                for (int i = 1; i < noOfdecimalDigits; i++) {\r\n                    retVal += \"0\";\r\n                }\r\n            } else if (noOfdecimalDigits == 0) {\r\n                retVal = retVal.substring(0, indexOfDecimal);\r\n            } else {\r\n                int lenAfterTruncate = indexOfDecimal + noOfdecimalDigits + 1;\r\n\r\n                if (lenAfterTruncate > length) {\r\n                    int padding = lenAfterTruncate - length;\r\n                    for (int i = 0; i < padding; i++) {\r\n                        retVal += \"0\";\r\n                    }\r\n                } else if (lenAfterTruncate < length) {\r\n                    retVal = retVal.substring(0, lenAfterTruncate);\r\n                }\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n\r\n    /**\r\n     * Overrides ToString\r\n     *\r\n     * @return String</returns>\r\n     *         <p>Formats string value of currency in format \"$.CC\"</p>\r\n     *  .............\r\n     * //inv is the Invoice object\r\n     * .............\r\n     * <p/>\r\n     * //Set the invoice amount.\r\n     * inv.setAmt (new Currency(new Double(25.12),\"USD\"));\r\n     * String currValue = inv.ToString();\r\n     * .............\r\n     */\r\n    public String toString() {\r\n        try {\r\n            //Overridden toString. Returns held Currency Value.\r\n            String retVal = PayflowConstants.EMPTY_STRING;\r\n            // We need to double check here whether currency value\r\n            //is non-zero positive before converting it.\r\n            if (noOfDecimalDigits < 0) {\r\n                noOfDecimalDigits = 2;\r\n            }\r\n\r\n            if (round && truncate) {\r\n                //\r\n                ErrorObject err = PayflowUtility.populateCommError(PayflowConstants.E_CURRENCY_PROCESS_ERROR, null, PayflowConstants.SEVERITY_FATAL, false, null);\r\n                if (getContext() == null) {\r\n                    setContext(new Context());\r\n                }\r\n                getContext().addError(err);\r\n            } else if (round) {\r\n                String format = \".0\";\r\n                for (int i = 1; i < noOfDecimalDigits; i++) {\r\n                    format = format + \"0\";\r\n                }\r\n                DecimalFormat decFormat = new DecimalFormat(format);\r\n                retVal = decFormat.format(currencyValue);\r\n\r\n            } else if (truncate) {\r\n                retVal = truncateCurrencyValue(currencyValue.toString(), noOfDecimalDigits);\r\n            } else {\r\n                retVal = currencyValue.toString();\r\n            }\r\n\r\n            int startIndex = retVal.indexOf(\".\");\r\n            if (startIndex < 0 && noOfDecimalDigits == 0) {\r\n                return retVal;\r\n            } else {\r\n                if (startIndex < 0)\r\n                    retVal += \".00\";\r\n                //         substring(startIndex, retVal.length()-startIndex);\r\n                //String tempStr = retVal.substring(startIndex + 1, retVal.length() - startIndex - 1);\r\n                //int len = tempStr.length();\r\n                int len = retVal.substring(startIndex, retVal.length() - 1).length();\r\n                if (len < 2 && noOfDecimalDigits != 0) {\r\n                    for (int i = len; i < 2; i++)\r\n                        retVal = retVal + \"0\";\r\n                }\r\n                //  currencyValue = new Double(doubleValue);\r\n                return retVal;\r\n            }\r\n        }\r\n\r\n        catch (\r\n                Exception ex\r\n                )\r\n\r\n        {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() == null) {\r\n                setContext(new Context());\r\n            }\r\n            getContext().addError(err);\r\n            return PayflowConstants.EMPTY_STRING;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the currency code.\r\n     *\r\n     * @return currencyCode\r\n     */\r\n    public String getCurrencyCode() {\r\n        return this.currencyCode;\r\n    }\r\n\r\n    /**\r\n     * Sets the number of decimal digits required after rounding or truncation.\r\n     *\r\n     * @param noOfDecimalDigits int\r\n     */\r\n    public void setNoOfDecimalDigits(int noOfDecimalDigits) {\r\n        this.noOfDecimalDigits = noOfDecimalDigits;\r\n    }\r\n\r\n    /**\r\n     * Sets Currency value rounding flag to true.\r\n     *\r\n     * @param round boolean .\r\n     *              Note that only one of round OR truncate can be set to true.\r\n     */\r\n    public void setRound(boolean round) {\r\n        this.round = round;\r\n    }\r\n\r\n    /**\r\n     * Sets Currency value truncate flag to true.\r\n     *\r\n     * @param truncate boolean .\r\n     *                 Note that only one of round OR truncate can be set to true.\r\n     */\r\n\r\n    public void setTruncate(boolean truncate) {\r\n        this.truncate = truncate;\r\n    }\r\n\r\n    /**\r\n     * Gets the error generated by the class.This should be used in case the toString() return blank.\r\n     *\r\n     * @return error String\r\n     */\r\n    public String getError() {\r\n        if (getContext() != null) {\r\n            return getContext().toString();\r\n        }\r\n        return PayflowConstants.EMPTY_STRING;\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/Currency.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/Currency.java	(date 1600059474403)
@@ -13,7 +13,7 @@
  * .............
  * //inv is the Invoice object
  * .............
- * <p/>
+ *  * <p>
  * //Set the currency object.
  * Currency mt = new Currency(new Double(25.12));
  * // A valid amount is a two decimal value.
@@ -23,7 +23,7 @@
  * //If the NoOfDecimalDigits property is used then it is mandatory to set one of the following properties to true.
  * amt.setRound (true);
  * amt.setTruncate (true);
- * <p/>
+ *  * <p>
  * //Set the amount in the invoice object
  * inv.setAmt( Amt);
  * .............
@@ -44,10 +44,10 @@
      *  .............
      * //inv is the Invoice object
      * .............
-     * <p/>
+     *  * <p>
      * //Set the invoice amount.
      * inv.setAmt(new Currency(new Double(25.12)));
-     * <p/>
+     *  * <p>
      * .............
      */
 
@@ -64,10 +64,10 @@
      *  .............
      * //inv is the Invoice object
      * .............
-     * <p/>
+     *  * <p>
      * //Set the invoice amount.
      * inv.setAmt(new Currency(new Double(25.12),"USD"));
-     * <p/>
+     *  * <p>
      * .............
      */
 
@@ -168,12 +168,13 @@
     /**
      * Overrides ToString
      *
-     * @return String</returns>
-     *         <p>Formats string value of currency in format "$.CC"</p>
+     * @return String
+     *
+     * <p>Formats string value of currency in format "$.CC"</p>
      *  .............
      * //inv is the Invoice object
      * .............
-     * <p/>
+     *  * <p>
      * //Set the invoice amount.
      * inv.setAmt (new Currency(new Double(25.12),"USD"));
      * String currValue = inv.ToString();
Index: src/sdk/dataobjects/paypal/payflow/MerchantInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Merchant  related information.\r\n * <p>Use this class to set the customer related\r\n * information.</p>\r\n *\r\n *  .................\r\n * // inv is the Invoice object\r\n * .................\r\n *\t// Set the Merchant Info details.\r\n *\tMerchantInfo Merchant = New MerchantInfo();\r\n *\tMerchant.MerchantCode = \"MerchantXXXXX\";\r\n *\tMerchant.MerchantCity = \"Anywhere\";\r\n *\tInv.MerchantInfo = Merchant;\r\n * .................\r\n */\r\npublic final class MerchantInfo extends BaseRequestDataObject {\r\n\r\n    private String merchDescr;\r\n    private String merchSvc;\r\n    private String merchantName;\r\n    private String merchantStreet;\r\n    private String merchantCity;\r\n    private String merchantState;\r\n    private String merchantCountryCode;\r\n    private String merchantZip;\r\n    private String merchantUrl;\r\n    private String merchantVatNum;\r\n    private String merchantInvoiceNum;\r\n    private String merchantLocationId;\r\n    private String merchantId;\r\n    private String merchantContactInfo;\r\n\r\n    /**\r\n     * Constructor\r\n     * <p>Use this class to set the Merchant related information. Used for Soft Descriptor.</p>\r\n     */\r\n    public MerchantInfo() {\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        try {\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTNAME, merchantName));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTSTREET, merchantStreet));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTCITY, merchantCity));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTSTATE, merchantState));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTZIP, merchantZip));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTCOUNTRYCODE, merchantCountryCode));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTURL, merchantUrl));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTVATNUM, merchantVatNum));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTINVOICENUM, merchantInvoiceNum));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTLOCATIONID, merchantLocationId));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTID, merchantId));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHANTCONTACTINFO, merchantContactInfo));\r\n\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHDESCR, merchDescr));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MERCHSVC, merchSvc));\r\n        } catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() != null) {\r\n                getContext().addError(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant's Name.\r\n     *\r\n     * @return merchantName String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTNAME/p>\r\n     */\r\n    public String getMerchantName() {\r\n        return merchantName;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's Name.\r\n     * <p>Merchant/Business Name</P>\r\n     *\r\n     * @param merchantName String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTNAME</p>\r\n     */\r\n    public void setMerchantName(String merchantName) {\r\n        this.merchantName = merchantName;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant's Street.\r\n     *\r\n     * @return merchantStreet String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTSTREET</p>\r\n     */\r\n    public String getmerchantStreet() {\r\n        return merchantStreet;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's Street.\r\n     *\r\n     * @param merchantStreet String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTSTREET</p>\r\n     */\r\n    public void setMerchantStreet(String merchantStreet) {\r\n        this.merchantStreet = merchantStreet;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant's City.\r\n     *\r\n     * @return merchantCity String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTCITY</p>\r\n     */\r\n    public String getMerchantCity() {\r\n        return merchantCity;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's City.\r\n     *\r\n     * @param merchantCity String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTCITY</p>\r\n     */\r\n    public void setMerchantCity(String merchantCity) {\r\n        this.merchantCity = merchantCity;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant's State.\r\n     *\r\n     * @return merchantState String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTSTATE   </p>\r\n     */\r\n    public String getMerchantState() {\r\n        return merchantState;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's State.\r\n     *\r\n     * @param merchantState String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTSTATE</p>\r\n     */\r\n    public void setMerchantState(String merchantState) {\r\n        this.merchantState = merchantState;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant's Zip.\r\n     *\r\n     * @return merchantZip String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTZIP</p>\r\n     */\r\n    public String getMerchantZip() {\r\n        return merchantZip;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's Zip.\r\n     *\r\n     * @param merchantZip String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTZIP</p>\r\n     */\r\n    public void setMerchantZip(String merchantZip) {\r\n        this.merchantZip = merchantZip;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant Country Code.\r\n     *\r\n     * @return merchantCountyCode String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTCOUNTRYCODE</p>\r\n     */\r\n    public String getMerchantCountryCode() {\r\n        return merchantCountryCode;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant Country Code.\r\n     * @param merchantCountryCode String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTCOUNTRYCODE</p>\r\n     */\r\n    public void setMerchantCountryCode(String merchantCountryCode) {\r\n        this.merchantCountryCode = merchantCountryCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant Url.\r\n     *\r\n     * @return merchantUrl String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTURL</p>\r\n     */\r\n    public String getMerchantUrl() {\r\n        return merchantUrl;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant Url.\r\n     * @param merchantUrl String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTURL</p>\r\n     */\r\n    public void setMerchantUrl(String merchantUrl) {\r\n        this.merchantUrl = merchantUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant VAT number.\r\n     *\r\n     * @return merchantVatNum String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTVATNUM</p>\r\n     */\r\n    public String getMerchantVatNum() {\r\n        return merchantVatNum;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant VAT number.\r\n     * @param merchantVatNum String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTVATNUM</p>\r\n     */\r\n    public void setMerchantVatNum(String merchantVatNum) {\r\n        this.merchantVatNum = merchantVatNum;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant Invoice number.\r\n     *\r\n     * @return merchantInvoiceNum String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTINVOICENUM</p>\r\n     */\r\n    public String getMerchantInvoiceNum() {\r\n        return merchantInvoiceNum;\r\n    }\r\n    /**\r\n     * Sets the Merchant Invoice number.\r\n     * @param merchantInvoiceNum String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTINVOICENUM</p>\r\n     */\r\n    public void setMerchantInvoiceNum(String merchantInvoiceNum) {\r\n        this.merchantInvoiceNum = merchantInvoiceNum;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant Location Id.\r\n     * Merchant assigned store or location number.\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTLOCATIONID</p>\r\n     */\r\n    public String getMerchantLocationId() {\r\n        return merchantLocationId;\r\n    }\r\n    /**\r\n     * Sets the Merchant Location Id.\r\n     * @param merchantLocationId String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTLOCATIONID</p>\r\n     */\r\n    public void setMerchantLocationId(String merchantLocationId) {\r\n        this.merchantLocationId = merchantLocationId;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant Id.\r\n     * Processor assigned Id.\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTID\r\n     */\r\n    public String getMerchantId() {\r\n        return merchantId;\r\n    }\r\n    /**\r\n     * Sets the Merchant Id.\r\n     * @param merchantId String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTID</p>\r\n     */\r\n    public void setMerchantId(String merchantId) {\r\n        this.merchantId = merchantId;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant Contact Information.\r\n     * Merchants telephone, URl or email.\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTCONTACTINFO\r\n     */\r\n    public String getMerchantContactInfo() {\r\n        return merchantContactInfo;\r\n    }\r\n    /**\r\n     * Sets the Merchant Contact Information.\r\n     * @param merchantContactInfo String\r\n     *  <p>Maps to Payflow Parameter: MERCHANTCONTANCTINFO</p>\r\n     */\r\n    public void setMerchantContactInfoId(String merchantContactInfo) {\r\n        this.merchantContactInfo = merchantContactInfo;\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * Gets the Merchant's description.\r\n     *\r\n     * @return merchDescr String\r\n     *  <p>Maps to Payflow Parameter: MERCHDESCR</p>\r\n     */\r\n    public String getMerchDescr() {\r\n        return merchDescr;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's description.\r\n     *\r\n     * @param merchDescr String\r\n     *  <p>Maps to Payflow Parameter: MERCHDESCR</p>\r\n     */\r\n    public void setMerchDescr(String merchDescr) {\r\n        this.merchDescr = merchDescr;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant's contact information.\r\n     *\r\n     * @return merchSvc String\r\n     *  <p>Maps to Payflow Parameter: MERCHSVC</p>\r\n     */\r\n    public String getMerchSvc() {\r\n        return merchSvc;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's contact information.\r\n     *\r\n     * @param merchSvc String\r\n     *  <p>Maps to Payflow Parameter: MERCHSVC</p>\r\n     */\r\n    public void setMerchSvc(String merchSvc) {\r\n        this.merchSvc = merchSvc;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/MerchantInfo.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/MerchantInfo.java	(date 1600060428402)
@@ -68,7 +68,7 @@
      * Gets the Merchant's Name.
      *
      * @return merchantName String
-     *  <p>Maps to Payflow Parameter: MERCHANTNAME/p>
+     *  <p>Maps to Payflow Parameter: MERCHANTNAME</p>
      */
     public String getMerchantName() {
         return merchantName;
Index: src/sdk/dataobjects/paypal/payflow/FpsXmlData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\n/**\r\n * Used for storing Fraud Protection Services\r\n * XML response message after parsing them.\r\n * <p>If the VERBOSITY set for the transaction is HIGH,\r\n * Fraud Protection Services return FPS_PREXMLDATA and/or\r\n * FPS_POSTXMLDATA response messages. This are xml messages.\r\n * <p>While parsing the response, these xml messages are parsed\r\n * and populated into Rule data objects. These Rule objects are rules applied\r\n * by the Fraud Protection Services.. FpsXmlData is the container class\r\n * for all such rules.</p>\r\n * <p>FpsXmlData data objects instances are contained in\r\n * FraduResponse and populated if obtained.</p>\r\n * {@link FraudResponse}\r\n * {@link Rule}\r\n * {@link RuleParameter}\r\n * </p>\r\n * Following example shows how to obtained and use FpsXmlData.\r\n *\r\n *  ..............................\r\n * // resp is the Response object\r\n * // obtained after submitting the transaction.\r\n * ..............................\r\n * <p/>\r\n * <p/>\r\n * FpsXmlData preXmlData = fraudResp.getFpsPreXmlData();\r\n * if (preXmlData != null)\r\n * {\r\n * // Get the list of Rules.\r\n * ArrayList rulesList = preXmlData.getRules();\r\n * if (rulesList != null && rulesList.size()> 0)\r\n * {\r\n * Iterator rulesEnum = rulesList.iterator();\r\n * Rule doRule = null;\r\n * // Loop through the list of Rules.\r\n * while (rulesEnum.hasNext())\r\n * {\r\n * doRule = (Rule)rulesEnum.next();\r\n * System.out.println(\"Rule Number = \" + String.valueOf(doRule.getNum()));\r\n * System.out.println(\"Rule Id = \" + doRule.getRuleId());\r\n * System.out.println(\"Rule Alias = \" + doRule.getRuleAlias());\r\n * System.out.println(\"Rule Description = \" + doRule.getRuleDescription());\r\n * System.out.println(\"Action = \" + doRule.getAction());\r\n * System.out.println(\"Triggered Message = \" + doRule.getTriggeredMessage());\r\n * <p/>\r\n * // Get the list of Rule Vendor Parameters.\r\n * ArrayList ruleVendorParmsList = doRule.getRuleVendorParms();\r\n * <p/>\r\n * if (ruleVendorParmsList != null && ruleVendorParmsList.size() > 0)\r\n * {\r\n * Iterator ruleParametersEnum = ruleVendorParmsList.iterator();\r\n * // Loop through the list of Rule Parameters.\r\n * while (ruleParametersEnum.hasNext())\r\n * {\r\n * RuleParameter doRuleParam = (RuleParameter)ruleParametersEnum.next();\r\n * System.out.println(\"Number = \" + String.valueOf(doRuleParam.getNum()));\r\n * System.out.println(\"Name = \" + doRuleParam.getName());\r\n * System.out.println(\"Type = \" + doRuleParam.getType());\r\n * System.out.println(\"Value = \" + doRuleParam.getValue());\r\n * }\r\n * }\r\n * }\r\n */\r\npublic class FpsXmlData {\r\n\r\n\r\n    private ArrayList rules;\r\n\r\n    /**\r\n     * Gets the Rules list.\r\n     *\r\n     * @return ArrayList\r\n     */\r\n    public ArrayList getRules() {\r\n        return rules;\r\n    }\r\n\r\n    /**\r\n     * constructor\r\n     */\r\n    public FpsXmlData() {\r\n        rules = new ArrayList();\r\n    }\r\n\r\n    protected void SetRuleList(ArrayList RuleList) {\r\n        rules = RuleList;\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/FpsXmlData.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/FpsXmlData.java	(date 1600059667750)
@@ -18,21 +18,19 @@
  * {@link FraudResponse}
  * {@link Rule}
  * {@link RuleParameter}
- * </p>
+ *
  * Following example shows how to obtained and use FpsXmlData.
  *
  *  ..............................
  * // resp is the Response object
  * // obtained after submitting the transaction.
  * ..............................
- * <p/>
- * <p/>
+ *  * <p>
  * FpsXmlData preXmlData = fraudResp.getFpsPreXmlData();
  * if (preXmlData != null)
  * {
  * // Get the list of Rules.
  * ArrayList rulesList = preXmlData.getRules();
- * if (rulesList != null && rulesList.size()> 0)
  * {
  * Iterator rulesEnum = rulesList.iterator();
  * Rule doRule = null;
@@ -46,11 +44,11 @@
  * System.out.println("Rule Description = " + doRule.getRuleDescription());
  * System.out.println("Action = " + doRule.getAction());
  * System.out.println("Triggered Message = " + doRule.getTriggeredMessage());
- * <p/>
+ *  * <p>
  * // Get the list of Rule Vendor Parameters.
  * ArrayList ruleVendorParmsList = doRule.getRuleVendorParms();
- * <p/>
- * if (ruleVendorParmsList != null && ruleVendorParmsList.size() > 0)
+ *  * <p>
+ * if (ruleVendorParmsList != null &amp;&amp; ruleVendorParmsList.size() %3E 0)
  * {
  * Iterator ruleParametersEnum = ruleVendorParmsList.iterator();
  * // Loop through the list of Rule Parameters.
Index: src/sdk/dataobjects/paypal/payflow/ECSetRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for ExpressCheckout SET operation.\r\n * {@link ECGetRequest}\r\n * {@link ECDoRequest}\r\n */\r\npublic class ECSetRequest extends ExpressCheckoutRequest {\r\n\r\n    private String returnUrl;\r\n    private String cancelUrl;\r\n    private String reqConfirmShipping;\r\n    private String reqBillingAddress;\r\n    private String noShipping;\r\n    private String addrOverride;\r\n    private String localecode;\r\n    private Currency maxAmt;\r\n    private String pageStyle;\r\n    private String headerImg;           //\"cpp-headerimage\"\r\n    private String headerBorderColor;   //\"cpp-header-border-color\";\r\n    private String headerBackColor;     //\"cpp-header-back-color\";\r\n    private String payFlowColor;        //\"cpp-payflow-color\";\r\n    private String billingType;\r\n    private String ba_Desc;\r\n    private String paymentType;\r\n    private String ba_Custom;\r\n    private String shiptoName;\r\n    private String allowNote;\r\n\r\n    // Transaction PayLater object. Has parameters like PromoCode, ProductCategory, etc.\r\n    private PayLater payLater;\r\n\r\n    /**\r\n     * Constructor for ECSetRequest\r\n     *\r\n     * @param ReturnUrl - String\r\n     * @param CancelUrl - String\r\n     *                  <p/>\r\n     *                  ECSetRequest is used to set the data required for a Express Checkout SET operation.\r\n     *                  </p>\r\n     *  .............\r\n     * <p/>\r\n     * //Create the ECSetrequest object\r\n     * ECSetRequest setEC = new ECSetRequest(\"http://www.yourwebsitereturnurl.com\",\"http://www.yourwebsitecancelurl.com\");\r\n     * <p/>\r\n     * .............\r\n     * </code>\r\n     */\r\n    public ECSetRequest(String ReturnUrl, String CancelUrl) {\r\n        super(PayflowConstants.PARAM_ACTION_SET);\r\n        returnUrl = ReturnUrl;\r\n        cancelUrl = CancelUrl;\r\n    }\r\n\r\n    /**\r\n     * Constructor for ECSetRequest\r\n     *\r\n     * @param ReturnUrl - String\r\n     * @param CancelUrl - String\r\n     *                  <p/>\r\n     *                  ECSetRequest is used to set the data required for a Express Checkout SET operation.\r\n     *                  </p>\r\n     *  .............\r\n     * <p/>\r\n     * //Create the ECSetrequest object\r\n     * ECSetRequest setEC = new ECSetRequest(\"http://www.yourwebsitereturnurl.com\",\"http://www.yourwebsitecancelurl.com\");\r\n     * <p/>\r\n     * .............\r\n     * </code>\r\n     */\r\n    public ECSetRequest(String ReturnUrl, String CancelUrl, PayLater PayLater) {\r\n        super(PayflowConstants.PARAM_ACTION_SET);\r\n        returnUrl = ReturnUrl;\r\n        cancelUrl = CancelUrl;\r\n        payLater = PayLater;\r\n\r\n    }\r\n\r\n    /**\r\n     * Constructor for ECSetRequest\r\n     *\r\n     * @param ReturnUrl   - String\r\n     * @param CancelUrl   - String\r\n     * @param BillingType - String\r\n     * @param BA_Desc     - String\r\n     * @param PaymentType - String\r\n     * @param BA_Custom   - String\r\n     *                    <p/>\r\n     *                    <p/>\r\n     *                    ECSetRequest is used to set the data required for a Express Checkout SET operation for\r\n     *                    Reference Transactions with Purchase.\r\n     *                    </p>\r\n     *  .............\r\n     * <p/>\r\n     * //Create the ECSetrequest object\r\n     * ECSetRequest setEC = new ECSetRequest(\"http://www.yourwebsitereturnurl.com\",\"http://www.yourwebsitecancelurl.com\",\r\n     * \"MerchantInitiatedBilling\", \"Test Transaction\", \"any\", \"Something\");\r\n     * <p/>\r\n     * .............\r\n     * </code>\r\n     */\r\n    public ECSetRequest(String ReturnUrl, String CancelUrl, String BillingType, String BA_Desc, String PaymentType, String BA_Custom) {\r\n        super(PayflowConstants.PARAM_ACTION_SET);\r\n        returnUrl = ReturnUrl;\r\n        cancelUrl = CancelUrl;\r\n        billingType = BillingType;\r\n        ba_Desc = BA_Desc;\r\n        paymentType = PaymentType;\r\n        ba_Custom = BA_Custom;\r\n\r\n    }\r\n\r\n    protected ECSetRequest(String ReturnUrl, String CancelUrl, String BillingType, String BA_Desc, String PaymentType, String BA_Custom, String Action) {\r\n        super(PayflowConstants.PARAM_ACTION_SETBA);\r\n        returnUrl = ReturnUrl;\r\n        cancelUrl = CancelUrl;\r\n        billingType = BillingType;\r\n        ba_Desc = BA_Desc;\r\n        paymentType = PaymentType;\r\n        ba_Custom = BA_Custom;\r\n    }\r\n\r\n    /**\r\n     * Gets the returnurl parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RETURNURL\r\n     */\r\n    public String getReturnUrl() {\r\n        return returnUrl;\r\n    }\r\n\r\n    /**\r\n     * Sets the Returnurl parameter.\r\n     *\r\n     * @param returnUrl - String\r\n     *  <p>Maps to Payflow Parameter: RETURNURL\r\n     */\r\n\r\n    public void setReturnUrl(String returnUrl) {\r\n        this.returnUrl = returnUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets the cancelUrl parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: CANCELURL\r\n     */\r\n    public String getCancelUrl() {\r\n        return cancelUrl;\r\n    }\r\n\r\n    /**\r\n     * Sets the cancelUrl parameter.\r\n     *\r\n     * @param cancelUrl - String\r\n     *  <p>Maps to Payflow Parameter: CANCELURL\r\n     */\r\n\r\n    public void setCancelUrl(String cancelUrl) {\r\n        this.cancelUrl = cancelUrl;\r\n    }\r\n\r\n    /**\r\n     * Gets the reqConfirmShipping parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: REQCONFIRMSHIPPING\r\n     */\r\n    public String getReqConfirmShipping() {\r\n        return reqConfirmShipping;\r\n    }\r\n\r\n    /**\r\n     * Sets the reqBillingAddress parameter.\r\n     *\r\n     * @param reqBillingAddress - String\r\n     *  <p>Maps to Payflow Parameter: REQBILLNGADDRESS\r\n     */\r\n\r\n    public void setReqBillingAddress(String reqBillingAddress) {\r\n        this.reqBillingAddress = reqBillingAddress;\r\n    }\r\n\r\n    /**\r\n     * Gets the reqBillingAddress parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: REQBILLNGADDRESS\r\n     */\r\n    public String getReqBillingAddress() {\r\n        return reqBillingAddress;\r\n    }\r\n\r\n    /**\r\n     * Sets the reqConfirmShipping parameter.\r\n     *\r\n     * @param reqConfirmShipping - String\r\n     *  <p>Maps to Payflow Parameter: REQCONFIRMSHIPPING\r\n     */\r\n\r\n    public void setReqConfirmShipping(String reqConfirmShipping) {\r\n        this.reqConfirmShipping = reqConfirmShipping;\r\n    }\r\n\r\n    /**\r\n     * Gets the noShipping parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: NOSHIPPING\r\n     */\r\n    public String getNoShipping() {\r\n        return noShipping;\r\n    }\r\n\r\n    /**\r\n     * Sets the noShipping parameter.\r\n     *\r\n     * @param noShipping - String\r\n     *  <p>Maps to Payflow Parameter: NOSHIPPING\r\n     */\r\n\r\n    public void setNoShipping(String noShipping) {\r\n        this.noShipping = noShipping;\r\n    }\r\n\r\n    /**\r\n     * Gets the addrOverride parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ADDOVERRIDE\r\n     */\r\n    public String getAddrOverride() {\r\n        return addrOverride;\r\n    }\r\n\r\n    /**\r\n     * Sets the addrOverride parameter.\r\n     *\r\n     * @param addrOverride - String\r\n     *  <p>Maps to Payflow Parameter: ADDROVERRIDE\r\n     */\r\n\r\n    public void setAddrOverride(String addrOverride) {\r\n        this.addrOverride = addrOverride;\r\n    }\r\n\r\n    /**\r\n     * Gets the localecode parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: LOCALECODE\r\n     */\r\n    public String getLocalecode() {\r\n        return localecode;\r\n    }\r\n\r\n    /**\r\n     * Sets the localecode parameter.\r\n     *\r\n     * @param localecode - String\r\n     *  <p>Maps to Payflow Parameter: LOCALECODE\r\n     */\r\n\r\n    public void setLocalecode(String localecode) {\r\n        this.localecode = localecode;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxAmt parameter.\r\n     *\r\n     * @return - currency\r\n     *  <p>Maps to Payflow Parameter: MAXAMT\r\n     */\r\n    public Currency getMaxAmt() {\r\n        return maxAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the maxAmt parameter.\r\n     *\r\n     * @param maxAmt - Currency\r\n     *  <p>Maps to Payflow Parameter: MAXAMT\r\n     */\r\n\r\n    public void setMaxAmt(Currency maxAmt) {\r\n        this.maxAmt = maxAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the pageStyle parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAGESTYLE\r\n     */\r\n    public String getPageStyle() {\r\n        return pageStyle;\r\n    }\r\n\r\n    /**\r\n     * Sets the pageStyle parameter.\r\n     *\r\n     * @param pageStyle - String\r\n     *  <p>Maps to Payflow Parameter: PAGESTYLE\r\n     */\r\n\r\n    public void setPageStyle(String pageStyle) {\r\n        this.pageStyle = pageStyle;\r\n    }\r\n\r\n    /**\r\n     * Gets the HeaderImg parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: HDRIMG\r\n     */\r\n    public String getHeaderImg() {\r\n        return headerImg;\r\n    }\r\n\r\n    /**\r\n     * Sets the HeaderImg parameter.\r\n     *\r\n     * @param headerImg - String\r\n     *  <p>Maps to Payflow Parameter: HDRIMG\r\n     */\r\n\r\n    public void setHeaderImg(String headerImg) {\r\n        this.headerImg = headerImg;\r\n    }\r\n\r\n    /**\r\n     * Gets the headerBorderColor parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: HDRBORDERCOLOR\r\n     */\r\n    public String getHeaderBorderColor() {\r\n        return headerBorderColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the headerBorderColor parameter.\r\n     *\r\n     * @param headerBorderColor - String\r\n     *  <p>Maps to Payflow Parameter: HDRBORDERCOLOR\r\n     */\r\n\r\n    public void setHeaderBorderColor(String headerBorderColor) {\r\n        this.headerBorderColor = headerBorderColor;\r\n    }\r\n\r\n    /**\r\n     * Gets the headerBackColor parameter.\r\n     *\r\n     * @return - headerBackColor String\r\n     *  <p>Maps to Payflow Parameter: HDRBACKCOLOR\r\n     */\r\n    public String getHeaderBackColor() {\r\n        return headerBackColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the headerBackColor parameter.\r\n     *\r\n     * @param headerBackColor - String\r\n     *  <p>Maps to Payflow Parameter: HDRBACKCOLOR\r\n     */\r\n\r\n    public void setHeaderBackColor(String headerBackColor) {\r\n        this.headerBackColor = headerBackColor;\r\n    }\r\n\r\n    /**\r\n     * Gets the payFlowColor parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYFLOWCOLOR\r\n     */\r\n    public String getPayFlowColor() {\r\n        return payFlowColor;\r\n    }\r\n\r\n    /**\r\n     * Sets the payFlowColor parameter.\r\n     *\r\n     * @param payFlowColor - String\r\n     *  <p>Maps to Payflow Parameter: PAYFLOWCOLOR\r\n     */\r\n\r\n    public void setPayFlowColor(String payFlowColor) {\r\n        this.payFlowColor = payFlowColor;\r\n    }\r\n\r\n    /**\r\n     * Gets the paymentType parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BA_CUSTOM\r\n     */\r\n    public String getba_Custom() {\r\n        return ba_Custom;\r\n    }\r\n\r\n    /**\r\n     * Sets the paymentType parameter.\r\n     *\r\n     * @param ba_Custom - String\r\n     *  <p>Maps to Payflow Parameter: BA_CUSTOM\r\n     */\r\n    public void setba_Custom(String ba_Custom) {\r\n        this.ba_Custom = ba_Custom;\r\n    }\r\n\r\n    /**\r\n     * Gets the paymentType parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTTYPE\r\n     */\r\n    public String getpaymentType() {\r\n        return paymentType;\r\n    }\r\n\r\n    /**\r\n     * Sets the paymentType parameter.\r\n     *\r\n     * @param paymentType - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTTYPE\r\n     */\r\n    public void setpaymentType(String paymentType) {\r\n        this.paymentType = paymentType;\r\n    }\r\n\r\n    /**\r\n     * Gets the ba_Desc parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: BA_DESC\r\n     */\r\n    public String getba_Desc() {\r\n        return ba_Desc;\r\n    }\r\n\r\n    /**\r\n     * Sets the billingType parameter.\r\n     *\r\n     * @param ba_Desc - String\r\n     *  <p>Maps to Payflow Parameter: BA_DESC\r\n     */\r\n    public void setba_Desc(String ba_Desc) {\r\n        this.ba_Desc = ba_Desc;\r\n    }\r\n\r\n    /**\r\n     * Gets the noShipping parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: NOSHIPPING\r\n     */\r\n    public String getbillingType() {\r\n        return billingType;\r\n    }\r\n\r\n    /**\r\n     * Sets the billingType parameter.\r\n     *\r\n     * @param billingType - String\r\n     *  <p>Maps to Payflow Parameter: BILLINGTYPE\r\n     */\r\n    public void setbillingType(String billingType) {\r\n        this.billingType = billingType;\r\n    }\r\n\r\n    /**\r\n     * Gets the shiptoName parameter.\r\n     *\r\n     * @return - string\r\n     *  <p>Maps to Payflow Parameter: SHIPTONAME\r\n     */\r\n    public String getshiptoName() {\r\n        return shiptoName;\r\n    }\r\n\r\n    /**\r\n     * Sets the shiptoName parameter.\r\n     *\r\n     * @param shiptoName - String\r\n     *  <p>Maps to Payflow Parameter: SHIPTONAME\r\n     */\r\n\r\n    public void setshiptoName(String shiptoName) {\r\n        this.shiptoName = shiptoName;\r\n    }\r\n\r\n        /**\r\n     * Gets the allowNote parameter.\r\n     *\r\n     * @return - string\r\n     *  <p>Maps to Payflow Parameter: ALLOWNOTE\r\n     */\r\n    public String getallowNote() {\r\n        return allowNote;\r\n    }\r\n\r\n    /**\r\n     * Sets the allowNote parameter.\r\n     *\r\n     * @param allowNote - String\r\n     *  <p>Maps to Payflow Parameter: ALLOWNOTE\r\n     */\r\n\r\n    public void setallowNote(String allowNote) {\r\n        this.allowNote = allowNote;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        // This function is not called. All the\r\n        //address information is validated and generated\r\n        //in its respective derived classes.\r\n        super.generateRequest();\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_RETURNURL, returnUrl));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CANCELURL, cancelUrl));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_REQCONFIRMSHIPPING, reqConfirmShipping));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_REQBILLINGADDRESS, reqBillingAddress));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_NOSHIPPING, noShipping));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_LOCALECODE, localecode));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MAXAMT, maxAmt));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAGESTYLE, pageStyle));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_HDRIMG, headerImg));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_HDRBORDERCOLOR, headerBorderColor));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_HDRBACKCOLOR, headerBackColor));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAYFLOWCOLOR, payFlowColor));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BILLINGTYPE, billingType));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BA_DESC, ba_Desc));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAYMENTTYPE, paymentType));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BA_CUSTOM, ba_Custom));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ADDROVERRIDE, addrOverride));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SHIPTONAME, shiptoName));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ALLOWNOTE, allowNote));\r\n\r\n        if (payLater != null) {\r\n            payLater.setRequestBuffer(getRequestBuffer());\r\n            payLater.generateRequest();\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ECSetRequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ECSetRequest.java	(date 1600058684685)
@@ -35,14 +35,12 @@
      *
      * @param ReturnUrl - String
      * @param CancelUrl - String
-     *                  <p/>
-     *                  ECSetRequest is used to set the data required for a Express Checkout SET operation.
-     *                  </p>
-     *  .............
-     * <p/>
-     * //Create the ECSetrequest object
+     * <p>
+     * ECSetRequest is used to set the data required for a Express Checkout SET operation.
+     * .............
+     * <code>
+     * //Create the ECSetRequest object
      * ECSetRequest setEC = new ECSetRequest("http://www.yourwebsitereturnurl.com","http://www.yourwebsitecancelurl.com");
-     * <p/>
      * .............
      * </code>
      */
@@ -57,14 +55,13 @@
      *
      * @param ReturnUrl - String
      * @param CancelUrl - String
-     *                  <p/>
-     *                  ECSetRequest is used to set the data required for a Express Checkout SET operation.
-     *                  </p>
-     *  .............
-     * <p/>
-     * //Create the ECSetrequest object
+     * @param PayLater - String
+     *
+     * ECSetRequest is used to set the data required for a Express Checkout SET operation.
+     * .............
+     * <code>
+     * //Create the ECSetRequest object
      * ECSetRequest setEC = new ECSetRequest("http://www.yourwebsitereturnurl.com","http://www.yourwebsitecancelurl.com");
-     * <p/>
      * .............
      * </code>
      */
@@ -85,17 +82,15 @@
      * @param BA_Desc     - String
      * @param PaymentType - String
      * @param BA_Custom   - String
-     *                    <p/>
-     *                    <p/>
-     *                    ECSetRequest is used to set the data required for a Express Checkout SET operation for
-     *                    Reference Transactions with Purchase.
-     *                    </p>
+     *
+     * ECSetRequest is used to set the data required for a Express Checkout SET operation for
+     * Reference Transactions with Purchase.
+     *
      *  .............
-     * <p/>
-     * //Create the ECSetrequest object
+     * <code>
+     * //Create the ECSetRequest object
      * ECSetRequest setEC = new ECSetRequest("http://www.yourwebsitereturnurl.com","http://www.yourwebsitecancelurl.com",
      * "MerchantInitiatedBilling", "Test Transaction", "any", "Something");
-     * <p/>
      * .............
      * </code>
      */
Index: src/sdk/base/paypal/payflow/PaymentState.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nabstract class PaymentState {\r\n    /**\r\n     * This is the default XMLPay namespace.\r\n     */\r\n    private String mDefaultXmlNameSpace;\r\n\r\n    /**\r\n     * Payflow XMLPay namespace.\r\n     */\r\n    private String mPayflowXmlNameSpace;\r\n\r\n    /**\r\n     * Param list content type.\r\n     */\r\n    private String mContentType;\r\n\r\n    /**\r\n     * Connection object.\r\n     */\r\n    protected PaymentConnection mConnection;\r\n\r\n    /**\r\n     * Parameter List.\r\n     */\r\n    protected String mParameterList;\r\n\r\n    /**\r\n     * Transaction Request.\r\n     */\r\n    private String mTransactionRequest;\r\n\r\n    /**\r\n     * Transaction Response.\r\n     */\r\n    private String mTransactionResponse;\r\n\r\n    /**\r\n     * Retry Attempt number.\r\n     */\r\n    protected int mAttemptNo;\r\n\r\n    /**\r\n     * In Progress flag.\r\n     */\r\n    private boolean mInProgress = true;\r\n\r\n    /**\r\n     * State executed flag.\r\n     */\r\n    private boolean mStateExecuted;\r\n\r\n    /**\r\n     * State Success flag.\r\n     */\r\n    private boolean mStateSucceeded;\r\n\r\n    /**\r\n     * Context object.\r\n     */\r\n    private Context mContext;\r\n\r\n    /**\r\n     * Gets the connection object.\r\n     *\r\n     * @return mConnection PaymentConnection\r\n     */\r\n    public PaymentConnection getConnection() {\r\n        return this.mConnection;\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the param list.\r\n     *\r\n     * @return Parameter\r\n     */\r\n    public String getParameterList() {\r\n        return this.mParameterList;\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets, Sets the transaction Request.\r\n     *\r\n     * @return transactionRequest String\r\n     */\r\n    public String getTransactionRequest() {\r\n        return this.mTransactionRequest;\r\n    }\r\n\r\n    /**\r\n     * @param value String\r\n     */\r\n    public void setTransactionRequest(String value) {\r\n        mTransactionRequest = value;\r\n    }\r\n\r\n    /**\r\n     * Gets, Sets the transaction response.\r\n     *\r\n     * @return mTransactionResponse String\r\n     */\r\n    public String getTransactionResponse() {\r\n        return this.mTransactionResponse;\r\n    }\r\n\r\n    /**\r\n     * @param value String\r\n     */\r\n    public void setTransactionResponse(String value) {\r\n        this.mTransactionResponse = value;\r\n    }\r\n\r\n    /**\r\n     * Gets the retry attempt no.\r\n     *\r\n     * @return attemptNo int\r\n     */\r\n    public int getAttemptNo() {\r\n        return this.mAttemptNo;\r\n    }\r\n\r\n    /**\r\n     * Gets the param list content type.\r\n     *\r\n     * @return contentType String\r\n     */\r\n    public String getContentType() {\r\n        return this.mContentType;\r\n    }\r\n\r\n    /**\r\n     * Gets the XmlPay Request type flag.\r\n     *\r\n     * @return isXmlPayRequest boolean\r\n     */\r\n    public boolean getIsXmlPayRequest() {\r\n        return mConnection.getIsXmlPayRequest();\r\n    }\r\n\r\n    /**\r\n     * Gets the Default Xml Namespace.\r\n     *\r\n     * @return defaultXmlNameSpace String\r\n     */\r\n    public String getDefaultXmlNameSpace() {\r\n        return this.mDefaultXmlNameSpace;\r\n    }\r\n\r\n    /**\r\n     * Gets the Context Object.\r\n     *\r\n     * @return commContext Context\r\n     */\r\n    public Context getCommContext() {\r\n        return mContext;\r\n    }\r\n\r\n    /**\r\n     * Gets Xml Name Space\r\n     *\r\n     * @return xmlNameSpace String\r\n     */\r\n    public String getXmlNameSpace() {\r\n        return this.mPayflowXmlNameSpace;\r\n    }\r\n\r\n    /**\r\n     * Checks if Response is obtained.\r\n     *\r\n     * @return hasResponse boolean\r\n     */\r\n    public boolean getHasResponse() {\r\n        return (this.mTransactionResponse != null);\r\n    }\r\n\r\n    /**\r\n     * Indicates if transaction is in progress.\r\n     *\r\n     * @return inProgress boolean\r\n     */\r\n    public boolean getInProgress() {\r\n        return this.mInProgress;\r\n    }\r\n\r\n    /**\r\n     * Indicates current state success.\r\n     * This indicates whether the current state has succeeded.\r\n     * True indicates succeeded, false otherwise.\r\n     *\r\n     * @return success boolean\r\n     */\r\n    public boolean getSuccess() {\r\n        return (this.mStateExecuted && this.mStateSucceeded);\r\n    }\r\n\r\n    /**\r\n     * Current state failure.\r\n     * This indicates whether the current state has failed.\r\n     * True indicates failed, false otherwise.\r\n     *\r\n     * @return mStateExecuted boolean\r\n     */\r\n    public boolean getFailed() {\r\n        return (this.mStateExecuted && !this.mStateSucceeded);\r\n    }\r\n\r\n    /**\r\n     * Returns state executed.\r\n     *\r\n     * @return stateExecuted boolean\r\n     */\r\n    public boolean getHasExecuted() {\r\n        return this.mStateExecuted;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    protected PaymentState() {\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.PaymentState(): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        mDefaultXmlNameSpace = PayflowConstants.XMLPAY_NAMESPACE;\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.PaymentState(): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * @param connection PaymentConnection\r\n     * @param paramList  String\r\n     * @param psmContext Context\r\n     * @throws Exception Exception\r\n     */\r\n    public PaymentState(PaymentConnection connection, String paramList, Context psmContext) throws Exception {\r\n        this();\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.PaymentState(PaymentConnection,String,Context): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n\r\n        mContext = psmContext;\r\n        mConnection = connection;\r\n\r\n        initializeContentType(paramList);\r\n\r\n        if (mContext.getHighestErrorLvl() < PayflowConstants.SEVERITY_FATAL) {\r\n            mConnection.setContentType(mContentType);\r\n\r\n            if (paramList == null || paramList.length() == 0) {\r\n                ErrorObject Err = PayflowUtility.populateCommError(PayflowConstants.E_EMPTY_PARAM_LIST, null, PayflowConstants.SEVERITY_FATAL,\r\n                        getIsXmlPayRequest(), null);\r\n                mContext.addError(Err);\r\n            }\r\n            this.mTransactionRequest = paramList;\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.PaymentState(PaymentConnection,String,Context): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Copy Constructor\r\n     *\r\n     * @param currentPmtState PaymentState\r\n     */\r\n    public PaymentState(PaymentState currentPmtState) {\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.PaymentState(PaymentState ) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n\r\n        mDefaultXmlNameSpace = PayflowConstants.XMLPAY_NAMESPACE;\r\n        this.mConnection = currentPmtState.getConnection();\r\n        this.mParameterList = currentPmtState.getParameterList();\r\n        this.mTransactionRequest = currentPmtState.getTransactionRequest();\r\n        this.mTransactionResponse = currentPmtState.getTransactionResponse();\r\n        this.mConnection.setRequestId(currentPmtState.mConnection.getRequestId());\r\n        this.mConnection.setIsXmlPayRequest(currentPmtState.mConnection.getIsXmlPayRequest());\r\n        this.mAttemptNo = currentPmtState.getAttemptNo();\r\n        /*\r\n\t\t\tif (mAttemptNo > 0)\r\n\t\t\t{\r\n\t\t\t\ttry {\r\n\t\t\t\t\tthis.wait(PayflowConstants.RETRY_DELAY);\r\n\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\t// interrupted :: just continue do nothing.\r\n\t\t\t\t}\r\n\t\t\t}*/\r\n        this.mDefaultXmlNameSpace = currentPmtState.mDefaultXmlNameSpace;\r\n        this.mPayflowXmlNameSpace = currentPmtState.getXmlNameSpace();\r\n\r\n        this.mContentType = currentPmtState.getContentType();\r\n        this.mContext = currentPmtState.getCommContext();\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.PaymentState(PaymentState ) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Initializes the Content Type of the Request.\r\n     *\r\n     * @param initialParamList String\r\n     * @throws Exception Exception\r\n     */\r\n    private void initializeContentType(String initialParamList) throws Exception {\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.InitializeContentType(String): Entered\",\r\n                PayflowConstants.SEVERITY_DEBUG);\r\n\r\n        if (initialParamList != null) {\r\n            int index = initialParamList.indexOf(PayflowConstants.XML_ID);\r\n            if (index >= 0) {\r\n                mConnection.setIsXmlPayRequest(true);\r\n                mContentType = PayflowConstants.XML_CONTENT_TYPE;\r\n                mPayflowXmlNameSpace = PayflowUtility.getXmlNameSpace(initialParamList);\r\n            } else {\r\n                mConnection.setIsXmlPayRequest(false);\r\n                mContentType = PayflowConstants.NV_CONTENT_TYPE;\r\n            }\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.InitializeContentType(String): ContentType = \" + mContentType,\r\n                PayflowConstants.SEVERITY_INFO);\r\n        Logger.getInstance().log(\"paypal.payflow.PaymentState.InitializeContentType(String): Exiting\",\r\n                PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Sets the transaction complete flag.\r\n     */\r\n    public void setProgressComplete() {\r\n        this.mInProgress = false;\r\n    }\r\n\r\n    /**\r\n     * Sets transaction successful.\r\n     */\r\n    public void setTransactionSuccess() {\r\n        this.setProgressComplete();\r\n    }\r\n\r\n    /**\r\n     * Sets transaction failed.\r\n     *\r\n     * @param value String\r\n     */\r\n    public void setTransactionFail(String value) {\r\n        mTransactionResponse = value;\r\n        this.setProgressComplete();\r\n    }\r\n\r\n    /**\r\n     * Sets the state success.\r\n     */\r\n    public void setStateSuccess() {\r\n        setStateOutCome(true);\r\n    }\r\n\r\n    /**\r\n     * Sets state outcome.\r\n     *\r\n     * @param value boolean\r\n     */\r\n    private void setStateOutCome(boolean value) {\r\n        mStateExecuted = true;\r\n        mStateSucceeded = value;\r\n    }\r\n\r\n    /**\r\n     * Sets the state failed.\r\n     */\r\n    public void setStateFail() {\r\n        setStateOutCome(false);\r\n    }\r\n\r\n    /**\r\n     * Abstract function declaration\r\n     * of Execute.\r\n     * <p/>\r\n     * This is the abstract method definition of Execute. The Execute method\r\n     * acts as the main important method in these payment state hierarchy. this method is overridden as\r\n     * per the requirements in the derived classes.\r\n     */\r\n    public abstract void execute();\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/base/paypal/payflow/PaymentState.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/base/paypal/payflow/PaymentState.java	(date 1600056997632)
@@ -364,7 +364,7 @@
     /**
      * Abstract function declaration
      * of Execute.
-     * <p/>
+     *  * <p>
      * This is the abstract method definition of Execute. The Execute method
      * acts as the main important method in these payment state hierarchy. this method is overridden as
      * per the requirements in the derived classes.
Index: src/sdk/dataobjects/paypal/payflow/Response.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*\r\n * This program is free software: you can redistribute it and/or modify\r\n * it under the terms of the GNU General Public License as published by\r\n * the Free Software Foundation, either version 3 of the License, or\r\n * (at your option) any later version.\r\n *\r\n * This program is distributed in the hope that it will be useful,\r\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n * GNU General Public License for more details.\r\n *\r\n * You should have received a copy of the GNU General Public License\r\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\r\n */\r\n\r\npackage paypal.payflow;\r\n\r\nimport paypal.payflow.ECGetResponse;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Enumeration;\r\nimport java.util.Hashtable;\r\n\r\n/**\r\n * Container class for response messages.\r\n * <p>This class enclosed response data objects specific to\r\n * following:\r\n * <ol>\r\n * <li>Transaction response\r\n * --> Response messages common to all transactions.</li>\r\n * <li>Fraud response\r\n * --> Fraud Filters response messages.</li>\r\n * <li>Recurring response\r\n * --> Recurring transaction response messages.</li>\r\n * <li>Buyerauth response\r\n * --> Buyer auth response messages. (Not supported.)</li>\r\n * </ol>\r\n * <p>Additionally the Response class also contains the\r\n * transaction context, full request response string values.</p>\r\n * {@link FraudResponse}\r\n * {@link TransactionResponse}\r\n * {@link RecurringResponse}\r\n * {@link BuyerAuthResponse}\r\n * {@link Context}\r\n * </p>\r\n * Following example shows, how to obtain response\r\n * of a transaction and how to use it.\r\n *\r\n *  ..........\r\n * // Trans is the transaction object.\r\n * *\t\t...................\r\n * // Submit the transaction.\r\n * Response resp = trans.SubmitTransaction();\r\n * <p/>\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse!= null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.Result);\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.RespMsg);\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println( \"Errors = \" + ctx());\r\n * }\r\n */\r\npublic final class Response extends BaseResponseDataObject {\r\n\r\n    private FraudResponse fraudResponse;\r\n    private BuyerAuthResponse buyerAuthResponse;\r\n    private RecurringResponse recurringResponse;\r\n    private ECDoResponse ecDoResponse;\r\n    private TransactionResponse transactionResponse;\r\n    private Context context;\r\n    private Hashtable responseHashTable;\r\n    private ArrayList extDataList;\r\n    private String requestString;\r\n    private String responseString;\r\n    private String requestId;\r\n    private ECGetResponse ecGetResponse;\r\n    private ExpressCheckoutResponse ecSetResponse;\r\n    private ECUpdateResponse ecUpdateResponse;\r\n\r\n    /**\r\n     * Gets the container object for all the fraud filters\r\n     * related response messages.\r\n     * {@link FraudResponse}\r\n     *\r\n     * @return - FraudResponse\r\n     */\r\n    public FraudResponse getFraudResponse() {\r\n        return fraudResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the container object for all the express\r\n     * checkout related response messages for GET.\r\n     * {@link ECGetResponse}\r\n     *\r\n     * @return - ECGetResponse\r\n     */\r\n    public ECGetResponse getEcGetResponse() {\r\n        return ecGetResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the container object for all the express\r\n     * checkout related response messages for SET.\r\n     * {@link ExpressCheckoutResponse}\r\n     *\r\n     * @return - ExpressCheckoutResponse\r\n     */\r\n    public ExpressCheckoutResponse getEcSetResponse() {\r\n        return ecSetResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the container object for all the express\r\n     * checkout related response messages for SET.\r\n     * {@link ExpressCheckoutResponse}\r\n     *\r\n     * @return - ExpressCheckoutResponse\r\n     */\r\n    public ECUpdateResponse getEcUpdateResponse() {\r\n        return ecUpdateResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the container object for all the buyer auth\r\n     * related response messages.\r\n     * {@link BuyerAuthResponse}\r\n     *\r\n     * @return - BuyerAuthResponse\r\n     */\r\n    public BuyerAuthResponse getBuyerAuthResponse() {\r\n        return buyerAuthResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the container object for all the recurring\r\n     * transaction related response messages.\r\n     * {@link RecurringResponse}\r\n     *\r\n     * @return - RecurringResponse\r\n     */\r\n    public RecurringResponse getRecurringResponse() {\r\n        return recurringResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the container object for all the express\r\n     * checkout related response messages for DO.\r\n     * {@link ECDoResponse}\r\n     *\r\n     * @return - ECDoResponse\r\n     */\r\n    public ECDoResponse getEcDoResponse() {\r\n        return ecDoResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the container object for response messages common to\r\n     * all the transactions.\r\n     * {@link TransactionResponse}\r\n     *\r\n     * @return - TransactionResponse\r\n     */\r\n    public TransactionResponse getTransactionResponse() {\r\n        return transactionResponse;\r\n    }\r\n\r\n    /**\r\n     * Gets the transaction context\r\n     * populated with errors, if any.\r\n     * {@link Context}\r\n     *\r\n     * @return - Context\r\n     */\r\n    public Context getContext() {\r\n        return context;\r\n    }\r\n\r\n    /**\r\n     * Gets the The arraylist containing the extend data objects populated\r\n     * with the response messages..\r\n     * {@link ExtendData}\r\n     *\r\n     * @return - ArrayList\r\n     */\r\n    public ArrayList getExtDataList() {\r\n        return extDataList;\r\n    }\r\n\r\n    /**\r\n     * Gets the request string sent to the gateway.\r\n     *\r\n     * @return - String\r\n     */\r\n    public String getRequestString() {\r\n        return requestString;\r\n    }\r\n\r\n    /**\r\n     * Gets the response string.\r\n     *\r\n     * @return - String\r\n     */\r\n    public String getResponseString() {\r\n        return responseString;\r\n    }\r\n\r\n    /**\r\n     * Gets the request id sent to the gateway.\r\n     *\r\n     * @return - String\r\n     */\r\n    public String getRequestId() {\r\n        return requestId;\r\n    }\r\n\r\n    protected void setRequestString(String RequestString) {\r\n        requestString = RequestString;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public Response() {\r\n        context = new Context();\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param RequestId  String\r\n     * @param TrxContext String\r\n     */\r\n    public Response(String RequestId, Context TrxContext) {\r\n        context = TrxContext;\r\n        requestId = RequestId;\r\n    }\r\n\r\n    /**\r\n     * @param Response String\r\n     */\r\n    private void parseResponse(String Response) {\r\n        Context respContext;\r\n        respContext = new Context();\r\n        if (respContext.getHighestErrorLvl() == PayflowConstants.SEVERITY_FATAL) {\r\n\r\n            String Result = PayflowUtility.locateValueForName(Response, PayflowConstants.PARAM_RESULT, false);\r\n            String RespMsg = PayflowUtility.locateValueForName(Response, PayflowConstants.PARAM_RESPMSG, false);\r\n            if (responseHashTable == null) {\r\n                responseHashTable = new Hashtable();\r\n            }\r\n\r\n            responseHashTable.put(PayflowConstants.INTL_PARAM_FULLRESPONSE, responseString);\r\n            responseHashTable.put(PayflowConstants.PARAM_RESULT, Result);\r\n            responseHashTable.put(PayflowConstants.PARAM_RESPMSG, RespMsg);\r\n\r\n\r\n        } else {\r\n            responseHashTable = ParameterListValidator.parseNVPList(Response, respContext, true);\r\n            if (responseHashTable != null) {\r\n                responseHashTable.put(PayflowConstants.INTL_PARAM_FULLRESPONSE, Response);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private void setResultParams() {\r\n        transactionResponse = new TransactionResponse();\r\n        transactionResponse.setParams(responseHashTable);\r\n    }\r\n\r\n\r\n    private void setBuyerAuthResultParams() {\r\n        buyerAuthResponse = new BuyerAuthResponse();\r\n        buyerAuthResponse.setParams(responseHashTable);\r\n    }\r\n\r\n\r\n    private void setRecurringResultParams() {\r\n        recurringResponse = new RecurringResponse();\r\n        recurringResponse.setParams(responseHashTable);\r\n    }\r\n\r\n    private void setFraudResultParams() {\r\n        fraudResponse = new FraudResponse();\r\n        fraudResponse.setContext(context);\r\n        fraudResponse.setParams(responseHashTable);\r\n    }\r\n\r\n    private void setECGetResultParams() {\r\n        ecGetResponse = new ECGetResponse();\r\n        ecGetResponse.setParams(responseHashTable);\r\n    }\r\n\r\n    private void setECDoResultParms() {\r\n        ecDoResponse = new ECDoResponse();\r\n        ecDoResponse.setParams(responseHashTable);\r\n    }\r\n\r\n    private void setECUpdateResultParams() {\r\n        ecUpdateResponse = new ECUpdateResponse();\r\n        ecUpdateResponse.setParams(responseHashTable);\r\n    }\r\n\r\n    private void setECSetResultParams() {\r\n        ecSetResponse = new ExpressCheckoutResponse();\r\n        ecSetResponse.setParams(responseHashTable);\r\n    }\r\n\r\n    private void setResponseDataObjects() {\r\n        this.setResultParams();\r\n        this.setFraudResultParams();\r\n        this.setBuyerAuthResultParams();\r\n        String TrxType = PayflowUtility.locateValueForName(requestString,\r\n                PayflowConstants.PARAM_TRXTYPE, false);\r\n\r\n        if (PayflowConstants.TRXTYPE_RECURRING.equals(TrxType)) {\r\n            this.setRecurringResultParams();\r\n        } else {\r\n            this.setECDoResultParms();\r\n            this.setECGetResultParams();\r\n            this.setECSetResultParams();\r\n            this.setECUpdateResultParams();\r\n        }\r\n        this.setExtDataList();\r\n        responseHashTable = null;\r\n    }\r\n\r\n    /**\r\n     * @param Response String\r\n     */\r\n    protected void setParams(String Response) {\r\n        try {\r\n            responseString = Response;\r\n            if (Response != null) {\r\n                int ResultIndex = Response.indexOf(PayflowConstants.PARAM_RESULT);\r\n                if (ResultIndex >= 0) {\r\n                    if (ResultIndex > 0) {\r\n                        Response = Response.substring(ResultIndex);\r\n                    }\r\n                    this.parseResponse(Response);\r\n                    this.setResponseDataObjects();\r\n                } else {\r\n                    // Append the RESULT and RESPMSG for error code E_UNKNOWN_STATE and create a message.\r\n                    // Call SetParams again on it.\r\n                    String responseValue = PayflowConstants.PARAM_RESULT\r\n                            + PayflowConstants.SEPARATOR_NVP\r\n                            + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_UNKNOWN_STATE)\r\n                            + PayflowConstants.DELIMITER_NVP\r\n                            + PayflowConstants.PARAM_RESPMSG\r\n                            + PayflowConstants.SEPARATOR_NVP\r\n                            + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_UNKNOWN_STATE)\r\n                            + \", \" + responseString;\r\n                    this.setParams(responseValue);\r\n                }\r\n            } else {\r\n                String AddlMessage = \"Empty response\";\r\n                ErrorObject Err = PayflowUtility.populateCommError(PayflowConstants.E_EMPTY_PARAM_LIST, null, PayflowConstants.SEVERITY_WARN, false, AddlMessage);\r\n                context.addError(Err);\r\n                Err = context.getError(context.getErrorCount() - 1);\r\n                String ResponseValue = Err.toString();\r\n                this.setParams(ResponseValue);\r\n            }\r\n        } catch (Exception Ex) {\r\n            ErrorObject Error = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, Ex, PayflowConstants.SEVERITY_ERROR, false, null);\r\n            context.addError(Error);\r\n            String ResponseValue = Error.toString();\r\n            this.setParams(ResponseValue);\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    private void setExtDataList() {\r\n        ExtendData ExtData;\r\n        String Name;\r\n        String Value;\r\n        if (responseHashTable == null || responseHashTable.size() == 0) {\r\n            extDataList = null;\r\n        } else {\r\n            extDataList = new ArrayList();\r\n\r\n            Enumeration respKeys = responseHashTable.keys();\r\n\r\n            while (respKeys.hasMoreElements()) {\r\n                Name = (String) respKeys.nextElement();\r\n                Value = (String) responseHashTable.get(Name);\r\n                int DuplicateKeyIndex = Name.indexOf(PayflowConstants.TAG_DUPLICATE);\r\n                if (DuplicateKeyIndex > 0) {\r\n                    Name = Name.substring(0, DuplicateKeyIndex - 1);\r\n                }\r\n                if (Name.startsWith(PayflowConstants.PREFIX_RECURRING_INQUIRY_RESP)) {\r\n                    recurringResponse.getInquiryParams().put(Name, Value);\r\n                } else {\r\n                    ExtData = new ExtendData(Name, Value);\r\n                    extDataList.add(ExtData);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/Response.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/Response.java	(date 1600062691825)
@@ -22,18 +22,19 @@
 import java.util.Hashtable;
 
 /**
+ * <pre>{@code
  * Container class for response messages.
- * <p>This class enclosed response data objects specific to
+ * This class enclosed response data objects specific to
  * following:
  * <ol>
  * <li>Transaction response
- * --> Response messages common to all transactions.</li>
+ * -- Response messages common to all transactions.</li>
  * <li>Fraud response
- * --> Fraud Filters response messages.</li>
+ * -- Fraud Filters response messages.</li>
  * <li>Recurring response
- * --> Recurring transaction response messages.</li>
+ * -- Recurring transaction response messages.</li>
  * <li>Buyerauth response
- * --> Buyer auth response messages. (Not supported.)</li>
+ * -- Buyer auth response messages. (Not supported.)</li>
  * </ol>
  * <p>Additionally the Response class also contains the
  * transaction context, full request response string values.</p>
@@ -42,7 +43,7 @@
  * {@link RecurringResponse}
  * {@link BuyerAuthResponse}
  * {@link Context}
- * </p>
+ *
  * Following example shows, how to obtain response
  * of a transaction and how to use it.
  *
@@ -51,7 +52,7 @@
  * *		...................
  * // Submit the transaction.
  * Response resp = trans.SubmitTransaction();
- * <p/>
+ *  * <p>
  * if (resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -61,7 +62,7 @@
  * System.out.println("RESULT = " + trxnResponse.Result);
  * System.out.println("RESPMSG = " + trxnResponse.RespMsg);
  * }
- * <p/>
+ *  * <p>
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -70,13 +71,15 @@
  * System.out.println("PROFILEID = " + recurResponse.getProfileId());
  * }
  * }
- * <p/>
+ *  * <p>
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println( "Errors = " + ctx());
  * }
+ * }
+ * </pre>
  */
 public final class Response extends BaseResponseDataObject {
 
Index: src/sdk/base/paypal/payflow/Logger.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.io.OutputStream;\r\nimport java.io.PrintStream;\r\nimport java.util.ArrayList;\r\nimport java.util.Calendar;\r\nimport java.util.HashMap;\r\nimport java.util.TimeZone;\r\n\r\n/**\r\n * This is a singleton class which can be used for logging of the messages.\r\n * The logger will log all the messages to the file specified in the SDKproperties class.\r\n * By default the logging will be switched to OFF.\r\n */\r\npublic final class Logger {\r\n\r\n    // Allow requestId to be non-static in BaseTransaction for multi-threading.\r\n    //BaseTransaction bt = new BaseTransaction();\r\n    //String rid = bt.getRequestId();\r\n\r\n    /**\r\n     * This SortedList holds the Message code,Body and severity level of the messages\r\n     * mentioned in the XML file.\r\n     */\r\n    private HashMap mMessages;\r\n\r\n    /**\r\n     * Holds the instance of this singleton class.\r\n     */\r\n    private static Logger mInstance;\r\n\r\n    /**\r\n     * Holds the errors generated by Logger class.\r\n     */\r\n    private ArrayList mLoggerErrs = new ArrayList();\r\n\r\n    /**\r\n     * This flag indicates, if an error occurred because of the Logger class.\r\n     */\r\n    private boolean errInLogger = false;\r\n\r\n    /**\r\n     * This char is used in the rolling file functionality\r\n     */\r\n    private static final char archiveFileSeparator = '_';\r\n\r\n    /**\r\n     * the sdf format is appended to messages.\r\n     */\r\n    private java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(\"yyyy-MM-dd H:mm:ss z\");\r\n\r\n    /**\r\n     * OutputStream object for this logger\r\n     */\r\n    private OutputStream os = null;\r\n\r\n    /**\r\n     * PrintStream object for this logger\r\n     */\r\n    private PrintStream out = null;\r\n\r\n    private long logFileLength = 0;\r\n\r\n    /**\r\n     * This private constructor reads the config file for the name of file which contains the\r\n     * error messages.After getting the name it loads the static member \"mMessages\" with\r\n     * the messages mentioned in the file.It also initializes the Log4net instance which\r\n     * will is used for logging.If the path for the log4net API is not available in the config\r\n     * file, logging is not done.\r\n     */\r\n    private Logger() {\r\n        populateMessages();\r\n        if (!(SDKProperties.getLoggingLevel() >= PayflowConstants.LOGGING_OFF)) {\r\n            if (!SDKProperties.isLogFileNameSet()) {\r\n                String respMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_INIT_ERROR)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_INIT_ERROR)\r\n                        + \"log file name not set. Using default values\";\r\n                ErrorObject err =\r\n                        new ErrorObject(PayflowConstants.SEVERITY_WARN, PayflowConstants.EMPTY_STRING,\r\n                                respMessage);\r\n                mLoggerErrs.add(err);\r\n                //errInLogger will not be set since logging must still happen.\r\n\r\n            }\r\n            if (!SDKProperties.isMaxlogFileSizeSet()) {\r\n                String respMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_INIT_ERROR)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_INIT_ERROR)\r\n                        + \"max log file size not set. Using default values\";\r\n                ErrorObject err =\r\n                        new ErrorObject(PayflowConstants.SEVERITY_WARN, PayflowConstants.EMPTY_STRING,\r\n                                respMessage);\r\n                mLoggerErrs.add(err);\r\n                //errInLogger will not be set since logging must still happen.\r\n            }\r\n            try {\r\n                File logFile = new File(SDKProperties.getLogFileName());\r\n                if (!logFile.exists()) {\r\n                    if (null != logFile.getParentFile() && !logFile.getParentFile().exists()) {\r\n                        logFile.getParentFile().mkdirs();\r\n                    }\r\n                    logFile.createNewFile();\r\n                }\r\n\r\n                logFileLength = logFile.length();\r\n            }\r\n            catch (IOException e) {\r\n                String respMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_INIT_ERROR)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_INIT_ERROR)\r\n                        + e.getMessage() + \" Occurred while accessing logFile : \" + SDKProperties.getLogFileName() + \" - Logging has been disabled.\";\r\n                ErrorObject err =\r\n                        new ErrorObject(PayflowConstants.SEVERITY_WARN, PayflowConstants.EMPTY_STRING,\r\n                                respMessage);\r\n                mLoggerErrs.add(err);\r\n                errInLogger = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This will give the instance of the logger class.\r\n     *\r\n     * @return mInstance\r\n     */\r\n    public synchronized static Logger getInstance() {\r\n        if (mInstance == null)\r\n            mInstance = new Logger();\r\n        return mInstance;\r\n    }\r\n\r\n    /**\r\n     * Get the Errors generated due to the Logger.\r\n     *\r\n     * @return mLoggerErrs\r\n     */\r\n    public ArrayList getLoggerErrs() {\r\n        return mLoggerErrs;\r\n    }\r\n\r\n    /**\r\n     * This is a internal method and takes in a errorobject as a parameter.This method\r\n     * then calls another overloaded version for the method Log which takes in a\r\n     * string to be logged and the severity level of the Error Object.\r\n     *\r\n     * @param message ErrorObject\r\n     */\r\n    protected void log(ErrorObject message) {\r\n        if (message != null) {\r\n            log(message.toString(), message.getSeverityLevel());\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This is a internal method and takes in a arraylist of the errorobjects\r\n     * as a parameter.The method goes through the array list for each errorobject\r\n     * found makes a call to another overloaded version of the Log method which takes\r\n     * in ErrorObject as a parameter.If there are some errors which have been generated by\r\n     * the Logger class then those are logged instead of the passed messages.\r\n     *\r\n     * @param messages ArrayList containing the error objects\r\n     */\r\n    protected void log(ArrayList messages) {\r\n        int ErrCnt;\r\n        int ErrMaxCnt;\r\n        if (mLoggerErrs.size() != 0) {\r\n            messages = mLoggerErrs;\r\n        }\r\n        ErrMaxCnt = messages.size();\r\n        for (ErrCnt = 0; ErrCnt < ErrMaxCnt; ErrCnt++) {\r\n            log((ErrorObject) messages.get(ErrCnt));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method logs the data to a file.Different type of severity level can be logged here.\r\n     * The levels that can be logged are decided by the configuration settings in the\r\n     * SDKProperties file.\r\n     *\r\n     * @param message     String : value that needs to be logged\r\n     * @param severityLvl int : Severity level of the message.This could be one of the following:\r\n     *                    <ol>\r\n     *                    <li> PayflowConstants.LOGGING_OFF </li>\r\n     *                    <li> PayflowConstants.SEVERITY_FATAL </li>\r\n     *                    <li> PayflowConstants.SEVERITY_ERROR </li>\r\n     *                    <li> PayflowConstants.SEVERITY_WARN </li>\r\n     *                    <li> PayflowConstants.SEVERITY_INFO </li>\r\n     *                    <li> PayflowConstants.SEVERITY_DEBUG </li>\r\n     *                    </ol>\r\n     * @return retVal Boolean\r\n     */\r\n    public boolean log(String message, int severityLvl) {\r\n        boolean retVal = true;\r\n        String severity;\r\n        Calendar cal;\r\n\r\n        if (severityLvl >= SDKProperties.getLoggingLevel() && !errInLogger) {\r\n            switch (severityLvl) {\r\n                case PayflowConstants.SEVERITY_DEBUG:\r\n                    severity = \"Debug\";\r\n                    break;\r\n                case PayflowConstants.SEVERITY_INFO:\r\n                    severity = \"Info\";\r\n                    break;\r\n                case PayflowConstants.SEVERITY_WARN:\r\n                    severity = \"Warn\";\r\n                    break;\r\n                case PayflowConstants.SEVERITY_ERROR:\r\n                    severity = \"Error\";\r\n                    break;\r\n                case PayflowConstants.SEVERITY_FATAL:\r\n                    severity = \"Fatal\";\r\n                    break;\r\n                default:\r\n                    severity = PayflowConstants.EMPTY_STRING;\r\n            }\r\n            try {\r\n                if (null != severity && severity.length() != 0) {\r\n                    synchronized (this) {\r\n                        if (logFileLength > SDKProperties.getMaxLogFileSize()) {\r\n                            if (archiveLogFile()) {\r\n                                logFileLength = 0;\r\n                            }\r\n                        }\r\n                        if (null == os || null == out) {\r\n                            os = new FileOutputStream(SDKProperties.getLogFileName(), true);\r\n                            out = new PrintStream(os, true);\r\n                        }\r\n                        cal = Calendar.getInstance(TimeZone.getDefault());\r\n                        String dRequestId = \"\";\r\n\r\n                        // temp removal until figured out\r\n                        /* if (BaseTransaction.requestId != null)  {\r\n                          dRequestId = BaseTransaction.requestId + \":\";\r\n                        }\r\n                        */\r\n                        String messageToBeLogged = sdf.format(cal.getTime()) + \":\" + pad(severity, 5, \" \") + \":\" + dRequestId + message;\r\n\r\n                        out.println(messageToBeLogged);\r\n                        logFileLength += messageToBeLogged.length() + 1;\r\n                    }\r\n                }\r\n            } catch (Exception e) {\r\n                retVal = false;\r\n                String respMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_INIT_ERROR)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_INIT_ERROR)\r\n                        + e.getMessage() + \" Occurred while accessing logFile : \" + SDKProperties.getLogFileName() + \" - Logging has been disabled.\";\r\n                ErrorObject err =\r\n                        new ErrorObject(PayflowConstants.SEVERITY_WARN, PayflowConstants.EMPTY_STRING,\r\n                                respMessage);\r\n                mLoggerErrs.add(err);\r\n                errInLogger = true;\r\n            }\r\n        }\r\n\r\n        return retVal;\r\n    }\r\n\r\n    private boolean archiveLogFile() {\r\n        boolean archived = false;\r\n        File archivedLog;\r\n        String fileName;\r\n        File logFile;\r\n        try {\r\n            if (null != out) {\r\n                out.flush();\r\n                out.close();\r\n            }\r\n            if (null != os) os.close();\r\n            logFile = new File(SDKProperties.getLogFileName());\r\n            int targetPosition = SDKProperties.getLogFileName().indexOf('.');\r\n            targetPosition = targetPosition != -1 ? targetPosition : SDKProperties.getLogFileName().length();\r\n            for (int i = 1; ; i++) {\r\n                fileName =\r\n                        new StringBuffer(SDKProperties.getLogFileName())\r\n                                .insert(targetPosition, archiveFileSeparator)\r\n                                .insert(targetPosition + 1, Integer.toString(i))\r\n                                .toString();\r\n                archivedLog = new File(fileName);\r\n                if (!archivedLog.exists()) {\r\n                    if (logFile.renameTo(archivedLog))\r\n                        archived = true;\r\n                    break;\r\n                }\r\n            }\r\n        } catch (Exception e) {\r\n            archived = false;\r\n        }\r\n        os = null;\r\n        out = null;\r\n        return archived;\r\n    }\r\n\r\n    /**\r\n     * This method populates each ErrorObject int the arraylist passed, with the\r\n     * details from the SortedList held by the logger class. It populates the mLoggerErrs\r\n     * in case the relevant message code is not found.\r\n     * <p/>\r\n     * Populate the error object with the details\r\n     *\r\n     * @param errObj ArrayList\r\n     * @return errorObject ArrayList\r\n     */\r\n    protected ArrayList populateErrorDetails(ArrayList errObj) {\r\n        ErrorObject errMesg;\r\n        ErrorObject retErrorObj;\r\n        ArrayList retErrObjs = new ArrayList(0);\r\n        int errCnt;\r\n        int errMaxCnt;\r\n        int sevLvlAssigned;\r\n        String[] mesgParams;\r\n\r\n        //Iterate through all the error objects in the array list\r\n        errMaxCnt = errObj.size();\r\n        for (errCnt = 0; errCnt < errMaxCnt; errCnt++) {\r\n            if (((ErrorObject) errObj.get(errCnt)).getMessageCode().length() != 0) {\r\n                errMesg = (ErrorObject) mMessages.get(((ErrorObject) errObj.get(errCnt)).getMessageCode());\r\n\r\n                if (((ErrorObject) errObj.get(errCnt)).getSeverityLevel() != 0) {\r\n                    sevLvlAssigned = ((ErrorObject) errObj.get(errCnt)).getSeverityLevel();\r\n                } else {\r\n                    sevLvlAssigned = errMesg.getSeverityLevel();\r\n                }\r\n                mesgParams = new String[((ErrorObject) errObj.get(errCnt)).getMessageParams().size()];\r\n\r\n                ((ErrorObject) errObj.get(errCnt)).getMessageParams().toArray(mesgParams);\r\n\r\n                retErrorObj = new ErrorObject(sevLvlAssigned,\r\n                        errMesg.getMessageCode(), errMesg.getMessageBody(),\r\n                        mesgParams,\r\n                        ((ErrorObject) errObj.get(errCnt)).getErrorStackTrace());\r\n            } else {\r\n                retErrorObj = (ErrorObject) errObj.get(errCnt);\r\n            }\r\n            retErrObjs.add(retErrorObj);\r\n        }\r\n        return retErrObjs;\r\n    }\r\n\r\n    private void populateMessages() {\r\n        mMessages = new HashMap();\r\n        ErrorObject Err;\r\n        Err = new ErrorObject(PayflowConstants.SEVERITY_INFO, PayflowConstants.MSG_COMMUNICATION_ERROR, \"RESULT={0}&RESPMSG={1}\");\r\n        mMessages.put(PayflowConstants.MSG_COMMUNICATION_ERROR, Err);\r\n        Err = new ErrorObject(PayflowConstants.SEVERITY_INFO, PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY, \"<XMLPayResponse xmlns='http://www.paypal.com/XMLPay'><ResponseData><TransactionResults><TransactionResult><Result>{0}</Result><Message>{1}</Message></TransactionResult></TransactionResults></ResponseData></XMLPayResponse>\");\r\n        mMessages.put(PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY, Err);\r\n        Err = new ErrorObject(PayflowConstants.SEVERITY_INFO, PayflowConstants.MSG_COMMUNICATION_ERROR_NO_RESPONSE_ID, \"RESULT={0}&RESPMSG={1}&REQUEST_ID={2}\");\r\n        mMessages.put(PayflowConstants.MSG_COMMUNICATION_ERROR_NO_RESPONSE_ID, Err);\r\n        Err = new ErrorObject(PayflowConstants.SEVERITY_INFO, PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY_NO_RESPONSE_ID, \"<XMLPayResponse xmlns='http://www.paypal.com/XMLPay'><ResponseData><TransactionResults><TransactionResult><Result>{0}</Result><Message>{1}</Message></TransactionResult></TransactionResults></ResponseData></XMLPayResponse>\");\r\n        mMessages.put(PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY_NO_RESPONSE_ID, Err);\r\n    }\r\n\r\n/**\r\n   * Pads out a string up to padlen with pad chars\r\n   * @param str Object.toString() to be padded\r\n   * @param padlen length of pad (+ve = pad on right, -ve pad on left)\r\n   * @param pad character\r\n   * @return value\r\n   */\r\n  private static String pad(Object str, int padlen, String pad)\r\n    {\r\n    String padding = new String();\r\n    int len = Math.abs(padlen) - str.toString().length();\r\n    if (len < 1)\r\n      return str.toString();\r\n    for (int i = 0 ; i < len ; ++i)\r\n      padding = padding + pad;\r\n\r\n    return (padlen < 0 ? padding + str : str + padding);\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/base/paypal/payflow/Logger.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/base/paypal/payflow/Logger.java	(date 1600056969885)
@@ -319,7 +319,7 @@
      * This method populates each ErrorObject int the arraylist passed, with the
      * details from the SortedList held by the logger class. It populates the mLoggerErrs
      * in case the relevant message code is not found.
-     * <p/>
+     *  * <p>
      * Populate the error object with the details
      *
      * @param errObj ArrayList
Index: src/sdk/dataobjects/paypal/payflow/CheckPayment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Check Payment related information.\r\n * CheckPayment is associated with CheckTender. {@link CheckTender}\r\n */\r\npublic final class CheckPayment extends PaymentDevice {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param micr MICR Value\r\n     *             This is used as Payment Device for the CheckTender.\r\n     *             <p/>\r\n     *  Maps to Payflow Parameter: MICR\r\n     * //Create the CheckPayment object\r\n     * CheckPayment payDevice = new CheckPayment(\"XXXXXXXXXX\");\r\n     * </p>\r\n     */\r\n    public CheckPayment(String micr) {\r\n        super(micr);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n//    \tPut the base field Acct as MICR.\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MICR, super.getAcct()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_NAME, super.getName()));\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/CheckPayment.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/CheckPayment.java	(date 1600056994322)
@@ -11,7 +11,7 @@
      *
      * @param micr MICR Value
      *             This is used as Payment Device for the CheckTender.
-     *             <p/>
+     *              * <p>
      *  Maps to Payflow Parameter: MICR
      * //Create the CheckPayment object
      * CheckPayment payDevice = new CheckPayment("XXXXXXXXXX");
Index: src/sdk/base/paypal/payflow/Context.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Iterator;\r\n\r\n/**\r\n * This class contains all error messages generated for the class containing\r\n * the context.This also contains the highest severity level contained by the\r\n * context.\r\n */\r\npublic final class Context {\r\n\r\n    /**\r\n     * Holds the collection of error objects for the context instance.\r\n     */\r\n    private ArrayList mErrorObjects = new ArrayList();\r\n\r\n    /**\r\n     * Indicates the highest severity level error in the array list.\r\n     */\r\n    private int mHighestErrorLvl;\r\n\r\n    /**\r\n     * Indicates if the Error messages due to Logger class needs to be added to the context.\r\n     */\r\n    private boolean mLoadLoggerErrs;\r\n\r\n    /**\r\n     * Constructor for Context\r\n     */\r\n    protected Context() {\r\n    }\r\n\r\n\r\n    /**\r\n     * Indicates the highest severity level error contained in the Context.\r\n     *\r\n     * @return highestErrorLvl int\r\n     */\r\n    public int getHighestErrorLvl() {\r\n        int errCnt;\r\n        int errMaxCnt;\r\n        int errSeverityLevel;\r\n\r\n        errMaxCnt = mErrorObjects.size();\r\n        for (errCnt = 0; errCnt < errMaxCnt; errCnt++) {\r\n            errSeverityLevel = ((ErrorObject) mErrorObjects.get(errCnt)).getSeverityLevel();\r\n            if (mHighestErrorLvl < errSeverityLevel) {\r\n                mHighestErrorLvl = errSeverityLevel;\r\n            }\r\n        }\r\n        return mHighestErrorLvl;\r\n    }\r\n\r\n    /**\r\n     * Indicates if the Error messages due to Logger class needs to be added to the context.\r\n     *\r\n     * @return mLoadLoggerErrs boolean\r\n     */\r\n    protected boolean getLoadLoggerErrs() {\r\n        return mLoadLoggerErrs;\r\n    }\r\n\r\n    /**\r\n     * This function can be set to check if logger errors need to be logged.\r\n     *\r\n     * @param value boolean\r\n     */\r\n    protected void setLoadLoggerErrs(boolean value) {\r\n\r\n        mLoadLoggerErrs = value;\r\n\r\n    }\r\n\r\n    /**\r\n     * This method adds the passed error object in the array list contained by\r\n     * the context object\r\n     *\r\n     * @param errObject ErrorObject\r\n     */\r\n    protected void addError(ErrorObject errObject) {\r\n\r\n        if (mErrorObjects == null) {\r\n            mErrorObjects = new ArrayList();\r\n        }\r\n        if (!mErrorObjects.contains(errObject)) {\r\n            mErrorObjects.add(0, errObject);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * This method adds the passed arraylist of error objects\r\n     * to the context object\r\n     *\r\n     * @param errorObjects ArrayList\r\n     */\r\n    protected void addErrors(ArrayList errorObjects) {\r\n\r\n        if (mErrorObjects == null) {\r\n            mErrorObjects = new ArrayList();\r\n        }\r\n        Iterator iter = errorObjects.iterator();\r\n        ErrorObject err;\r\n        while (iter.hasNext()) {\r\n            err = (ErrorObject) iter.next();\r\n            if (!mErrorObjects.contains(err)) {\r\n                mErrorObjects.add(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This method will log all the error and exceptions contained in the ErrorObjects\r\n     * arraylist.This returns true if the logging is successful.\r\n     *\r\n     * @return retVal boolean\r\n     */\r\n    public boolean logErrors() {\r\n\r\n        boolean retVal;\r\n        try {\r\n            int errCnt = 0;\r\n            Logger instance;\r\n            ArrayList populatedErr;\r\n            if (mErrorObjects != null) {\r\n                instance = Logger.getInstance();\r\n                populatedErr = instance.populateErrorDetails(mErrorObjects);\r\n                mErrorObjects.clear();\r\n                mErrorObjects.addAll(errCnt, populatedErr);\r\n                instance.log(mErrorObjects);\r\n            }\r\n            retVal = true;\r\n        } catch (Exception ex) {\r\n            retVal = false;\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * This method will check if the context contains any error message.This method\r\n     * can be used for checking if the context is empty.\r\n     *\r\n     * @return errorContained boolean\r\n     */\r\n    public boolean isErrorContained() {\r\n\r\n        boolean retVal = false;\r\n        if (mErrorObjects != null) {\r\n            if (mErrorObjects.size() > 0)\r\n                retVal = true;\r\n        }\r\n\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * This method will check if the context contains a specific error message.This method\r\n     * can be used for checking if the context is empty.\r\n     *\r\n     * @param error ErrorObject\r\n     * @return retFlag boolean\r\n     */\r\n    protected boolean isCommunicationErrorContained(ErrorObject error) {\r\n\r\n        boolean retFlag = false;\r\n        if (isErrorContained()) {\r\n            ErrorObject err;\r\n\r\n            for (int i = 0; i <= mErrorObjects.size() - 1; i++) {\r\n                err = (ErrorObject) mErrorObjects.get(i);\r\n                if (err != null && err.getMessageCode().equals(error.getMessageCode())) {\r\n                    if (err.getMessageParams() != null && error.getMessageParams() != null) {\r\n                        if (err.getMessageParams().get(0).equals(error.getMessageParams().get(0))) {\r\n                            retFlag = true;\r\n                        }\r\n                    }\r\n                    //return false;\r\n                }\r\n            }\r\n        }\r\n        return retFlag;\r\n    }\r\n\r\n    /**\r\n     * This method will return the error object from the Context as per the index\r\n     * passed to the function.If the index value passed is more than the count of the\r\n     * errors in the array list then it returns a null.\r\n     *\r\n     * @param index int\r\n     * @return errobject ErrorObject\r\n     */\r\n    public ErrorObject getError(int index) {\r\n\r\n        ErrorObject errObject = null;\r\n        populateErrors();\r\n        if (index < mErrorObjects.size()) {\r\n            errObject = (ErrorObject) mErrorObjects.get(index);\r\n        }\r\n\r\n        return errObject;\r\n    }\r\n\r\n    /**\r\n     * This method returns the array list populated with all the error contained\r\n     * in the context\r\n     *\r\n     * @return mErrorObjects ArrayList\r\n     */\r\n    public ArrayList getErrors() {\r\n\r\n        populateErrors();\r\n        return mErrorObjects;\r\n    }\r\n\r\n\r\n    /**\r\n     * This method will return the array list populated with all the error contained\r\n     * in the context which are equal to or above the severity level passed to the\r\n     * function\r\n     *\r\n     * @param sevLvl int\r\n     * @return highSevErrors ArrayList\r\n     */\r\n    public ArrayList getErrors(int sevLvl) {\r\n        ArrayList highSevErrors = new ArrayList();\r\n        int errMaxCount;\r\n        int errCnt;\r\n        populateErrors();\r\n        errMaxCount = mErrorObjects.size();\r\n        for (errCnt = 0; errCnt < errMaxCount; errCnt++) {\r\n            if (((ErrorObject) mErrorObjects.get(errCnt)).getSeverityLevel() >=\r\n                    sevLvl) {\r\n                highSevErrors.add(mErrorObjects.get(errCnt));\r\n            }\r\n        }\r\n        return highSevErrors;\r\n    }\r\n\r\n    /**\r\n     * This method will return the total number of errors contained in the\r\n     * Context Object.\r\n     *\r\n     * @return errorCOunt int\r\n     */\r\n    public int getErrorCount() {\r\n        int errorCount = 0;\r\n        if (mErrorObjects != null) {\r\n            errorCount = mErrorObjects.size();\r\n        }\r\n        return errorCount;\r\n    }\r\n\r\n    /**\r\n     * This method will populate all the error objects contained in the arraylist with\r\n     * details such as the severity level and message body.It uses 'PopulateErrorDetails'\r\n     * method of the Logger class.\r\n     */\r\n    private void populateErrors() {\r\n        int errCnt = 0;\r\n        Logger instance;\r\n        ArrayList populatedErr;\r\n        if (mErrorObjects != null) {\r\n            instance = Logger.getInstance();\r\n            populatedErr = instance.populateErrorDetails(mErrorObjects);\r\n            if (getLoadLoggerErrs()) {\r\n                //PopulatedErr.AddRange (Instance.GetLoggerErrs);\r\n                //Check for duplicate Logger errors\r\n                ArrayList tempList = instance.getLoggerErrs();\r\n                if (tempList != null) {\r\n                    for (int i = 0; i < tempList.size(); i++) {\r\n                        if (!populatedErr.contains(tempList.get(i))) {\r\n                            populatedErr.add(tempList.get(i));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            mErrorObjects.clear();\r\n            mErrorObjects.addAll(errCnt, populatedErr);\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * This method overrides the toString() method of the System.Object Class.This method\r\n     * converts the information in the Context in the string format.The format is as follows:\r\n     * <p/>\r\n     * \"Message (Message Number in the context) :[(Message severity Level)](Message code)-(Formatted message body with context info)\r\n     * Message stack Trace\"\r\n     *\r\n     * @return errString String\r\n     */\r\n    public String toString() {\r\n        StringBuffer retVal = new StringBuffer(PayflowConstants.EMPTY_STRING);\r\n        int errCount;\r\n        int errMaxCount;\r\n        ErrorObject err;\r\n\r\n        populateErrors();\r\n        errMaxCount = mErrorObjects.size();\r\n        for (errCount = 0; errCount < errMaxCount; errCount++) {\r\n            err = (ErrorObject) mErrorObjects.get(errCount);\r\n            if (null != err) {\r\n                if (errMaxCount > 0) {\r\n                    retVal.append(PayflowConstants.FORMAT_MSG_SEPERATOR);\r\n                    retVal.append(errCount + 1);\r\n                    retVal.append(PayflowConstants.FORMAT_MSG_LINESEPERATOR);\r\n                    //retVal.append(\"\\n\\r\");\r\n                }\r\n                retVal.append(PayflowConstants.FORMAT_MSG_OPENBRACKET);\r\n                retVal.append(getStringSeverity(err.getSeverityLevel()));\r\n                retVal.append(PayflowConstants.FORMAT_MSG_CLOSEBRACKET);\r\n                retVal.append(err.toString());\r\n                retVal.append(\"\\n\");\r\n                if (null != err.getErrorStackTrace()) {\r\n                    retVal.append(err.getErrorStackTrace());\r\n                }\r\n                //if (errCount < errMaxCount - 1)\r\n                //\tretVal.append(\"\\n\\r\");\r\n            }\r\n        }\r\n\r\n        return retVal.toString();\r\n    }\r\n\r\n    /**\r\n     * This method is another overload for the method toString().This method\r\n     * converts the information in the Context in the string format.This will return\r\n     * the formatted error string for messages that have severity level equal to or above\r\n     * the severitylevel parameter passed to this function.The messages for different errors\r\n     * are separated by the separator format passed to the method.In case no separator is\r\n     * passed a new line character is used.\r\n     *\r\n     * @param severityLevel int\r\n     * @param seperator     String\r\n     * @return retVal String\r\n     */\r\n    public String toString(int severityLevel, String seperator) {\r\n\r\n        StringBuffer retVal = new StringBuffer(PayflowConstants.EMPTY_STRING);\r\n        int errCount;\r\n        int errMaxCount;\r\n        ErrorObject err;\r\n        ArrayList errObjects;\r\n        errObjects = getErrors(severityLevel);\r\n\r\n        errMaxCount = errObjects.size();\r\n        for (errCount = 0; errCount < errMaxCount; errCount++) {\r\n            err = (ErrorObject) errObjects.get(errCount);\r\n            retVal.append(err.toString());\r\n            if (errCount < errMaxCount - 1) {\r\n                if (seperator != null && seperator.length() != 0) {\r\n                    retVal.append(seperator);\r\n                } else {\r\n                    retVal.append(\"\\n\\r\");\r\n                }\r\n            }\r\n        }\r\n\r\n        return retVal.toString();\r\n    }\r\n\r\n    /**\r\n     * This resets the context object\r\n     */\r\n    public void clearErrors() {\r\n\r\n        if (mErrorObjects != null) {\r\n            mErrorObjects.clear();\r\n            mHighestErrorLvl = 0;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * This gets the severity level for a\r\n     * severity integer value.\r\n     *\r\n     * @param severity int\r\n     * @return retVal String\r\n     */\r\n    private static String getStringSeverity(int severity) {\r\n\r\n        String retVal = PayflowConstants.ERROR_WARN;\r\n\r\n        switch (severity) {\r\n            case PayflowConstants.SEVERITY_DEBUG:\r\n                retVal = PayflowConstants.ERROR_DEBUG;\r\n                break;\r\n            case PayflowConstants.SEVERITY_INFO:\r\n                retVal = PayflowConstants.ERROR_INFO;\r\n                break;\r\n            case PayflowConstants.SEVERITY_WARN:\r\n                retVal = PayflowConstants.ERROR_WARN;\r\n                break;\r\n            case PayflowConstants.SEVERITY_ERROR:\r\n                retVal = PayflowConstants.ERROR_ERROR;\r\n                break;\r\n            case PayflowConstants.SEVERITY_FATAL:\r\n                retVal = PayflowConstants.ERROR_FATAL;\r\n                break;\r\n        }\r\n\r\n        return retVal;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/base/paypal/payflow/Context.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/base/paypal/payflow/Context.java	(date 1600056994686)
@@ -286,7 +286,7 @@
     /**
      * This method overrides the toString() method of the System.Object Class.This method
      * converts the information in the Context in the string format.The format is as follows:
-     * <p/>
+     *  * <p>
      * "Message (Message Number in the context) :[(Message severity Level)](Message code)-(Formatted message body with context info)
      * Message stack Trace"
      *
Index: src/sdk/dataobjects/paypal/payflow/ECSetBARequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for ExpressCheckout with Billing Agreement (Reference Transaction) without Purchase SET operation.\r\n * {@link ECGetBARequest}\r\n * {@link ECDoBARequest}\r\n */\r\npublic class ECSetBARequest extends ECSetRequest {\r\n\r\n    /**\r\n     * Constructor for ECSetBARequest\r\n     *\r\n     * @param ReturnUrl   - String\r\n     * @param CancelUrl   - String\r\n     * @param BillingType - String\r\n     * @param BA_Desc     - String\r\n     * @param PaymentType - String\r\n     * @param BA_Custom   - String\r\n     *                    <p/>\r\n     *                    <p/>\r\n     *                    ECSetBARequest is used to set the data required for a Express Checkout Billing Agreement SET operation\r\n     *                    with Billing Agreement (Reference Transaction) without Purchase.\r\n     *                    </p>\r\n     *  .............\r\n     * <p/>\r\n     * Create the ECSetBARequest object\r\n     * ECSetBARequest setEC = new ECSetBARequest(ReturnUrl, CancelUrl, BillingType, BA_Desc, PaymentType, BA_Custom);\r\n     * <p/>\r\n     * .............\r\n     * </code>\r\n     */\r\n    public ECSetBARequest(String ReturnUrl, String CancelUrl, String BillingType, String BA_Desc,\r\n                          String PaymentType, String BA_Custom) {\r\n        super(ReturnUrl, CancelUrl, BillingType, BA_Desc, PaymentType, BA_Custom, PayflowConstants.PARAM_ACTION_SETBA);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ECSetBARequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ECSetBARequest.java	(date 1600060218247)
@@ -16,18 +16,16 @@
      * @param BA_Desc     - String
      * @param PaymentType - String
      * @param BA_Custom   - String
-     *                    <p/>
-     *                    <p/>
+     *                     * <p>
      *                    ECSetBARequest is used to set the data required for a Express Checkout Billing Agreement SET operation
      *                    with Billing Agreement (Reference Transaction) without Purchase.
      *                    </p>
-     *  .............
-     * <p/>
+     * .............
+     *  * <p>
      * Create the ECSetBARequest object
      * ECSetBARequest setEC = new ECSetBARequest(ReturnUrl, CancelUrl, BillingType, BA_Desc, PaymentType, BA_Custom);
-     * <p/>
+     *  * <p>
      * .............
-     * </code>
      */
     public ECSetBARequest(String ReturnUrl, String CancelUrl, String BillingType, String BA_Desc,
                           String PaymentType, String BA_Custom) {
Index: src/sdk/base/paypal/payflow/PayflowUtility.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.net.InetAddress;\r\nimport java.net.UnknownHostException;\r\nimport java.rmi.server.UID;\r\nimport java.security.MessageDigest;\r\nimport java.security.NoSuchAlgorithmException;\r\nimport java.util.ArrayList;\r\nimport java.util.Date;\r\nimport java.util.Random;\r\nimport java.text.BreakIterator;\r\n\r\nimport org.apache.xerces.dom.AttrImpl;\r\nimport org.apache.xerces.dom.ChildNode;\r\nimport org.w3c.dom.*;\r\n\r\n// This class is deprecated in Xerces 2.9.0 \r\n//import org.apache.xml.serialize.XMLSerializer;\r\n\r\n// Used for DOM Level 3 LSSerializer in maskXMLPayRequest function.\r\n// See comments in that function.\r\nimport org.w3c.dom.ls.*;\r\nimport org.w3c.dom.bootstrap.DOMImplementationRegistry;\r\n\r\n/**\r\n * This class contains all the utility function's which may be required during a transaction.\r\n */\r\npublic final class PayflowUtility {\r\n\r\n    /**\r\n     * This is used to check whether constant for\r\n     * TRACE is initialized already or not.\r\n     */\r\n    private static boolean mTraceInitialized = false;\r\n\r\n    /**\r\n     * Generates Request Id. This can be used to generate a random request id.\r\n     *\r\n     * @return strRet\r\n     */\r\n    public static String getRequestId() {\r\n        // get the current time.\r\n        long aTime = new Date().getTime();\r\n        // add a random number to it.\r\n        long rand = new Random().nextLong();\r\n\r\n        String myRandString = Long.toString(aTime + Math.abs(rand));\r\n        //Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getRequestId(String) : myRandString = \" + myRandString, PayflowConstants.SEVERITY_DEBUG);\r\n        // get an Internet Address if it is available.\r\n        String myIPString;\r\n        // String mySocketString;\r\n        String toBeHashed;\r\n        // get a new MD5 message digest (outputs a 128 bit hash based on an input).\r\n        //String outputString;\r\n\r\n        String strRet;\r\n        // get a Java Unique ID.\r\n        UID uid = new UID();\r\n        //Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getRequestId(String) : UID = \" + uid.toString(), PayflowConstants.SEVERITY_DEBUG);\r\n\r\n        try {\r\n            myIPString = InetAddress.getLocalHost().getHostAddress();\r\n        } catch (UnknownHostException e) {\r\n            // myIPString = PayflowConstants.EMPTY_STRING;   Original entry\r\n            myIPString = \"\"; // Above entry seemed to cause some systems to hang, re (03/16/07)\r\n        }\r\n        //Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getRequestId(String) : myIPString = \" + myIPString, PayflowConstants.SEVERITY_DEBUG);\r\n        //try {\r\n        //    Socket httpSocket = new Socket(InetAddress.getLocalHost(), 80);\r\n        //mySocketString = httpSocket.toString();\r\n        //} catch (UnknownHostException uhe) {\r\n        //    mySocketString = PayflowConstants.EMPTY_STRING;\r\n        //} catch (IOException e) {\r\n        //    mySocketString = PayflowConstants.EMPTY_STRING;\r\n        //}\r\n\r\n        //  convert it all to a string.\r\n        // toBeHashed = myRandString + myIPString + mySocketString + uid.toString();\r\n        toBeHashed = myRandString + myIPString + uid.toString();\r\n        // Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getRequestId(String) : toBeHashed = \" + toBeHashed, PayflowConstants.SEVERITY_DEBUG);\r\n\r\n        try {\r\n            MessageDigest md = MessageDigest.getInstance(\"MD5\");\r\n            // Modified to work with IBM JDK, 07/03/07 tsieber\r\n            // update the message digest\r\n            md.update(toBeHashed.getBytes());\r\n            // format the input array.\r\n            byte[] in = toBeHashed.getBytes();\r\n\r\n            // use the digest to hash the input array to the output array.\r\n            byte[] out = md.digest(in);\r\n\r\n            // create the outputString.\r\n            // outputString = new String(out);\r\n            strRet = getStringValue(out, out.length);\r\n        } catch (NoSuchAlgorithmException e) {\r\n            // can't use the MD5, will resort to truncating the toBeHashed String.\r\n            // outputString = toBeHashed.substring(0, 16);\r\n            strRet = toBeHashed.substring(0, 16);\r\n        }\r\n        // strRet = getStringValue(outputString.getBytes(), outputString.getBytes().length);\r\n        // Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getRequestId(String) : strRet = \" + strRet, PayflowConstants.SEVERITY_DEBUG);\r\n        return strRet;\r\n    }\r\n\r\n    /**\r\n     * get the string value.\r\n     *\r\n     * @param byteArray byte\r\n     * @param length    int\r\n     * @return strRet String\r\n     */\r\n    protected static String getStringValue(byte[] byteArray, int length) {\r\n        // Modified to work with IBM JDK, 07/03/07 tsieber\r\n        String hexString = \"0123456789ABCDEF\";\r\n        String strRet = \"\";\r\n        for (int i = 0; i < length; i++) {\r\n            strRet = strRet + hexString.charAt(byteArray[i] & 0xF);\r\n            strRet = strRet + hexString.charAt((byteArray[i] >> 4) & 0xF);\r\n        }\r\n        return strRet;\r\n    }\r\n\r\n    /**\r\n     * Gets, sets mTraceInitialized\r\n     *\r\n     * @return mTraceInitialized\r\n     */\r\n    protected static boolean getTraceInitialized() {\r\n        return mTraceInitialized;\r\n    }\r\n\r\n    /**\r\n     * @param value boolean\r\n     */\r\n    protected static void setTraceInitialized(boolean value) {\r\n        mTraceInitialized = value;\r\n    }\r\n\r\n    /**\r\n     * Constructor for PayflowUtility\r\n     */\r\n    private PayflowUtility() {\r\n    }\r\n\r\n    /**\r\n     * Appends a name value pair to request\r\n     *\r\n     * @param name  String\r\n     * @param value Object\r\n     * @return RetVal String\r\n     */\r\n    protected static String appendToRequest(String name, Object value) {\r\n        String retVal;\r\n        StringBuffer nvPair = new StringBuffer();\r\n\r\n        if (null == name || null == value) {\r\n            retVal = PayflowConstants.EMPTY_STRING;\r\n        } else {\r\n            String StringValue = value.toString();\r\n            nvPair.append(name);\r\n            nvPair.append(PayflowConstants.OPENING_BRACE_NVP);\r\n            // nvPair.append(StringValue.length());\r\n            nvPair.append(StringValueLength(StringValue));\r\n            nvPair.append(PayflowConstants.CLOSING_BRACE_NVP);\r\n            nvPair.append(PayflowConstants.SEPARATOR_NVP);\r\n            nvPair.append(StringValue);\r\n            nvPair.append(PayflowConstants.DELIMITER_NVP);\r\n\r\n            retVal = nvPair.toString();\r\n        }\r\n        return retVal;\r\n\r\n    }\r\n\r\n    public static String StringValueLength(String StringValue) {\r\n        BreakIterator it = BreakIterator.getCharacterInstance();\r\n        it.setText(StringValue);\r\n        int count = 0;\r\n        while (it.next() != BreakIterator.DONE) {\r\n            count++;\r\n        }\r\n        // System.out.println(\"Grapheme length: \" + count+ \" \" + StringValue);\r\n        return String.valueOf(count);\r\n    }\r\n\r\n    /**\r\n     * Locates value from name value pair and masks or returns it.\r\n     *\r\n     * @param paramList      String\r\n     * @param name           String\r\n     * @param maskFoundValue boolean\r\n     * @return value String\r\n     */\r\n    public static String locateValueForName(String paramList, String name, boolean maskFoundValue) {\r\n        String value;\r\n        int nameIndex;\r\n        int prevNameIndex;\r\n        if (maskFoundValue) {\r\n            value = paramList;\r\n        } else {\r\n            value = PayflowConstants.EMPTY_STRING;\r\n        }\r\n        if (null != paramList && paramList.length() > 0) {\r\n            nameIndex = paramList.indexOf(name + PayflowConstants.SEPARATOR_NVP);\r\n            if (nameIndex < 0) {\r\n                nameIndex = paramList.indexOf(name + PayflowConstants.OPENING_BRACE_NVP);\r\n            }\r\n            prevNameIndex = nameIndex;\r\n            if (nameIndex > 0) {\r\n                if (paramList.charAt(nameIndex - 1) != '&') {\r\n                    nameIndex = paramList.indexOf(name + PayflowConstants.SEPARATOR_NVP, prevNameIndex);\r\n                    if (nameIndex < 0) {\r\n                        nameIndex = paramList.indexOf(name + PayflowConstants.OPENING_BRACE_NVP, prevNameIndex + 1);\r\n                    }\r\n                }\r\n            }\r\n            if (!(nameIndex < 0 || prevNameIndex < 0)) {\r\n                int nvSeparatorIndex = paramList.indexOf(\"=\", nameIndex);\r\n                if (nvSeparatorIndex > 0) {\r\n                    int nvDelimiterIndex = paramList.indexOf(\"&\", nvSeparatorIndex);\r\n                    boolean iterate = true;\r\n                    while (iterate) {\r\n                        iterate = false;\r\n                        if (!(nvDelimiterIndex < 0)) {\r\n                            if (nvDelimiterIndex + 1 < paramList.length() && paramList.charAt(nvDelimiterIndex + 1) == '&') {\r\n                                nvDelimiterIndex += 2;\r\n                                nvDelimiterIndex = paramList.indexOf(\"&\", nvDelimiterIndex);\r\n                                iterate = true;\r\n                            }\r\n                        } else {\r\n                            nvDelimiterIndex = paramList.length();\r\n                        }\r\n                    }\r\n                    if (maskFoundValue) {\r\n                        int maskIndex;\r\n                        int dontMaskIndex;\r\n                        char[] valueArr = value.toCharArray();\r\n                        for (maskIndex = nvSeparatorIndex + 1; maskIndex < nvDelimiterIndex; maskIndex++) {\r\n                            dontMaskIndex = maskIndex - nvSeparatorIndex;\r\n                            if (name.equals(PayflowConstants.PARAM_ACCT) && (dontMaskIndex < 7 || dontMaskIndex > 12)) {\r\n                                continue;\r\n                            }\r\n                            valueArr[maskIndex] = 'X';\r\n                        }\r\n                        value = new String(valueArr);\r\n                    } else {\r\n                        value = paramList.substring(nvSeparatorIndex + 1, nvDelimiterIndex);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return value;\r\n    }\r\n\r\n\r\n    /**\r\n     * Check if timeout has occurred\r\n     *\r\n     * @param timeoutMsec   long\r\n     * @param startTimeMsec long\r\n     * @return true if timed out false if not.\r\n     */\r\n    protected static boolean isTimedOut(long timeoutMsec, long startTimeMsec) {\r\n        boolean timedOut = false;\r\n        long currentTimeMsec = new Date().getTime();\r\n        long timeElapsedMsec = currentTimeMsec - startTimeMsec;\r\n        long timeRemainingMsec = timeoutMsec - timeElapsedMsec;\r\n        if (timeRemainingMsec < 0) {\r\n            timedOut = true;\r\n        }\r\n        return timedOut;\r\n    }\r\n\r\n    /**\r\n     * Retrieves XmlPay version from Xml Pay Request.\r\n     *\r\n     * @param request String\r\n     * @return version String\r\n     * @throws Exception Exception\r\n     */\r\n    protected static String getXmlVersion(String request) throws Exception {\r\n        String version;\r\n        version = getXmlAttribute(request, PayflowConstants.XML_PARAM_VERSION);\r\n        return version;\r\n    }\r\n\r\n    /**\r\n     * Retrieves value of given Xml attribute from Xml Pay Request.\r\n     *\r\n     * @param request   String\r\n     * @param attribute String\r\n     * @return attributeValue String\r\n     * @throws Exception Exception\r\n     */\r\n    protected static String getXmlAttribute(String request, String attribute) throws Exception {\r\n        //added JR\r\n\r\n        String retVal = PayflowConstants.EMPTY_STRING;\r\n        try {\r\n\r\n            if (request != null && request.length() > 0) {\r\n                String attributeValue = null;\r\n                IPXmlReader xmlReader = new IPXmlReader(request);\r\n                Document xmlPayRequest = xmlReader.getXmlDocumentElement();\r\n                Element xmlNode;\r\n                NodeList xmlPayChildNodes = xmlPayRequest.getChildNodes();\r\n                NamedNodeMap xmlPayReqAttributes;\r\n                AttrImpl attributeNode;\r\n                int noOfChildren = xmlPayChildNodes.getLength();\r\n                try {\r\n\r\n                    for (int childIndex = 0; childIndex < noOfChildren; childIndex++) {\r\n                        xmlNode = (Element) xmlPayChildNodes.item(childIndex);\r\n                        if (xmlNode.getLocalName().equals(PayflowConstants.XMLPAY_REQUEST_TAG)) {\r\n                            xmlPayReqAttributes = xmlNode.getAttributes();\r\n                            if (xmlPayReqAttributes != null) {\r\n                                attributeNode = (AttrImpl) xmlPayReqAttributes.getNamedItem(attribute);\r\n                                if (attributeNode != null) {\r\n                                    attributeValue = attributeNode.getTextContent();\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                } catch (DOMException e) {\r\n                    e.printStackTrace();\r\n                }\r\n                retVal = attributeValue;\r\n\r\n            }\r\n\r\n        } catch (DOMException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Gets the Xml Namespace from the XmlPay Request.\r\n     *\r\n     * @param request String\r\n     * @return xmlNameSapce String\r\n     * @throws Exception Exception\r\n     */\r\n    protected static String getXmlNameSpace(String request) throws Exception {\r\n\r\n        String xmlNameSpace = PayflowConstants.EMPTY_STRING;\r\n        String xmlPayVersion;\r\n        xmlPayVersion = getXmlVersion(request);\r\n        if (!(\"1.0\".equals(xmlPayVersion))) {\r\n            xmlNameSpace = PayflowConstants.XMLPAY_NAMESPACE;\r\n\r\n        }\r\n        return xmlNameSpace;\r\n\r\n    }\r\n\r\n    /**\r\n     * Gets the inner text from an xml node.\r\n     *\r\n     * @param xmlPayRequest Document\r\n     * @param nodeName      String\r\n     * @return retVal String\r\n     */\r\n    protected static String getXmlNodeValue(Document xmlPayRequest, String nodeName) {\r\n        String retVal = PayflowConstants.EMPTY_STRING;\r\n        if (xmlPayRequest != null && nodeName != null && nodeName.length() > 0) {\r\n            NodeList nodeList = xmlPayRequest.getElementsByTagName(nodeName);\r\n            if (nodeList != null && nodeList.getLength() == 1) {\r\n                ChildNode nodeElement = (ChildNode) nodeList.item(0);\r\n                if (nodeElement != null) {\r\n                    retVal = nodeElement.getTextContent();\r\n                }\r\n            }\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Retrieves request id from param list.\r\n     *\r\n     * @param isXmlPayReq  boolean\r\n     * @param transRequest String\r\n     * @return requestId String\r\n     * @throws Exception Exception\r\n     */\r\n    protected static String requestIdFromParamList(boolean isXmlPayReq, String transRequest) throws Exception {\r\n        String requestId;\r\n        if (isXmlPayReq) {\r\n            requestId = PayflowUtility.getXmlAttribute(transRequest, PayflowConstants.XML_PARAM_REQUEST_ID);\r\n        } else {\r\n            requestId = PayflowUtility.locateValueForName(transRequest, PayflowConstants.PARAM_REQUEST_ID, false);\r\n        }\r\n        return requestId;\r\n\r\n    }\r\n\r\n    /**\r\n     * Populates Errors from Exceptions.\r\n     *\r\n     * @param commMessageCode String\r\n     * @param ex              Exception\r\n     * @param severityLevel   int\r\n     * @param isXmlPayReq     boolean\r\n     * @param addMessage      String\r\n     * @return initError ErrorObject\r\n     */\r\n    protected static ErrorObject populateCommError(String commMessageCode,\r\n                                                   Exception ex, int severityLevel, boolean isXmlPayReq, String addMessage) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.populateCommError(String,Exception,int,boolean,String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        String message;\r\n        String messageCode;\r\n        String trace = PayflowConstants.EMPTY_STRING;\r\n\r\n        //initStackTraceOn();\r\n\r\n        String[] msgParams;\r\n\r\n        if (addMessage == null) {\r\n            addMessage = PayflowConstants.EMPTY_STRING;\r\n        } else if (addMessage.length() > 0) {\r\n            addMessage = \" \" + addMessage;\r\n        }\r\n\r\n        if (ex != null && SDKProperties.isStackTraceOn()) {\r\n            trace = \" \";\r\n            StackTraceElement[] stackTrace = ex.getStackTrace();\r\n            int size = stackTrace.length;\r\n            for (int i = 0; i < size; i++) {\r\n                trace += \"\\n\" + stackTrace[i].toString();\r\n            }\r\n        }\r\n\r\n        message = PayflowConstants.CommErrorMessages.get(commMessageCode)\r\n                + addMessage + trace;\r\n\r\n        if (isXmlPayReq) {\r\n            messageCode = PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY;\r\n            msgParams = new String[]\r\n                    {(String) PayflowConstants.CommErrorCodes.get(commMessageCode), message};\r\n\r\n        } else {\r\n            messageCode = PayflowConstants.MSG_COMMUNICATION_ERROR;\r\n            msgParams = new String[]\r\n                    {(String) PayflowConstants.CommErrorCodes.get(commMessageCode), message};\r\n\r\n        }\r\n\r\n        ErrorObject InitError = new ErrorObject(severityLevel, messageCode, msgParams);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.populateCommError(String,Exception,int,boolean,String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n        return InitError;\r\n    }\r\n\r\n    /**\r\n     * Masks the sensitive fields in the param list which will be used for logging purpose.\r\n     *\r\n     * @param parmList String\r\n     * @return retVal String\r\n     */\r\n    protected static String maskSensitiveFields(String parmList) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.maskSensitiveFields(String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        String retVal;\r\n        try {\r\n            if (parmList != null && parmList.length() > 0) {\r\n                if (parmList.indexOf(PayflowConstants.XML_ID) >= 0) {\r\n                    retVal = maskXMLPayRequest(parmList);\r\n                } else {\r\n                    retVal = maskNVPRequest(parmList);\r\n                }\r\n            } else {\r\n                retVal = parmList;\r\n            }\r\n        } catch (Exception ex) {\r\n            Logger.getInstance().log(\"paypal.payflow.PayflowUtility.maskSensitiveFields(String) : XMLPay Request: \" + parmList, PayflowConstants.SEVERITY_DEBUG);\r\n            retVal = \" The xml pay request is invalid : \" + ex.getMessage();\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.maskSensitiveFields(String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n        return retVal;\r\n\r\n    }\r\n\r\n    /**\r\n     * Masks XMLPay Request\r\n     *\r\n     * @param parmList String\r\n     * @return maskedRequest String\r\n     * @throws Exception Exception\r\n     */\r\n    protected static String maskXMLPayRequest(final String parmList) throws Exception {\r\n        String retVal;\r\n\r\n        IPXmlReader xmlReader = new IPXmlReader(parmList);\r\n        Document xmlPayRequest = xmlReader.getXmlDocumentElement();\r\n        //Mask ACCT if present : Corresponding XmlPay element --> AcctNum or CardNum\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_ACCTNUM);\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_CARDNUM);\r\n        //Mask EXPDATE if present : Corresponding XmlPay element --> ExpDate\r\n        //PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_EXPDATE);\r\n        //Mask SWIPE if present : Corresponding XmlPay element --> MagData\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_MAGDATA);\r\n        //Mask MICR if present : Corresponding XmlPay element --> MICR or MagData\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_MICR);\r\n        //Mask CVV2 if present : Corresponding XmlPay element --> CVNum\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_CVNUM);\r\n        //Mask PWD if present : Corresponding XmlPay element --> Password\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_PASSWORD);\r\n        //Mask DL if present : Corresponding XmlPay element --> DL\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_DL);\r\n        //Mask SS if present : Corresponding XmlPay element --> CVNum\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_SS);\r\n        //Mask DOB if present : Corresponding XmlPay element --> DOB\r\n        PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_DOB);\r\n\r\n        // This class was deprecated in Xerces 2.9.0.  Replaced with DOM Level 3 LSSerializer.\r\n        // 08/21/07 tsieber\r\n        //XMLSerializer ss = new XMLSerializer();\r\n        //ByteArrayOutputStream xmlOutputStream = new ByteArrayOutputStream();\r\n        //ss.setOutputByteStream(xmlOutputStream);\r\n        //ss.serialize(xmlPayRequest);\r\n        //retVal = xmlOutputStream.toString();\r\n\r\n        System.setProperty(DOMImplementationRegistry.PROPERTY, \"org.apache.xerces.dom.DOMImplementationSourceImpl\");\r\n        DOMImplementationRegistry registry = DOMImplementationRegistry.newInstance();\r\n        DOMImplementation domImpl = registry.getDOMImplementation(\"LS 3.0\");\r\n        DOMImplementationLS implLS = (DOMImplementationLS) domImpl;\r\n        LSSerializer dom3Writer = implLS.createLSSerializer();\r\n        retVal = dom3Writer.writeToString(xmlPayRequest);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * Masks NVP Request\r\n     *\r\n     * @param parmList String\r\n     * @return maskedRequest String\r\n     */\r\n    protected static String maskNVPRequest(final String parmList) {\r\n        String logParmList = parmList;\r\n        //Mask ACCT if present\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_ACCT, true);\r\n        //Mask EXPDATE if present\r\n        //CR EXPDATE is unmasked\r\n        //logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_EXPDATE, true);\r\n        //Mask SWIPE if present\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_SWIPE, true);\r\n        //Mask MICR if present\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_MICR, true);\r\n        //Mask CVV2 if present\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_CVV2, true);\r\n        //Mask PWD\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_PWD, true);\r\n        //Mask DL if present\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_DL, true);\r\n        //Mask SS if present\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_SS, true);\r\n        //Mask DOB if present\r\n        logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_DOB, true);\r\n        //Mask VIT_OSNAME if present\r\n        //logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_VIT_OSNAME, true);\r\n        //Mask VIT_OSARCH if present\r\n        //logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_VIT_OSARCH, true);\r\n        //Mask VIT_OSVERSION if present\r\n        //logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_VIT_OSVERSION, true);\r\n        //Mask VIT_SDKRUNTIMEVERSION if present\r\n        //logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_VIT_SDKRUNTIMEVERSION, true);\r\n        //Mask VIT_PROXY if present\r\n        //logParmList = PayflowUtility.locateValueForName(logParmList, PayflowConstants.PARAM_VIT_PROXY, true);\r\n        return logParmList;\r\n    }\r\n\r\n    /**\r\n     * masks an xmlNodeValue\r\n     *\r\n     * @param xmlPayRequest Document\r\n     * @param nodeName      String\r\n     */\r\n    protected static void maskXmlNodeValue(Document xmlPayRequest, String nodeName) {\r\n        String retVal;\r\n        String maskValue = PayflowConstants.EMPTY_STRING;\r\n\r\n        if (xmlPayRequest != null && nodeName != null && nodeName.length() > 0) {\r\n            NodeList nodeList = xmlPayRequest.getElementsByTagName(nodeName);\r\n\r\n            if (nodeList != null && nodeList.getLength() == 1) {\r\n                ChildNode nodeElement = (ChildNode) nodeList.item(0);\r\n\r\n                if (nodeElement != null) {\r\n                    retVal = nodeElement.getTextContent();\r\n\r\n                    if (null != retVal) {\r\n                        for (int i = 0; i < retVal.length(); i++) {\r\n                            if (((nodeName.equals(PayflowConstants.XML_PARAM_ACCTNUM)) || (nodeName.equals(PayflowConstants.XML_PARAM_CARDNUM)) && (i < 6 || i > 11))) {\r\n                                maskValue = maskValue + retVal.charAt(i);\r\n                            } else {\r\n                                maskValue = maskValue + \"X\";\r\n                            }\r\n                        }\r\n                    }\r\n                    nodeElement.setTextContent(maskValue);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the inner text of a node from an XMLPay request\r\n     *\r\n     * @param xmlPayRequest String\r\n     * @param nodeName      String\r\n     * @return retVal String\r\n     */\r\n    protected static String getXmlPayNodeValue(String xmlPayRequest, String nodeName) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getXmlPayNodeValue(String,String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        String retVal = null;\r\n        try {\r\n            IPXmlReader xmlReader = new IPXmlReader(xmlPayRequest);\r\n            Document XmlPayDoc = xmlReader.getXmlDocumentElement();\r\n            retVal = getXmlNodeValue(XmlPayDoc, nodeName);\r\n        } catch (Exception ex) {\r\n            Logger.getInstance().log(ex.toString(), PayflowConstants.SEVERITY_WARN);\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getXmlPayNodeValue(String,String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n        return retVal;\r\n\r\n    }\r\n\r\n    /**\r\n     * Provides the status of the transaction based on the transaction response.\r\n     *\r\n     * @param transactionResponse String\r\n     * @return status String\r\n     */\r\n    public static String getStatus(String transactionResponse) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getStatus(String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        String status;\r\n        boolean isTrxRespXmlPay = false;\r\n        boolean nullTrxResp = false;\r\n        int index;\r\n        if (transactionResponse != null) {\r\n            index = transactionResponse.indexOf(PayflowConstants.XML_RESP_ID);\r\n            isTrxRespXmlPay = index >= 0;\r\n        } else {\r\n            nullTrxResp = true;\r\n        }\r\n\r\n        String trxResult = PayflowConstants.EMPTY_STRING;\r\n\r\n        if (!nullTrxResp) {\r\n            if (isTrxRespXmlPay) {\r\n                try {\r\n                    trxResult = getXmlPayNodeValue(transactionResponse, PayflowConstants.XML_PARAM_RESULT);\r\n                } catch (Exception ex) {\r\n                    Logger.getInstance().log(ex.toString(), PayflowConstants.SEVERITY_DEBUG);\r\n                }\r\n            } else {\r\n                trxResult = locateValueForName(transactionResponse, PayflowConstants.PARAM_RESULT, false);\r\n            }\r\n        }\r\n\r\n\r\n        if ((!nullTrxResp) && (\"0\".equals(trxResult))) {\r\n            status = \"Transaction Successful.\";\r\n        } else {\r\n            status = \"Transaction Failed.\";\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.getStatus(String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * @param context         Context\r\n     * @param isXmlPayRequest boolean\r\n     * @return errors Arraylist\r\n     */\r\n    protected static ArrayList alignContext(Context context, boolean isXmlPayRequest) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.alignContext(Context, boolean) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        ArrayList errors = context.getErrors();\r\n        ArrayList retVal = new ArrayList();\r\n        int errorCount = errors.size();\r\n        int index;\r\n        for (index = 0; index < errorCount; index++) {\r\n            ErrorObject error = (ErrorObject) errors.get(index);\r\n            String messageCode = error.getMessageCode();\r\n            Logger.getInstance().log(\"paypal.payflow.PayflowUtility.alignContext(Context,boolean) : messageCode = \" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n            if (error != null) {\r\n                if (messageCode != null && messageCode.length() > 0) {\r\n                    boolean msg1012 = false;\r\n                    boolean msg1013 = false;\r\n                    boolean msg1015 = false;\r\n                    boolean msg1016 = false;\r\n                    //Logger.getInstance().log(\"Step 1.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n\r\n                    if (\"MSG_1012\".equals(messageCode)) {\r\n                        msg1012 = true;\r\n                    } else if (\"MSG_1013\".equals(messageCode)) {\r\n                        msg1013 = true;\r\n                    } else if (\"MSG_1015\".equals(messageCode)) {\r\n                        msg1015 = true;\r\n                    } else if (\"MSG_1016\".equals(messageCode)) {\r\n                        msg1016 = true;\r\n                    }\r\n                    //Logger.getInstance().log(\"Step 2.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                    if (isXmlPayRequest) {\r\n                        //Logger.getInstance().log(\"Step 3.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                        if (msg1013 || msg1016) {\r\n                            retVal.add(error);\r\n                        } else {\r\n                            ErrorObject newError;\r\n                            //Logger.getInstance().log(\"Step 4.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                            if (msg1012) {\r\n                                ArrayList msgParams = error.getMessageParams();\r\n                                String[] newMsgParams = new String[]{(String) msgParams.get(0),\r\n                                        (String) msgParams.get(1)};\r\n                                newError = new ErrorObject(error.getSeverityLevel(), \"MSG_1013\", newMsgParams, error.getErrorStackTrace());\r\n                            } else if (msg1015) {\r\n                                ArrayList msgParams = error.getMessageParams();\r\n                                String[] newMsgParams = new String[]{(String) msgParams.get(0),\r\n                                        (String) msgParams.get(1)};\r\n                                newError = new ErrorObject(error.getSeverityLevel(), \"MSG_1016\", newMsgParams, error.getErrorStackTrace());\r\n                            } else {\r\n                                //Logger.getInstance().log(\"Step 5.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                                String errMessage = error.toString();\r\n                                newError = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, null, error.getSeverityLevel(), true, errMessage);\r\n                            }\r\n                            if (newError != null) {\r\n                                retVal.add(newError);\r\n                                //Logger.getInstance().log(\"Step 6.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                            }\r\n                        }\r\n                    } else {\r\n                        if (msg1012 || msg1015) {\r\n                            retVal.add(error);\r\n                        } else {\r\n                            ErrorObject newError;\r\n                            if (msg1013) {\r\n                                ArrayList msgParams = error.getMessageParams();\r\n                                String[] newMsgParams = new String[]{(String) msgParams.get(0),\r\n                                        (String) msgParams.get(1)};\r\n                                newError = new ErrorObject(error.getSeverityLevel(), \"MSG_1012\", newMsgParams, error.getErrorStackTrace());\r\n                                //Logger.getInstance().log(\"Step 9\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                            } else if (msg1016) {\r\n                               //Logger.getInstance().log(\"Step 7.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                                ArrayList msgParams = error.getMessageParams();\r\n                                String[] newMsgParams = new String[]{(String) msgParams.get(1),\r\n                                        (String) msgParams.get(2)};\r\n                                newError = new ErrorObject(error.getSeverityLevel(), \"MSG_1015\", newMsgParams, error.getErrorStackTrace());\r\n\r\n                            } else {\r\n                                //Logger.getInstance().log(\"Step 8.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                                String errMessage = error.toString();\r\n                                newError = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, null, error.getSeverityLevel(), false, errMessage);\r\n                            }\r\n\r\n                            if (newError != null) {\r\n                                retVal.add(newError);\r\n                                //Logger.getInstance().log(\"Step 10.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    ErrorObject newError = null;\r\n                    //Logger.getInstance().log(\"Step 11.\", PayflowConstants.SEVERITY_DEBUG);\r\n\r\n                    String errMessage = error.toString();\r\n                    if (errMessage != null && errMessage.length() > 0) {\r\n                        String result = PayflowConstants.EMPTY_STRING;\r\n                        String respMsg = PayflowConstants.EMPTY_STRING;\r\n                        //Logger.getInstance().log(\"Step 12.\" + errMessage, PayflowConstants.SEVERITY_DEBUG);\r\n                        boolean errIsXmlPay = (errMessage.indexOf(PayflowConstants.XML_RESP_ID) >= 0);\r\n                        //Check whether the error string is in nvp format\r\n                        // or xml pay format.\r\n                        if (errIsXmlPay) {\r\n                            //Try to get values in nodes Result, RespMsg\r\n                            try {\r\n                                //Logger.getInstance().log(\"Step 13.\" + errMessage, PayflowConstants.SEVERITY_DEBUG);\r\n                                result = PayflowUtility.getXmlPayNodeValue(errMessage, PayflowConstants.XML_PARAM_RESULT);\r\n                                respMsg = PayflowUtility.getXmlPayNodeValue(errMessage, PayflowConstants.XML_PARAM_MESSAGE);\r\n                            } catch (Exception ex) {\r\n                                Logger.getInstance().log(ex.toString(), PayflowConstants.SEVERITY_DEBUG);\r\n                            }\r\n                        } else {\r\n                            //Try to get RESULT , RESPMSG from the error if\r\n                            // available.\r\n                            //Logger.getInstance().log(\"Step 14.\" + errMessage, PayflowConstants.SEVERITY_DEBUG);\r\n                            result = PayflowUtility.locateValueForName(errMessage, PayflowConstants.PARAM_RESULT, false);\r\n                            respMsg = PayflowUtility.locateValueForName(errMessage, PayflowConstants.PARAM_RESPMSG, false);\r\n                        }\r\n\r\n                        if (result != null && result.length() > 0 && respMsg != null && respMsg.length() > 0) {\r\n                            //Logger.getInstance().log(\"Step 15.\" + result, PayflowConstants.SEVERITY_DEBUG);\r\n                            StringBuffer newErrMessage;\r\n                            if (isXmlPayRequest && !errIsXmlPay) {\r\n                                newErrMessage = new StringBuffer(\"<XMLPayResponse xmlns='http://www.PayPal.com/XMLPay'\");\r\n                                newErrMessage.append(\"><ResponseData><TransactionResults><TransactionResult><Result>\");\r\n                                newErrMessage.append(result);\r\n                                newErrMessage.append(\"</Result><Message>\");\r\n                                newErrMessage.append(respMsg);\r\n                                newErrMessage.append(\"</Message></TransactionResult></TransactionResults></ResponseData></XMLPayResponse>\");\r\n                                newError = new ErrorObject(error.getSeverityLevel(), PayflowConstants.EMPTY_STRING, newErrMessage.toString());\r\n\r\n                            } else if (!isXmlPayRequest && errIsXmlPay) {\r\n                                newErrMessage = new StringBuffer(PayflowConstants.PARAM_RESULT);\r\n                                newErrMessage.append(PayflowConstants.SEPARATOR_NVP);\r\n                                newErrMessage.append(result);\r\n                                newErrMessage.append(PayflowConstants.DELIMITER_NVP);\r\n                                newErrMessage.append(PayflowConstants.PARAM_RESPMSG);\r\n                                newErrMessage.append(PayflowConstants.SEPARATOR_NVP);\r\n                                newErrMessage.append(respMsg);\r\n\r\n                                newError = new ErrorObject(error.getSeverityLevel(), PayflowConstants.EMPTY_STRING, newErrMessage.toString());\r\n                            } else {\r\n                                //Logger.getInstance().log(\"Step 18.\" + messageCode, PayflowConstants.SEVERITY_DEBUG);\r\n                                newError = new ErrorObject(error.getSeverityLevel(), PayflowConstants.EMPTY_STRING, errMessage);\r\n                            }\r\n                        } else {\r\n                            StringBuffer NewErrMessage;\r\n                            if (isXmlPayRequest) {\r\n                                //Logger.getInstance().log(\"Step 19.\", PayflowConstants.SEVERITY_DEBUG);\r\n                                NewErrMessage = new StringBuffer(\"<XMLPayResponse xmlns='http://www.paypal.com/XMLPay'\");\r\n\r\n                                NewErrMessage.append(\"><ResponseData><TransactionResults><TransactionResult><Result>\");\r\n                                NewErrMessage.append((String) PayflowConstants.CommErrorCodes.get(PayflowConstants.E_UNKNOWN_STATE));\r\n                                NewErrMessage.append(\"</Result><Message>\");\r\n                                NewErrMessage.append(PayflowConstants.CommErrorMessages.get(PayflowConstants.E_UNKNOWN_STATE));\r\n                                NewErrMessage.append(\" \");\r\n                                NewErrMessage.append(errMessage);\r\n                                NewErrMessage.append(\"</Message></TransactionResult></TransactionResults></ResponseData></XMLPayResponse>\");\r\n                            } else {\r\n                                NewErrMessage = new StringBuffer(PayflowConstants.PARAM_RESULT);\r\n                                NewErrMessage.append(PayflowConstants.SEPARATOR_NVP);\r\n                                NewErrMessage.append(PayflowConstants.CommErrorCodes.get(PayflowConstants.E_UNKNOWN_STATE));\r\n                                NewErrMessage.append(PayflowConstants.DELIMITER_NVP);\r\n                                NewErrMessage.append(PayflowConstants.PARAM_RESPMSG);\r\n                                NewErrMessage.append(PayflowConstants.SEPARATOR_NVP);\r\n                                NewErrMessage.append(PayflowConstants.CommErrorMessages.get(PayflowConstants.E_UNKNOWN_STATE));\r\n                                NewErrMessage.append(\" \");\r\n                                NewErrMessage.append(errMessage);\r\n                            }\r\n                            //Logger.getInstance().log(\"Step 21.\" + errMessage, PayflowConstants.SEVERITY_DEBUG);\r\n                            newError = new ErrorObject(error.getSeverityLevel(), PayflowConstants.EMPTY_STRING, NewErrMessage.toString());\r\n                        }\r\n                    }\r\n                    if (newError != null) {\r\n                        //Logger.getInstance().log(\"Step 22.\" + errMessage, PayflowConstants.SEVERITY_DEBUG);\r\n                        retVal.add(newError);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowUtility.alignContext(Context, boolean) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * This function will be used to form the string with the context details.\r\n     *\r\n     * @param msgBody   String\r\n     * @param msgParams String[]\r\n     * @return msgBody String\r\n     */\r\n    protected static String format(String msgBody, String[] msgParams) {\r\n\r\n        if (msgBody != null && msgBody.length() != 0) {\r\n            //split the string by {} and replace the parameter recursively\r\n            for (int i = 0; i <= msgParams.length - 1; i++) {\r\n                msgBody = new StringBuffer(msgBody).replace\r\n                        (msgBody.indexOf('{'),\r\n                                msgBody.indexOf('}') + 1,\r\n                                msgParams[i]).toString();\r\n            }\r\n        }\r\n        return msgBody;\r\n    }\r\n\r\n    /**\r\n     * Provides the status (as a String) of the transaction based on the transaction response.\r\n     *\r\n     * @param resp - Response obtained from PayPal Payment Gateway.\r\n     * @return - String result for the transaction: If Transaction Result = 0 then 'Transaction Successful.'\r\n     *         else 'Transaction Failed.'\r\n     */\r\n    public static String getStatus(Response resp) {\r\n        String status;\r\n        TransactionResponse trxnResponse = resp.getTransactionResponse();\r\n        if (trxnResponse != null && 0 == (trxnResponse.getResult())) {\r\n            status = \"Transaction Successful.\";\r\n        } else {\r\n            status = \"Transaction Failed.\";\r\n        }\r\n\r\n        return status;\r\n    }\r\n\r\n    /**\r\n     * Returns a boolean value indicating the status of the transaction\r\n     *\r\n     * @param resp - Response obtained from PayPal Payment Gateway.\r\n     * @return - true if transaction was success\r\n     */\r\n    public static boolean getTransactionStatus(Response resp) {\r\n        boolean status = false;\r\n        TransactionResponse trxnResponse = resp.getTransactionResponse();\r\n        if (trxnResponse != null) {\r\n            status = (0 == trxnResponse.getResult());\r\n        }\r\n        return status;\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/base/paypal/payflow/PayflowUtility.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/base/paypal/payflow/PayflowUtility.java	(date 1600061239253)
@@ -495,24 +495,24 @@
 
         IPXmlReader xmlReader = new IPXmlReader(parmList);
         Document xmlPayRequest = xmlReader.getXmlDocumentElement();
-        //Mask ACCT if present : Corresponding XmlPay element --> AcctNum or CardNum
+        //Mask ACCT if present : Corresponding XmlPay element -- AcctNum or CardNum
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_ACCTNUM);
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_CARDNUM);
-        //Mask EXPDATE if present : Corresponding XmlPay element --> ExpDate
+        //Mask EXPDATE if present : Corresponding XmlPay element -- ExpDate
         //PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_EXPDATE);
-        //Mask SWIPE if present : Corresponding XmlPay element --> MagData
+        //Mask SWIPE if present : Corresponding XmlPay element -- MagData
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_MAGDATA);
-        //Mask MICR if present : Corresponding XmlPay element --> MICR or MagData
+        //Mask MICR if present : Corresponding XmlPay element -- MICR or MagData
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_MICR);
-        //Mask CVV2 if present : Corresponding XmlPay element --> CVNum
+        //Mask CVV2 if present : Corresponding XmlPay element -- CVNum
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_CVNUM);
-        //Mask PWD if present : Corresponding XmlPay element --> Password
+        //Mask PWD if present : Corresponding XmlPay element -- Password
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_PASSWORD);
-        //Mask DL if present : Corresponding XmlPay element --> DL
+        //Mask DL if present : Corresponding XmlPay element -- DL
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_DL);
-        //Mask SS if present : Corresponding XmlPay element --> CVNum
+        //Mask SS if present : Corresponding XmlPay element -- CVNum
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_SS);
-        //Mask DOB if present : Corresponding XmlPay element --> DOB
+        //Mask DOB if present : Corresponding XmlPay element -- DOB
         PayflowUtility.maskXmlNodeValue(xmlPayRequest, PayflowConstants.XML_PARAM_DOB);
 
         // This class was deprecated in Xerces 2.9.0.  Replaced with DOM Level 3 LSSerializer.
Index: src/sdk/dataobjects/paypal/payflow/CheckTender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Check tender related information.\r\n * CheckPayment the Payment devices associated with this tender type.\r\n * {@link CheckPayment}\r\n */\r\npublic final class CheckTender extends BaseTender {\r\n    /**\r\n     * This constructor is used to create a CheckTender\r\n     * with CheckPayment as the payment device\r\n     *\r\n     * @param check CheckTender\r\n     *  Maps to Payflow Parameter: TENDER\r\n     * <p/>\r\n     * .............\r\n     * //check is the populated CheckPaymentobject.\r\n     * .............\r\n     * <p/>\r\n     * //Create the Tender object\r\n     * CheckTender tender = new CardTender(check);\r\n     */\r\n    public CheckTender(CheckPayment check) {\r\n        super(PayflowConstants.TENDERTYPE_TELECHECK, check);\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/CheckTender.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/CheckTender.java	(date 1600056996349)
@@ -12,11 +12,11 @@
      *
      * @param check CheckTender
      *  Maps to Payflow Parameter: TENDER
-     * <p/>
+     *  * <p>
      * .............
      * //check is the populated CheckPaymentobject.
      * .............
-     * <p/>
+     *  * <p>
      * //Create the Tender object
      * CheckTender tender = new CardTender(check);
      */
Index: src/sdk/dataobjects/paypal/payflow/CardTender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Card tender related information.\r\n * CreditCard, PurchaseCard and SwipeCard are the Payment devices associated with this tender type.\r\n * {@link CreditCard}\r\n * {@link PurchaseCard}\r\n * {@link SwipeCard}\r\n */\r\npublic final class CardTender extends BaseTender {\r\n\r\n    /**\r\n     * This constructor is used to create a CardTender\r\n     * with CreditCard as the payment device\r\n     *\r\n     * @param card CreditCard\r\n     *  Maps to Payflow Parameter: TENDER\r\n     * <p/>\r\n     * .............\r\n     * //card is the populated CreditCard object.\r\n     * .............\r\n     * <p/>\r\n     * //Create the Tender object\r\n     * CardTender tender = new CardTender(card);\r\n     */\r\n    public CardTender(CreditCard card) {\r\n        super(PayflowConstants.TENDERTYPE_CARD, card);\r\n    }\r\n\r\n    /**\r\n     * This constructor is used to create a CardTender\r\n     * with PurchaseCard as the payment device\r\n     *\r\n     * @param purCard PurchaseCard\r\n     *  Maps to Payflow Parameter: TENDER\r\n     * <p/>\r\n     * .............\r\n     * //purCard is the populated PurchaseCard object.\r\n     * .............\r\n     * <p/>\r\n     * //Create the Tender object\r\n     * CardTender tender = new CardTender(purCard);\r\n     */\r\n    public CardTender(PurchaseCard purCard) {\r\n        super(PayflowConstants.TENDERTYPE_CARD, purCard);\r\n    }\r\n\r\n    /**\r\n     * This constructor is used to create a CardTender\r\n     * with SwipeCard as the payment device\r\n     *\r\n     * @param swpCard CardTender\r\n     *  Maps to Payflow Parameter: TENDER\r\n     * <p/>\r\n     * .............\r\n     * //swpCard is the populated SwipeCard object.\r\n     * .............\r\n     * <p/>\r\n     * //Create the Tender object\r\n     * CardTender tender = new CardTender(swpCard);\r\n     */\r\n    public CardTender(SwipeCard swpCard) {\r\n        super(PayflowConstants.TENDERTYPE_CARD, swpCard);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/CardTender.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/CardTender.java	(date 1600056997773)
@@ -15,11 +15,11 @@
      *
      * @param card CreditCard
      *  Maps to Payflow Parameter: TENDER
-     * <p/>
+     *  * <p>
      * .............
      * //card is the populated CreditCard object.
      * .............
-     * <p/>
+     *  * <p>
      * //Create the Tender object
      * CardTender tender = new CardTender(card);
      */
@@ -33,11 +33,11 @@
      *
      * @param purCard PurchaseCard
      *  Maps to Payflow Parameter: TENDER
-     * <p/>
+     *  * <p>
      * .............
      * //purCard is the populated PurchaseCard object.
      * .............
-     * <p/>
+     *  * <p>
      * //Create the Tender object
      * CardTender tender = new CardTender(purCard);
      */
@@ -51,11 +51,11 @@
      *
      * @param swpCard CardTender
      *  Maps to Payflow Parameter: TENDER
-     * <p/>
+     *  * <p>
      * .............
      * //swpCard is the populated SwipeCard object.
      * .............
-     * <p/>
+     *  * <p>
      * //Create the Tender object
      * CardTender tender = new CardTender(swpCard);
      */
Index: src/sdk/dataobjects/paypal/payflow/BankAcct.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for BankAcct information.\r\n * BankAcct is associated with ACHTender. {@link ACHTender}\r\n */\r\npublic final class BankAcct extends PaymentDevice {\r\n\r\n    private String aba;\r\n    private String acctType;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param acct Bank Account number\r\n     * @param aba  Aba number\r\n     *             BankAcct should be used to perform the transactions\r\n     *             in which the user provides his bank account details for\r\n     *             the online payment processing.\r\n     *             <p/>\r\n     *  //Create the BankAcct object\r\n     * BankAcct account = new BankAcct(\"XXXXXXXXXXX\",\"XXXXXXXXXXX\");\r\n     * </p>\r\n     */\r\n    public BankAcct(String acct, String aba) {\r\n        super(acct);\r\n        this.aba = aba;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        //Add ABA and ACCTTYPE to parameter list.\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ABA, aba));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ACCTTYPE, acctType));\r\n    }\r\n\r\n    /**\r\n     * Gets the aba value.\r\n     * Target Bank's transit ABA routing number.Appies only to ACH transactions.(8-digit number)\r\n     *\r\n     * @return String\r\n     *         <p/>\r\n     *  Maps to Payflow Parameters as follows: ABA\r\n     * </p>\r\n     */\r\n    public String getAba() {\r\n        return aba;\r\n    }\r\n\r\n    /**\r\n     * Gets the Customer's bank account type.\r\n     *\r\n     * @return String\r\n     *         <p/>\r\n     *         Allowed AcctType values are:\r\n     *         {@paypal.listtable}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.lth} ACCTTYPE {@paypal.elth}\r\n     *         {@paypal.lth}Description{@paypal.elth}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} C {@paypal.eltd}\r\n     *         {@paypal.ltd} Checking account {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} S {@paypal.eltd}\r\n     *         {@paypal.ltd} Savings account {@paypal.ltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.endlisttable}\r\n     *         </p>\r\n     *         <p/>\r\n     *  Maps to Payflow Parameters as follows: ACCTTYPE\r\n     * </p>\r\n     */\r\n    public String getAcctType() {\r\n        return acctType;\r\n    }\r\n\r\n    /**\r\n     * Sets the Customer's bank account type.\r\n     *\r\n     * @param acctType <p/>\r\n     *                 Allowed AcctType values are:\r\n     *                 {@paypal.listtable}\r\n     *                 {@paypal.ltr}\r\n     *                 {@paypal.lth} ACCTTYPE {@paypal.elth}\r\n     *                 {@paypal.lth}Description{@paypal.elth}\r\n     *                 {@paypal.eltr}\r\n     *                 {@paypal.ltr}\r\n     *                 {@paypal.ltd} C {@paypal.eltd}\r\n     *                 {@paypal.ltd} Checking account {@paypal.eltd}\r\n     *                 {@paypal.eltr}\r\n     *                 {@paypal.ltr}\r\n     *                 {@paypal.ltd} S {@paypal.eltd}\r\n     *                 {@paypal.ltd} Savings account {@paypal.ltd}\r\n     *                 {@paypal.eltr}\r\n     *                 {@paypal.endlisttable}\r\n     *                 </p>\r\n     *                 <p/>\r\n     *  Maps to Payflow Parameters as follows: ACCTTYPE\r\n     * </p>\r\n     */\r\n    public void setAcctType(String acctType) {\r\n        this.acctType = acctType;\r\n    }\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/BankAcct.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/BankAcct.java	(date 1600057179410)
@@ -17,7 +17,7 @@
      *             BankAcct should be used to perform the transactions
      *             in which the user provides his bank account details for
      *             the online payment processing.
-     *             <p/>
+     *              * <p>
      *  //Create the BankAcct object
      * BankAcct account = new BankAcct("XXXXXXXXXXX","XXXXXXXXXXX");
      * </p>
@@ -39,7 +39,7 @@
      * Target Bank's transit ABA routing number.Appies only to ACH transactions.(8-digit number)
      *
      * @return String
-     *         <p/>
+     *          * <p>
      *  Maps to Payflow Parameters as follows: ABA
      * </p>
      */
@@ -51,26 +51,16 @@
      * Gets the Customer's bank account type.
      *
      * @return String
-     *         <p/>
-     *         Allowed AcctType values are:
-     *         {@paypal.listtable}
-     *         {@paypal.ltr}
-     *         {@paypal.lth} ACCTTYPE {@paypal.elth}
-     *         {@paypal.lth}Description{@paypal.elth}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} C {@paypal.eltd}
-     *         {@paypal.ltd} Checking account {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} S {@paypal.eltd}
-     *         {@paypal.ltd} Savings account {@paypal.ltd}
-     *         {@paypal.eltr}
-     *         {@paypal.endlisttable}
-     *         </p>
-     *         <p/>
-     *  Maps to Payflow Parameters as follows: ACCTTYPE
-     * </p>
+     *
+     * Allowed AcctType values are:
+     *
+     * ACCTTYPE  - Description
+     *
+     * C - Checking account
+     * S - Savings account
+     *
+     * Maps to Payflow Parameters as follows: ACCTTYPE
+     *
      */
     public String getAcctType() {
         return acctType;
@@ -79,24 +69,15 @@
     /**
      * Sets the Customer's bank account type.
      *
-     * @param acctType <p/>
-     *                 Allowed AcctType values are:
-     *                 {@paypal.listtable}
-     *                 {@paypal.ltr}
-     *                 {@paypal.lth} ACCTTYPE {@paypal.elth}
-     *                 {@paypal.lth}Description{@paypal.elth}
-     *                 {@paypal.eltr}
-     *                 {@paypal.ltr}
-     *                 {@paypal.ltd} C {@paypal.eltd}
-     *                 {@paypal.ltd} Checking account {@paypal.eltd}
-     *                 {@paypal.eltr}
-     *                 {@paypal.ltr}
-     *                 {@paypal.ltd} S {@paypal.eltd}
-     *                 {@paypal.ltd} Savings account {@paypal.ltd}
-     *                 {@paypal.eltr}
-     *                 {@paypal.endlisttable}
-     *                 </p>
-     *                 <p/>
+     * @param acctType  * <p>
+     *
+     * Allowed AcctType values are:
+     *
+     * ACCTTYPE  - Description
+     *
+     * C - Checking account
+     * S - Savings account
+     *
      *  Maps to Payflow Parameters as follows: ACCTTYPE
      * </p>
      */
Index: src/sdk/dataobjects/paypal/payflow/PayPalTender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n/**\r\n * Used for PayPal tender related information.\r\n * This tender takes in ExpressCheckoutRequest {@link ExpressCheckoutRequest}\r\n * or a CreditCard {@link CreditCard} depending on the type of transaction.\r\n * This can be used for ExpressCheckout as well as Direct payments.\r\n */\r\npublic class PayPalTender extends BaseTender {\r\n\r\n    private ExpressCheckoutRequest ecRequest = null;\r\n\r\n    /**\r\n     * This constructor is used to create a PayPalTender\r\n     * with CreditCard as the payment device\r\n     *\r\n     * @param creditCard CreditCard\r\n     *  Maps to Payflow Parameter: TENDER\r\n     * <p/>\r\n     * .............\r\n     * //creditCard is the populated CreditCard object.\r\n     * .............\r\n     * <p/>\r\n     * //Create the Tender object\r\n     * PayPalTender tender = new PayPalTender(creditCard);\r\n     */\r\n    public PayPalTender(CreditCard creditCard) {\r\n        super(PayflowConstants.TENDERTYPE_PAYPAL, creditCard);\r\n    }\r\n\r\n    /**\r\n     * This constructor is used to create a PayPalTender\r\n     * with ExpressCheckoutRequest.This is used for a ExpressCheckout transaction.\r\n     *\r\n     * @param ecReq ExpressCheckoutRequest\r\n     *  Maps to Payflow Parameter: TENDER\r\n     * <p/>\r\n     * .............\r\n     * //ecReq is the populated ExpressCheckoutRequest object.\r\n     * .............\r\n     * <p/>\r\n     * //Create the Tender object\r\n     * PayPalTender tender = new PayPalTender(ecReq);\r\n     */\r\n    public PayPalTender(ExpressCheckoutRequest ecReq) {\r\n        super(PayflowConstants.TENDERTYPE_PAYPAL, null);\r\n        ecRequest = ecReq;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        if (ecRequest != null) {\r\n            ecRequest.setRequestBuffer(this.getRequestBuffer());\r\n            ecRequest.generateRequest();\r\n        }\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/PayPalTender.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/PayPalTender.java	(date 1600056996723)
@@ -17,11 +17,11 @@
      *
      * @param creditCard CreditCard
      *  Maps to Payflow Parameter: TENDER
-     * <p/>
+     *  * <p>
      * .............
      * //creditCard is the populated CreditCard object.
      * .............
-     * <p/>
+     *  * <p>
      * //Create the Tender object
      * PayPalTender tender = new PayPalTender(creditCard);
      */
@@ -35,11 +35,11 @@
      *
      * @param ecReq ExpressCheckoutRequest
      *  Maps to Payflow Parameter: TENDER
-     * <p/>
+     *  * <p>
      * .............
      * //ecReq is the populated ExpressCheckoutRequest object.
      * .............
-     * <p/>
+     *  * <p>
      * //Create the Tender object
      * PayPalTender tender = new PayPalTender(ecReq);
      */
Index: src/sdk/dataobjects/paypal/payflow/BillTo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Billing Address information\r\n * <p>Billing address is Cardholder's address information.</p>\r\n * <p>Following example shows how to use BillTo.</p>\r\n *\r\n *  .................\r\n * // inv is the Invoice object.\r\n * .................\r\n * <p/>\r\n * // Set the Billing Address details.\r\n * BillTo bill = new BillTo();\r\n * bill.setBillToStreet( \"123 Main St.\");\r\n * bill.setBillToZip(\"12345\");\r\n * inv.setBillTo (bill);\r\n * .................\r\n */\r\n\r\npublic final class BillTo extends Address {\r\n\r\n    private String billToHomePhone;\r\n    private String billToCompanyName;\r\n\r\n    /**\r\n     * Constructor.\r\n     * <p>Billing address is Cardholder's address information.</p>\r\n     */\r\n    public BillTo() {\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing Street.\r\n     * <p>Cardholder's billing street address\r\n     * (used for AVS and reporting).</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: BILLTOSTREET</p>\r\n     */\r\n    public String getBillToStreet() {\r\n        return super.getAddressStreet();\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing Street.\r\n     * <p>Cardholder's billing street address\r\n     * (used for AVS and reporting).</P>\r\n     *\r\n     * @param billToStreet String\r\n     *  <p>Maps to Payflow Parameter: BILLTOSTREET</p>\r\n     */\r\n    public void setBillToStreet(String billToStreet) {\r\n        super.setAddressStreet(billToStreet);\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing Street2.\r\n     * <p>Cardholder's billing 2nd line street address.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: BILLTOSTREET2</p>\r\n     */\r\n    public String getBillToStreet2() {\r\n        return super.getAddressStreet2();\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing Street.\r\n     * <p>Cardholder's billing 2nd line street address.</P>\r\n     *\r\n     * @param billToStreet2 String\r\n     *  <p>Maps to Payflow Parameter: BILLTOSTREET2</p>\r\n     */\r\n    public void setBillToStreet2(String billToStreet2) {\r\n        super.setAddressStreet2(billToStreet2);\r\n    }\r\n\r\n    /**\r\n     * Gets the city\r\n     * <p>Cardholder's billing city.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: BILLTOCITY</p>\r\n     */\r\n    public String getBillToCity() {\r\n        return super.getAddressCity();\r\n    }\r\n\r\n    /**\r\n     * Sets the city\r\n     * <p>Cardholder's billing city.</P>\r\n     *\r\n     * @param billToCity String\r\n     *  <p>Maps to Payflow Parameter: BILLTOCITY</p>\r\n     */\r\n    public void setBillToCity(String billToCity) {\r\n        super.setAddressCity(billToCity);\r\n    }\r\n\r\n    /**\r\n     * Gets the State\r\n     * <p>Cardholder's billing state code.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: BILLTOSTATE</p>\r\n     */\r\n    public String getBillToState() {\r\n        return super.getAddressState();\r\n    }\r\n\r\n    /**\r\n     * Sets the State\r\n     * <p>Cardholder's billing state code./P>\r\n     *\r\n     * @param billToState String\r\n     *  <p>Maps to Payflow Parameter: BILLTOSTATE</p>\r\n     */\r\n    public void setBillToState(String billToState) {\r\n        super.setAddressState(billToState);\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing Zip.\r\n     * <p>Account holder's 5- to 9-digit postal code\r\n     * (called ZIP code in the USA).\r\n     * Do not use spaces, dashes,\r\n     * or non-numeric characters.\r\n     * The postal code is verified by the\r\n     * AVS service.</P>\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: BILLTOZIP</p>\r\n     */\r\n    public String getBillToZip() {\r\n        return super.getAddressZip();\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing Zip.\r\n     * <p>UAccount holder's 5- to 9-digit postal code\r\n     * (called ZIP code in the USA).\r\n     * Do not use spaces, dashes,\r\n     * or non-numeric characters.\r\n     * The postal code is verified by the\r\n     * AVS service.</P>\r\n     *\r\n     * @param billToZip String\r\n     *  <p>Maps to Payflow Parameter: BILLTOZIP</p>\r\n     */\r\n    public void setBillToZip(String billToZip) {\r\n        super.setAddressZip(billToZip);\r\n    }\r\n\r\n    /**\r\n     * Gets the first name.\r\n     * <p>Cardholder's first name.</P>\r\n     *\r\n     * @return firstName String\r\n     *  <p>Maps to Payflow Parameter: BILLTOFIRSTNAME</p>\r\n     */\r\n    public String getBillToFirstName() {\r\n        return super.getAddressFirstName();\r\n    }\r\n\r\n    /**\r\n     * Sets the first name.\r\n     * <p>Cardholder's first name.</P>\r\n     *\r\n     * @param billToFirstName String\r\n     *  <p>Maps to Payflow Parameter: BILLTOFIRSTNAME</p>\r\n     */\r\n    public void setBillToFirstName(String billToFirstName) {\r\n        super.setAddressFirstName(billToFirstName);\r\n    }\r\n\r\n    /**\r\n     * Gets the middle name.\r\n     * <p>Cardholder's middle name.</P>\r\n     *\r\n     * @return billToMiddleName String\r\n     *  <p>Maps to Payflow Parameter: BILLTOMIDDLENAME</p>\r\n     */\r\n    public String getBillToMiddleName() {\r\n        return super.getAddressMiddleName();\r\n    }\r\n\r\n    /**\r\n     * Sets the middle name.\r\n     * <p>Cardholder's middle name.</P>\r\n     *\r\n     * @param billToMiddleName String\r\n     *  <p>Maps to Payflow Parameter: BILLTOMIDDLENAME</p>\r\n     */\r\n    public void setBillToMiddleName(String billToMiddleName) {\r\n        super.setAddressMiddleName(billToMiddleName);\r\n    }\r\n\r\n    /**\r\n     * Gets the last name.\r\n     * <p>Cardholder's last name.</P>\r\n     *\r\n     * @return BillToLastName String\r\n     *  <p>Maps to Payflow Parameter: BILLTOLASTNAME</p>\r\n     */\r\n    public String getBillToLastName() {\r\n        return super.getAddressLastName();\r\n    }\r\n\r\n    /**\r\n     * Sets the last name.\r\n     * <p>Cardholder's last name.</P>\r\n     *\r\n     * @param billToLastName String\r\n     *  <p>Maps to Payflow Parameter: BILLTOLASTNAME</p>\r\n     */\r\n    public void setBillToLastName(String billToLastName) {\r\n        super.setAddressLastName(billToLastName);\r\n    }\r\n\r\n    /**\r\n     * Gets the billing phone number.\r\n     * <p>Cardholder's telephone number.</P>\r\n     *\r\n     * @return billToPhone String\r\n     *  <p>Maps to Payflow Parameter: PHONENUM</p>\r\n     */\r\n    public String getBillToPhone() {\r\n        return super.getAddressPhone();\r\n    }\r\n\r\n    /**\r\n     * Sets the billing phone number.\r\n     * <p>Cardholder's telephone number.</P>\r\n     *\r\n     * @param billToPhone String\r\n     *  <p>Maps to Payflow Parameter: PHONENUM</p>\r\n     */\r\n    public void setBillToPhone(String billToPhone) {\r\n        super.setAddressPhone(billToPhone);\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing Phone2.\r\n     * <p>Cardholder's 2nd telephone number.</P>\r\n     *\r\n     * @return billToPhone2 String\r\n     *  <p>Maps to Payflow Parameter: BILLTOPHONE2</p>\r\n     */\r\n    public String getBillToPhone2() {\r\n        return super.getAddressPhone2();\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing Phone2.\r\n     * <p>Cardholder's 2nd telephone number./P>\r\n     *\r\n     * @param billToPhone2 String\r\n     *  <p>Maps to Payflow Parameter: BILLTOPHONE2</p>\r\n     */\r\n    public void setBillToPhone2(String billToPhone2) {\r\n        super.setAddressPhone2(billToPhone2);\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing Fax\r\n     * <p>Cardholder's fax address.</P>\r\n     *\r\n     * @return fax String\r\n     *  <p>Maps to Payflow Parameter: BILLTOFAX</p>\r\n     */\r\n    public String getBillToFax() {\r\n        return super.getAddressFax();\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing Fax\r\n     * <p>Cardholder's fax address.</P>\r\n     *\r\n     * @param billToFax String\r\n     *  <p>Maps to Payflow Parameter: BILLTOFAX</p>\r\n     */\r\n    public void setBillToFax(String billToFax) {\r\n        super.setAddressFax(billToFax);\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing Email.\r\n     * <p>Cardholder's e-mail address</P>\r\n     *\r\n     * @return email String\r\n     *  <p>Maps to Payflow Parameter: BILLTOEMAIL</p>\r\n     */\r\n    public String getBillToEmail() {\r\n        return super.getAddressEmail();\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing Email.\r\n     * <p>Cardholder's e-mail address</P>\r\n     *\r\n     * @param billToEmail String\r\n     *  <p>Maps to Payflow Parameter: BILLTOEMAIL</p>\r\n     */\r\n    public void setBillToEmail(String billToEmail) {\r\n        super.setAddressEmail(billToEmail);\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing Country.\r\n     * <p>Cardholder's billing country code</P>\r\n     *\r\n     * @return billToCountry String\r\n     *  <p>Maps to Payflow Parameter: BILLTOCOUNTRY</p>\r\n     */\r\n    public String getBillToCountry() {\r\n        return super.getAddressCountry();\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing Country.\r\n     * <p>Cardholder's billing country code</P>\r\n     *\r\n     * @param billToCountry String\r\n     *  <p>Maps to Payflow Parameter: BILLTOCOUNTRY</p>\r\n     */\r\n    public void setBillToCountry(String billToCountry) {\r\n        super.setAddressCountry(billToCountry);\r\n    }\r\n\r\n    /**\r\n     * Gets the Billing HomePhone.\r\n     * <p>Cardholder's home telephone number.</P>\r\n     *\r\n     * @return homePhone String\r\n     *  <p>Maps to Payflow Parameter: HOMEPHONE</p>\r\n     */\r\n    public String getBillToHomePhone() {\r\n        return billToHomePhone;\r\n    }\r\n\r\n    /**\r\n     * Sets the Billing HomePhone.\r\n     * <p>Cardholder's home telephone number.</P>\r\n     *\r\n     * @param billToHomePhone String\r\n     *  <p>Maps to Payflow Parameter: HOMEPHONE</p>\r\n     */\r\n    public void setBillToHomePhone(String billToHomePhone) {\r\n        this.billToHomePhone = billToHomePhone;\r\n    }\r\n\r\n    /**\r\n     * Gets the Company Name.\r\n     *\r\n     * @return String\r\n     *  <p>Maps to Payflow Parameter: COMPANYNAME</p>\r\n     */\r\n\r\n    public String getBillToCompanyName() {\r\n        return billToCompanyName;\r\n    }\r\n\r\n    /**\r\n     * Sets the Company Name.\r\n     *\r\n     * @param billToCompanyName String\r\n     *  <p>Maps to Payflow Parameter: COMPANYNAME</p>\r\n     */\r\n    public void setBillToCompanyName(String billToCompanyName) {\r\n        this.billToCompanyName = billToCompanyName;\r\n    }\r\n\r\n\r\n    /**\r\n     * This method copies the common contents\r\n     * from billing to shipping address.\r\n     * <p>This method can be used to\r\n     * populate the shipping addresses directly\r\n     * from the billing addresses when\r\n     * both are the same.</p>\r\n     *\r\n     * @return shipTo ShipTo\r\n     *  ................\r\n     * //bill is the object of\r\n     * //billTo populated with\r\n     * //the billing addresses.\r\n     * ................\r\n     * <p/>\r\n     * <p/>\r\n     * ShipTo ship;\r\n     * <p/>\r\n     * //Populate shipping addresses\r\n     * //from billing addresses.\r\n     * ship = bill.copy();\r\n     * <p/>\r\n     * ................\r\n     */\r\n\r\n    public ShipTo copy() {\r\n        ShipTo copyObject = new ShipTo();\r\n        copyObject.setAddressCity(this.getAddressCity());\r\n        copyObject.setAddressCountry(this.getAddressCountry());\r\n        copyObject.setAddressEmail(this.getAddressEmail());\r\n        copyObject.setAddressFax(this.getAddressFax());\r\n        copyObject.setAddressFirstName(this.getAddressFirstName());\r\n        copyObject.setAddressLastName(this.getAddressLastName());\r\n        copyObject.setAddressMiddleName(this.getAddressMiddleName());\r\n        copyObject.setAddressPhone2(this.getAddressPhone2());\r\n        copyObject.setAddressPhone(this.getAddressPhone());\r\n        copyObject.setAddressState(this.getAddressState());\r\n        copyObject.setAddressStreet(this.getAddressStreet());\r\n        copyObject.setAddressStreet2(this.getAddressStreet2());\r\n        copyObject.setAddressZip(this.getAddressZip());\r\n        return copyObject;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_STREET, this.getBillToStreet()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_STREET2, this.getBillToStreet2()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CITY, this.getBillToCity()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_STATE, this.getBillToState()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BILLTOCOUNTRY, this.getBillToCountry()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ZIP, this.getBillToZip()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PHONENUM, this.getBillToPhone()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_BILLTOPHONE2, this.getBillToPhone2()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_EMAIL, this.getBillToEmail()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_FAX, this.getBillToFax()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_FIRSTNAME, this.getBillToFirstName()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MIDDLENAME, this.getBillToMiddleName()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_LASTNAME, this.getBillToLastName()));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_HOMEPHONE, billToHomePhone));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_COMPANYNAME, billToCompanyName));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/BillTo.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/BillTo.java	(date 1600059072710)
@@ -8,7 +8,7 @@
  *  .................
  * // inv is the Invoice object.
  * .................
- * <p/>
+ *  * <p>
  * // Set the Billing Address details.
  * BillTo bill = new BillTo();
  * bill.setBillToStreet( "123 Main St.");
@@ -110,7 +110,7 @@
 
     /**
      * Sets the State
-     * <p>Cardholder's billing state code./P>
+     * <p>Cardholder's billing state code.</p>
      *
      * @param billToState String
      *  <p>Maps to Payflow Parameter: BILLTOSTATE</p>
@@ -252,7 +252,7 @@
 
     /**
      * Sets the Billing Phone2.
-     * <p>Cardholder's 2nd telephone number./P>
+     * <p>Cardholder's 2nd telephone number.</p>
      *
      * @param billToPhone2 String
      *  <p>Maps to Payflow Parameter: BILLTOPHONE2</p>
@@ -385,14 +385,13 @@
      * //billTo populated with
      * //the billing addresses.
      * ................
-     * <p/>
-     * <p/>
+     *  * <p>
      * ShipTo ship;
-     * <p/>
+     *  * <p>
      * //Populate shipping addresses
      * //from billing addresses.
      * ship = bill.copy();
-     * <p/>
+     *  * <p>
      * ................
      */
 
Index: src/sdk/base/paypal/payflow/PayflowConstants.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.util.Hashtable;\r\n\r\n/**\r\n * PayflowConstants class contains all the global constants used throughout the SDK.\r\n */\r\npublic final class PayflowConstants {\r\n    /**\r\n     * Private constructor for PayflowConstants\r\n     */\r\n    private PayflowConstants() {\r\n    }\r\n\r\n    /**\r\n     * Empty String can reuse this.\r\n     */\r\n    protected static final String EMPTY_STRING = \"\";\r\n\r\n    /**\r\n     * NVP Delimiter (&)\r\n     */\r\n    protected static final String DELIMITER_NVP = \"&\";\r\n\r\n    /**\r\n     * NVP Opening Brace ([)\r\n     */\r\n    protected static final String OPENING_BRACE_NVP = \"[\";\r\n    /**\r\n     * NVP Closing Brace (])\r\n     */\r\n    protected static final String CLOSING_BRACE_NVP = \"]\";\r\n    /**\r\n     * NVP Separator (=)\r\n     */\r\n    protected static final String SEPARATOR_NVP = \"=\";\r\n    /**\r\n     * Numeric values initialize\r\n     */\r\n    protected static final long INVALID_NUMBER = -384783;\r\n    /**\r\n     * Xml Pay Param Result\r\n     */\r\n    protected static final String XML_PARAM_RESULT = \"Result\";\r\n    /**\r\n     * Xml Pay param Message\r\n     */\r\n    protected static final String XML_PARAM_MESSAGE = \"Message\";\r\n    /**\r\n     * Default Timeout in seconds (45 sec)\r\n     */\r\n    protected static final int DEFAULT_TIMEOUT = 45;\r\n    /**\r\n     * Default Payflow Host port (443)\r\n     */\r\n    protected static final int DEFAULT_HOSTPORT = 443;\r\n    /**\r\n     * SDK Client Type (J --> JAVA)\r\n     */\r\n    protected static final String CLIENT_TYPE = \"J\";\r\n    /**\r\n     * SDK Client Version (4000 --> V4 protocol)\r\n     */\r\n    protected static final String CLIENT_VERSION = \"440\";\r\n    /**\r\n     * SDK User Agent (Java SDK)\r\n     */\r\n    protected static final String USER_AGENT = \"Payflow SDK for Java\";\r\n    /**\r\n     * Payflow Request types\r\n     */\r\n    protected static final String WEAK_ASSEMBLY = \"Weak\";\r\n    /**\r\n     * Payflow Request types\r\n     */\r\n    protected static final String STRONG_ASSEMBLY = \"Strong\";\r\n    /**\r\n     * Maximum retry attempts (3)\r\n     */\r\n    protected static final int MAX_RETRY = 3;\r\n    /**\r\n     * XmlPay ID\r\n     */\r\n    protected static final String XML_ID = \"<XMLPayRequest\";\r\n    /**\r\n     * XmlPay Response ID\r\n     */\r\n    protected static final String XML_RESP_ID = \"<XMLPayResponse\";\r\n    /**\r\n     * XML Content Type (text/xml)\r\n     */\r\n    protected static final String XML_CONTENT_TYPE = \"text/xml\";\r\n    /**\r\n     * Name value Content Type (text/namevalue)\r\n     */\r\n    protected static final String NV_CONTENT_TYPE = \"text/namevalue\";\r\n    /**\r\n     * XML Pay namespace (http://www.paypal.com/XMLPay)\r\n     */\r\n    protected static final String XMLPAY_NAMESPACE = \"http://www.paypal.com/XMLPay\";\r\n    /**\r\n     * XML Pay request tag (XMLPayRequest)\r\n     */\r\n    protected static final String XMLPAY_REQUEST_TAG = \"XMLPayRequest\";\r\n    /**\r\n     * Default Logger file Name\r\n     */\r\n    protected static final String LOG_FILE_NAME = \"payflow_java_sdk.log\";\r\n    /**\r\n     * Payflow server Transaction file path (transaction)\r\n     */\r\n    // 04/23/07 Removed path \"transaction\" TS\r\n    protected static final String PAYFLOW_SERVER_TRANSACTION_PATH = \"\";\r\n    /**\r\n     * Error Message static finalant for null or blank param (MSG_1001)\r\n     */\r\n    protected static final String MSG_PARAM_NULL_BLANK = \"MSG_1001\";\r\n    /**\r\n     * Error Message static finalant for invalid minmax length of param (MSG_1002)\r\n     */\r\n    protected static final String MSG_INVALID_LENGTH_MINMAX = \"MSG_1002\";\r\n    /**\r\n     * Error Message static finalant for empty param (MSG_1003)\r\n     */\r\n    protected static final String MSG_PARAM_EMPTY = \"MSG_1003\";\r\n    /**\r\n     * Error Message static finalant for invalid exact length of param (MSG_1004)\r\n     */\r\n    protected static final String MSG_INVALID_LENGTH_EXACT = \"MSG_1004\";\r\n    /**\r\n     * Delay before each retry\r\n     */\r\n    protected static final long RETRY_DELAY = 1000;\r\n    /**\r\n     * Error Message static finalant for invalid param (MSG_1005)\r\n     */\r\n    protected static final String MSG_PARAM_NOT_VALID = \"MSG_1005\";\r\n    /**\r\n     * Error Message static finalant for invalid date (MSG_1006)\r\n     */\r\n    protected static final String MSG_INVALID_DATE = \"MSG_1006\";\r\n    /**\r\n     * Error Message static finalant for invalid month (MSG_1007)\r\n     */\r\n    protected static final String MSG_INVALID_MONTH = \"MSG_1007\";\r\n    /**\r\n     * Error Message static finalant for invalid greater value of param (MSG_1008)\r\n     */\r\n    protected static final String MSG_INVALID_VALUE_GREATER = \"MSG_1008\";\r\n    /**\r\n     * Error Message static finalant for non negative value of param (MSG_1009)\r\n     */\r\n    protected static final String MSG_NONNEGATIVE = \"MSG_1009\";\r\n    /**\r\n     * Error Message static finalant for invalid exact value param (MSG_1010)\r\n     */\r\n    protected static final String MSG_PARAM_INVALID_EXACT = \"MSG_1010\";\r\n    /**\r\n     * Error Message static finalant for invalid year (MSG_1011)\r\n     */\r\n    protected static final String MSG_INVALID_YEAR_LESS = \"MSG_1011\";\r\n    /**\r\n     * Error Message static finalant for communication error (MSG_1012)\r\n     */\r\n    protected static final String MSG_COMMUNICATION_ERROR = \"MSG_1012\";\r\n    /**\r\n     * Error Message static finalant for communication error xml pay (MSG_1005)\r\n     */\r\n    protected static final String MSG_COMMUNICATION_ERROR_XMLPAY = \"MSG_1013\";\r\n    /**\r\n     * Error Message static finalant for communication error (MSG_1012)\r\n     */\r\n    protected static final String MSG_COMMUNICATION_ERROR_NO_RESPONSE_ID = \"MSG_1015\";\r\n    /**\r\n     * Error Message static finalant for communication error xml pay (MSG_1005)\r\n     */\r\n    protected static final String MSG_COMMUNICATION_ERROR_XMLPAY_NO_RESPONSE_ID = \"MSG_1016\";\r\n    /**\r\n     * Check type Personal (P)\r\n     */\r\n    protected static final String CHECK_TYPE_PERSONEL = \"P\";\r\n    /**\r\n     * Check type Corporate (C)\r\n     */\r\n    protected static final String CHECK_TYPE_CORPORATE = \"C\";\r\n    /**\r\n     * Communication Error Codes\r\n     */\r\n    protected static Hashtable CommErrorCodes = PopulateErrorCodes();\r\n    /**\r\n     * Communication Error Messages\r\n     */\r\n    protected static Hashtable CommErrorMessages = PopulateErrorMessages();\r\n\r\n    /**\r\n     * Populates Error code hash table\r\n     *\r\n     * @return ErrorCodeTable\r\n     */\r\n    private static Hashtable PopulateErrorCodes() {\r\n        Hashtable ErrorCodeTable = new Hashtable();\r\n        ErrorCodeTable.put(E_SOK_CONN_FAILED, \"-1\");\r\n        ErrorCodeTable.put(E_PARM_NAME, \"-6\");\r\n        ErrorCodeTable.put(E_PARM_NAME_LEN, \"-7\");\r\n        ErrorCodeTable.put(E_TIMEOUT_WAIT_RESP, \"-12\");\r\n        ErrorCodeTable.put(E_NULL_HOST_STRING, \"-23\");\r\n        ErrorCodeTable.put(E_INVALID_TIMEOUT, \"-30\");\r\n        ErrorCodeTable.put(E_UNEXPECTED_REQUEST_ID, \"-40\");\r\n        ErrorCodeTable.put(E_MISSING_SERVER_RESPONSE_ID, \"-44\");\r\n        ErrorCodeTable.put(E_MISSING_REQUEST_ID, \"-41\");\r\n        ErrorCodeTable.put(E_EMPTY_PARAM_LIST, \"-100\");\r\n        ErrorCodeTable.put(E_CONTXT_INIT_FAILED, \"-103\");\r\n        ErrorCodeTable.put(E_UNKNOWN_STATE, \"-104\");\r\n        ErrorCodeTable.put(E_INVALID_NVP, \"-105\");\r\n        ErrorCodeTable.put(E_UNEXPECTED_RESPONSE_ID, \"-43\");\r\n        ErrorCodeTable.put(E_RESPONSE_FORMAT_ERROR, \"-106\");\r\n        ErrorCodeTable.put(E_VERSION_NOT_SUPPORTED, \"-107\");\r\n        ErrorCodeTable.put(E_INIT_ERROR, \"-109\");\r\n        ErrorCodeTable.put(E_CURRENCY_PROCESS_ERROR, \"-113\");\r\n        ErrorCodeTable.put(E_INVALID_TRANSACTION_REQUEST, \"-114\");\r\n        return ErrorCodeTable;\r\n    }\r\n\r\n    /**\r\n     * Populates Message code hash table\r\n     *\r\n     * @return ErrorMessageTable\r\n     */\r\n    protected static Hashtable PopulateErrorMessages() {\r\n        Hashtable ErrorMessageTable = new Hashtable();\r\n        ErrorMessageTable.put(E_SOK_CONN_FAILED, \"Failed to connect to host\");\r\n        ErrorMessageTable.put(E_PARM_NAME, \"Parameter list format error: & in name\");\r\n        ErrorMessageTable.put(E_PARM_NAME_LEN, \"Parameter list format error: invalid [] name length clause\");\r\n        ErrorMessageTable.put(E_TIMEOUT_WAIT_RESP, \"Timeout waiting for response\");\r\n        ErrorMessageTable.put(E_NULL_HOST_STRING, \"Host put ress not specified\");\r\n        ErrorMessageTable.put(E_INVALID_TIMEOUT, \"Invalid timeout value\");\r\n        ErrorMessageTable.put(E_UNEXPECTED_REQUEST_ID, \"Unexpected Request ID found in request\");\r\n        ErrorMessageTable.put(E_MISSING_SERVER_RESPONSE_ID, \"Response ID not found in the response received from the Server\");\r\n        ErrorMessageTable.put(E_MISSING_REQUEST_ID, \"Required Request ID not found in request.\");\r\n        ErrorMessageTable.put(E_EMPTY_PARAM_LIST, \"Parameter List cannot be empty\");\r\n        ErrorMessageTable.put(E_CONTXT_INIT_FAILED, \"Context Initialization failed\");\r\n        ErrorMessageTable.put(E_UNKNOWN_STATE, \"Unexpected transaction state\");\r\n        ErrorMessageTable.put(E_INVALID_NVP, \"Invalid name value pair request\");\r\n        ErrorMessageTable.put(E_UNEXPECTED_RESPONSE_ID, \"Unexpected Response ID found in request\");\r\n        ErrorMessageTable.put(E_RESPONSE_FORMAT_ERROR, \"Invalid response format\");\r\n        ErrorMessageTable.put(E_VERSION_NOT_SUPPORTED, \"This XMLPay Version is not supported\");\r\n        ErrorMessageTable.put(E_INIT_ERROR, INIT_ERROR);\r\n        ErrorMessageTable.put(E_INVALID_TRANSACTION_REQUEST, \"The transaction request is invalid\");\r\n        ErrorMessageTable.put(E_CURRENCY_PROCESS_ERROR, \"Unable to round and truncate the currency value simultaneously. You can set only one of the two properties Round OR Truncate in the Data Object Currency.\");\r\n        return ErrorMessageTable;\r\n    }\r\n\r\n    /**\r\n     * Http Header PAYFLOW-Request-ID\r\n     */\r\n    protected static final String PAYFLOWHEADER_REQUEST_ID = \"X-VPS-Request-ID\";\r\n\r\n    /**\r\n     * Http Header PAYFLOW-CLIENT-TIMEOUT\r\n     */\r\n    protected static final String PAYFLOWHEADER_TIMEOUT = \"X-VPS-CLIENT-TIMEOUT\";\r\n\r\n    /**\r\n     * Holds the name of the key in the message file that holds the message code.\r\n     */\r\n    protected static final String MESSAGE_ID = \"Id\";\r\n    /**\r\n     * Holds the name of the key in the message file that holds the message body.\r\n     */\r\n    protected static final String MESSAGE_BODY = \"Body\";\r\n    /**\r\n     * Holds the name of the key in the message file that holds the message severity.\r\n     */\r\n    protected static final String MESSAGE_SEVERITY = \"Severity\";\r\n\r\n    /**\r\n     * Tag for TRACE in config file\r\n     */\r\n    protected static final boolean TRACE_DEFAULT = false;\r\n\r\n    /**\r\n     * Severity for a FATAL level message.\r\n     */\r\n    protected static final String ERROR_FATAL = \"FATAL\";\r\n    /**\r\n     * Severity for a ERROR level message.\r\n     */\r\n    protected static final String ERROR_ERROR = \"ERROR\";\r\n    /**\r\n     * Severity for a WARN level message.\r\n     */\r\n    protected static final String ERROR_WARN = \"WARN\";\r\n    /**\r\n     * Severity for a INFO level message.\r\n     */\r\n    protected static final String ERROR_INFO = \"INFO\";\r\n    /**\r\n     * Severity for a DEBUG level message.\r\n     */\r\n    protected static final String ERROR_DEBUG = \"DEBUG\";\r\n\r\n    /**\r\n     * Logging Level level OFF no logging at this level.\r\n     */\r\n    public static final int LOGGING_OFF = 6;\r\n    /**\r\n     * Severity for a FATAL level message.\r\n     */\r\n    public static final int SEVERITY_FATAL = 5;\r\n    /**\r\n     * Severity for a ERROR level message.\r\n     */\r\n    public static final int SEVERITY_ERROR = 4;\r\n    /**\r\n     * Severity for a WARN level message.\r\n     */\r\n    public static final int SEVERITY_WARN = 3;\r\n    /**\r\n     * Severity for a INFO level message.\r\n     */\r\n    public static final int SEVERITY_INFO = 2;\r\n    /**\r\n     * Severity for a DEBUG level message.\r\n     */\r\n    public static final int SEVERITY_DEBUG = 1;\r\n    /**\r\n     * represents any error occurring due to improper initialisation of system level properties\r\n     */\r\n    protected static final String INIT_ERROR = \"The following error occured while initialising : \";\r\n\r\n    /**\r\n     * Represents the description for error if the message file is not available\r\n     * in the location mentioned in the config file.\r\n     */\r\n    protected static final String MESSAGE_FILE_NOT_FOUND = \"XML File {0} does not exist\";\r\n\r\n    /**\r\n     * Represents the description for error if the format of the message file is incorrect.\r\n     */\r\n    protected static final String MESSAGE_FILE_PARSING_ERROR =\r\n            \"Error occurred while parsing the XML file and creating the sorted list\";\r\n    /**\r\n     * Represents the description for error if the body for a message code is not found\r\n     * in the message file.\r\n     */\r\n    protected static final String INVALID_MESSAGECODE =\r\n            \".Entry for the message code {0} was not found in {1}\";\r\n    /**\r\n     * Represents the description for error occurred during the logging process.\r\n     */\r\n    protected static final String LOGGING_ERROR =\r\n            \"The following error occurred while logging the error :\";\r\n    /**\r\n     * Represents the description for error occurred while adding the\r\n     * error to the context.\r\n     */\r\n    protected static final String ADD_ERRORTOCONTEXT_ERROR =\r\n            \"The following error occurred while adding the error to the context :\";\r\n\r\n    /**\r\n     * Error occurred while formatting message.\r\n     */\r\n    protected static final String MESSAGE_FORMATTING_ERROR = \"Error occurred while formatting the message.\";\r\n\r\n    /**\r\n     * Format Message Separator (Message)\r\n     */\r\n    protected static final String FORMAT_MSG_SEPERATOR = \"Message \";\r\n    /**\r\n     * Format Message Line Separator (---------------------)\r\n     */\r\n    protected final static String FORMAT_MSG_LINESEPERATOR = \"::\";\r\n\r\n    public final static String TENDERTYPE_CARD = \"C\";\r\n\r\n    /**\r\n     * content type of request String\r\n     */\r\n    protected final static String CONTENT_TYPE_NAMEVALUE = \"text/namevalue\";\r\n    /**\r\n     * content type of request String\r\n     */\r\n    protected final static String CONTENT_TYPE_XML = \"text/xml\";\r\n    /**\r\n     * Format Message  Open Bracket ([)\r\n     */\r\n    protected static final String FORMAT_MSG_OPENBRACKET = \"[\";\r\n    /**\r\n     * Format Message  Close Bracket (])\r\n     */\r\n    protected static final String FORMAT_MSG_CLOSEBRACKET = \"]\";\r\n    /**\r\n     * Format Message Code body Separator (-)\r\n     */\r\n    protected static final String FORMAT_MSG_CODEBODY_SEP = \"-\";\r\n\r\n    /**\r\n     * Communication Error Connection Failed\r\n     */\r\n    protected static final String E_SOK_CONN_FAILED = \"E_SOK_CONN_FAILED\";\r\n    /**\r\n     * Communication Error Param Name Error\r\n     */\r\n    protected static final String E_PARM_NAME = \"E_PARM_NAME\";\r\n    /**\r\n     * Communication Error Param Name Length Error\r\n     */\r\n    protected static final String E_PARM_NAME_LEN = \"E_PARM_NAME_LEN\";\r\n    /**\r\n     * Communication Error Timeout Waiting for Response\r\n     */\r\n    protected static final String E_TIMEOUT_WAIT_RESP = \"E_TIMEOUT_WAIT_RESP\";\r\n    /**\r\n     * Communication Error Null Host String\r\n     */\r\n    protected static final String E_NULL_HOST_STRING = \"E_NULL_HOST_STRING\";\r\n    /**\r\n     * Communication Error Invalid Timeout\r\n     */\r\n    protected static final String E_INVALID_TIMEOUT = \"E_INVALID_TIMEOUT\";\r\n    /**\r\n     * Communication Error Unexpected Request Id\r\n     */\r\n    protected static final String E_UNEXPECTED_REQUEST_ID = \"E_UNEXPECTED_REQUEST_ID\";\r\n    /**\r\n     * Communication Error Missing Response Id in the response received from the Server.\r\n     */\r\n    protected static final String E_MISSING_SERVER_RESPONSE_ID = \"E_MISSING_SERVER_RESPONSE_ID\";\r\n    /**\r\n     * Communication Error Missing Request Id\r\n     */\r\n    protected static final String E_MISSING_REQUEST_ID = \"E_MISSING_REQUEST_ID\";\r\n    /**\r\n     * Communication Error Empty Param List\r\n     */\r\n    protected static final String E_EMPTY_PARAM_LIST = \"E_EMPTY_PARAM_LIST\";\r\n    /**\r\n     * Communication Error Context Initialization Failed\r\n     */\r\n    protected static final String E_CONTXT_INIT_FAILED = \"E_CONTXT_INIT_FAILED\";\r\n    /**\r\n     * Communication Error Unknown State\r\n     */\r\n    protected static final String E_UNKNOWN_STATE = \"E_UNKNOWN_STATE\";\r\n    /**\r\n     * Communication Error Invalid Name Value Pair Request\r\n     */\r\n    protected static final String E_INVALID_NVP = \"E_INVALID_NVP\";\r\n    /**\r\n     * Communication Error Invalid Name Value Pair Request\r\n     */\r\n    protected static final String E_INVALID_TRANSACTION_REQUEST = \"E_INVLID_TRANSACTION_REQUEST\";\r\n    /**\r\n     * Communication Error for both round and truncate being true in the currency object.\r\n     */\r\n    protected static final String E_CURRENCY_PROCESS_ERROR = \"E_CURRENCY_PROCESS_ERROR\";\r\n    /**\r\n     * Communication Error Unexpected Response Id\r\n     */\r\n    protected static final String E_UNEXPECTED_RESPONSE_ID = \"E_UNEXPECTED_RESPONSE_ID\";\r\n    /**\r\n     * Communication Error Response Format Error\r\n     */\r\n    protected static final String E_RESPONSE_FORMAT_ERROR = \"E_RESPONSE_FORMAT_ERROR\";\r\n    /**\r\n     * Communication Error Version Not Supported\r\n     */\r\n    protected static final String E_VERSION_NOT_SUPPORTED = \"E_VERSION_NOT_SUPPORTED\";\r\n\r\n    /**\r\n     * protected Error Init Error\r\n     */\r\n    protected static final String E_INIT_ERROR = \"E_INIT_ERROR\";\r\n\r\n    /**\r\n     * protected Param rule\r\n     */\r\n    protected static final String XML_PARAM_RULE = \"rule\";\r\n    /**\r\n     * protected Param num\r\n     */\r\n    protected static final String XML_PARAM_NUM = \"num\";\r\n    /**\r\n     * protected Param ruleId\r\n     */\r\n    protected static final String XML_PARAM_RULEID = \"ruleId\";\r\n    /**\r\n     * protected Param ruleAlias\r\n     */\r\n    protected static final String XML_PARAM_RULEALIAS = \"ruleAlias\";\r\n    /**\r\n     * protected Param ruleDescription\r\n     */\r\n    protected static final String XML_PARAM_RULEDESCRIPTION = \"ruleDescription\";\r\n    /**\r\n     * protected Param action\r\n     */\r\n    protected static final String XML_PARAM_ACTION = \"action\";\r\n    /**\r\n     * protected Param triggeredMessage\r\n     */\r\n    protected static final String XML_PARAM_TRIGGEREDMESSAGE = \"triggeredMessage\";\r\n    /**\r\n     * protected Param rulevendorparms\r\n     */\r\n    protected static final String XML_PARAM_RULEVENDORPARMS = \"rulevendorparms\";\r\n    /**\r\n     * protected Param ruleParameter\r\n     */\r\n    protected static final String XML_PARAM_RULEPARAMETER = \"ruleParameter\";\r\n    /**\r\n     * protected Param name\r\n     */\r\n    protected static final String XML_PARAM_NAME = \"name\";\r\n    /**\r\n     * protected Param value\r\n     */\r\n    protected static final String XML_PARAM_VALUE = \"value\";\r\n    /**\r\n     * protected Param type\r\n     */\r\n    protected static final String XML_PARAM_TYPE = \"type\";\r\n    /**\r\n     * XML Pay Param request_id\r\n     */\r\n    protected static final String XML_PARAM_REQUEST_ID = \"request_id\";\r\n    /**\r\n     * XML Pay Param response_id\r\n     */\r\n    protected static final String XML_PARAM_RESPONSE_ID = \"response_id\";\r\n    /**\r\n     * XML Pay Param version\r\n     */\r\n    protected static final String XML_PARAM_VERSION = \"version\";\r\n    /**\r\n     * XML Pay Param Vendor\r\n     */\r\n    protected static final String XML_PARAM_VENDOR = \"Vendor\";\r\n    /**\r\n     * XML Pay Param User\r\n     */\r\n    protected static final String XML_PARAM_USER = \"User\";\r\n    /**\r\n     * XML Pay Param Partner\r\n     */\r\n    protected static final String XML_PARAM_PARTNER = \"Partner\";\r\n    /**\r\n     * XML Pay Param Password\r\n     */\r\n    protected static final String XML_PARAM_PASSWORD = \"Password\";\r\n    /**\r\n     * XML Pay Param AcctNum\r\n     */\r\n    protected static final String XML_PARAM_ACCTNUM = \"AcctNum\";\r\n    /**\r\n     * XML Pay Param CardNum\r\n     */\r\n    protected static final String XML_PARAM_CARDNUM = \"CardNum\";\r\n    /**\r\n     * XML Pay Param ExpDate\r\n     */\r\n    protected static final String XML_PARAM_EXPDATE = \"ExpDate\";\r\n    /**\r\n     * XML Pay Param MagData\r\n     */\r\n    protected static final String XML_PARAM_MAGDATA = \"MagData\";\r\n    /**\r\n     * XML Pay Param MICR\r\n     */\r\n    protected static final String XML_PARAM_MICR = \"MICR\";\r\n    /**\r\n     * XML Pay Param CVNum\r\n     */\r\n    protected static final String XML_PARAM_CVNUM = \"CVNum\";\r\n    /**\r\n     * XML Pay Param DL\r\n     */\r\n    protected static final String XML_PARAM_DL = \"DL\";\r\n    /**\r\n     * XML Pay Param SS\r\n     */\r\n    protected static final String XML_PARAM_SS = \"SS\";\r\n    /**\r\n     * XML Pay Param DOB\r\n     */\r\n    protected static final String XML_PARAM_DOB = \"DOB\";\r\n    /**\r\n     * XML Pay Start tag\r\n     */\r\n    protected static final String XML_PARAM_START_TAG = \"<?xml version='1.0' encoding='UTF-8'?><XMLPayRequest version ='\";\r\n    /**\r\n     * Payflow Param AUTHTYPE\r\n     */\r\n    protected static final String PARAM_AUTHTYPE = \"AUTHTYPE\";\r\n    /**\r\n     * Payflow Param PRENOTE\r\n     */\r\n    protected static final String PARAM_PRENOTE = \"PRENOTE\";\r\n    /**\r\n     * Payflow Param TERMCITY\r\n     */\r\n    protected static final String PARAM_TERMCITY = \"TERMCITY\";\r\n    /**\r\n     * Payflow Param TERMSTATE\r\n     */\r\n    protected static final String PARAM_TERMSTATE = \"TERMSTATE\";\r\n    /**\r\n     * Payflow Param ABA\r\n     */\r\n    protected static final String PARAM_ABA = \"ABA\";\r\n    /**\r\n     * Payflow Param ACCTTYPE\r\n     */\r\n    protected static final String PARAM_ACCTTYPE = \"ACCTTYPE\";\r\n    /**\r\n     * Payflow Param TENDER\r\n     */\r\n    protected static final String PARAM_TENDER = \"TENDER\";\r\n    /**\r\n     * Payflow Param CHKNUM\r\n     */\r\n    protected static final String PARAM_CHKNUM = \"CHKNUM\";\r\n    /**\r\n     * Payflow Param CHKTYPE\r\n     */\r\n    protected static final String PARAM_CHKTYPE = \"CHKTYPE\";\r\n    /**\r\n     * Payflow Param BILLTOSTREET\r\n     */\r\n    protected static final String PARAM_STREET = \"BILLTOSTREET\";\r\n    /**\r\n     * Payflow Param BILLTOSTREET2\r\n     */\r\n    protected static final String PARAM_STREET2 = \"BILLTOSTREET2\";\r\n    /**\r\n     * Payflow Param BILLTOCITY\r\n     */\r\n    protected static final String PARAM_CITY = \"BILLTOCITY\";\r\n    /**\r\n     * Payflow Param BILLTOSTATE\r\n     */\r\n    protected static final String PARAM_STATE = \"BILLTOSTATE\";\r\n    /**\r\n     * Payflow Param COUNTRY\r\n     */\r\n    protected static final String PARAM_COUNTRY = \"COUNTRY\";\r\n    // changed from BILLTOCOUNTRY to COUNTRY since Recurring Billing does not\r\n    // handle BILLTOCOUNTRY\r\n    /**\r\n     * Payflow Param BILLTOCOUNTRY\r\n     */\r\n    protected static final String PARAM_BILLTOCOUNTRY = \"BILLTOCOUNTRY\";\r\n    /**\r\n     * Payflow Param BILLTOZIP\r\n     */\r\n    protected static final String PARAM_ZIP = \"BILLTOZIP\";\r\n    /**\r\n     * Payflow Param PHONENUM\r\n     */\r\n    protected static final String PARAM_PHONENUM = \"PHONENUM\";\r\n    /**\r\n     * Payflow Param BILLTOPHONE2\r\n     */\r\n    protected static final String PARAM_BILLTOPHONE2 = \"BILLTOPHONE2\";\r\n    /**\r\n     * Payflow Param EMAIL\r\n     */\r\n    protected static final String PARAM_EMAIL = \"BILLTOEMAIL\";\r\n    /**\r\n     * Payflow Param FAX\r\n     */\r\n    protected static final String PARAM_FAX = \"BILLTOFAX\";\r\n    /**\r\n     * Payflow Param FIRSTNAME\r\n     */\r\n    protected static final String PARAM_FIRSTNAME = \"BILLTOFIRSTNAME\";\r\n    /**\r\n     * Payflow Param MIDDLENAME\r\n     */\r\n    protected static final String PARAM_MIDDLENAME = \"BILLTOMIDDLENAME\";\r\n    /**\r\n     * Payflow Param LASTNAME\r\n     */\r\n    protected static final String PARAM_LASTNAME = \"BILLTOLASTNAME\";\r\n    /**\r\n     * Payflow Param HOMEPHONE\r\n     */\r\n    protected static final String PARAM_HOMEPHONE = \"BILLTOHOMEPHONE\";\r\n    /**\r\n     * Payflow Param BROWSERTIME\r\n     */\r\n    protected static final String PARAM_BROWSERTIME = \"BROWSERTIME\";\r\n    /**\r\n     * Payflow Param BROWSERCOUNTRYCODE\r\n     */\r\n    protected static final String PARAM_BROWSERCOUNTRYCODE = \"BROWSERCOUNTRYCODE\";\r\n    /**\r\n     * Payflow Param BROWSERUSERAGENT\r\n     */\r\n    protected static final String PARAM_BROWSERUSERAGENT = \"BROWSERUSERAGENT\";\r\n    /**\r\n     * Payflow Param ACSURL\r\n     */\r\n    protected static final String PARAM_ACSURL = \"ACSURL\";\r\n    /**\r\n     * Payflow Param AUTHENICATION_ID\r\n     */\r\n    protected static final String PARAM_AUTHENTICATION_ID = \"AUTHENTICATION_ID\";\r\n    /**\r\n     * Payflow Param AUTHENICATION_STATUS\r\n     */\r\n    protected static final String PARAM_AUTHENICATION_STATUS = \"AUTHENTICATION_STATUS\";\r\n    /**\r\n     * Payflow Param CAVV\r\n     */\r\n    protected static final String PARAM_CAVV = \"CAVV\";\r\n    /**\r\n     * Payflow Param ECI\r\n     */\r\n    protected static final String PARAM_ECI = \"ECI\";\r\n    /**\r\n     * Payflow Param MD\r\n     */\r\n    protected static final String PARAM_MD = \"MD\";\r\n    /**\r\n     * Payflow Param PAREQ\r\n     */\r\n    protected static final String PARAM_PAREQ = \"PAREQ\";\r\n    /**\r\n     * Payflow Param XID\r\n     */\r\n    protected static final String PARAM_XID = \"XID\";\r\n    /**\r\n     * Payflow Param MICR\r\n     */\r\n    protected static final String PARAM_MICR = \"MICR\";\r\n    /**\r\n     * Payflow Param NAME\r\n     */\r\n    protected static final String PARAM_NAME = \"NAME\";\r\n    /**\r\n     * Payflow Param DL\r\n     */\r\n    protected static final String PARAM_DL = \"DL\";\r\n    /**\r\n     * Payflow Param SS\r\n     */\r\n    protected static final String PARAM_SS = \"SS\";\r\n    /**\r\n     * Payflow Param REQNAME\r\n     */\r\n    protected static final String PARAM_REQNAME = \"REQNAME\";\r\n    /**\r\n     * Payflow Param CUSTCODE\r\n     */\r\n    protected static final String PARAM_CUSTCODE = \"CUSTCODE\";\r\n    /**\r\n     * Payflow Param CUSTIP\r\n     */\r\n    protected static final String PARAM_CUSTIP = \"CUSTIP\";\r\n    /**\r\n     * Payflow Param CUSTVATREGNUM\r\n     */\r\n    protected static final String PARAM_CUSTVATREGNUM = \"CUSTVATREGNUM\";\r\n    /**\r\n     * Payflow Param DOB\r\n     */\r\n    protected static final String PARAM_DOB = \"DOB\";\r\n    /**\r\n     * Payflow Param CUSTID\r\n     */\r\n    protected static final String PARAM_CUSTID = \"CUSTID\";\r\n    /**\r\n     * Payflow Param COMPANYNAME\r\n     */\r\n    protected static final String PARAM_COMPANYNAME = \"BILLTOCOMPANYNAME\";\r\n    /**\r\n     * Payflow Param CORPNAME\r\n     */\r\n    protected static final String PARAM_CORPNAME = \"CORPNAME\";\r\n    /**\r\n     * Payflow Param MERCHDESCR\r\n     */\r\n    protected static final String PARAM_MERCHDESCR = \"MERCHDESCR\";\r\n    /**\r\n     * Payflow Param MERCHSVC\r\n     */\r\n    protected static final String PARAM_MERCHSVC = \"MERCHSVC\";\r\n    /**\r\n     * Payflow Param MERCHANTNAME\r\n     */\r\n    protected static final String PARAM_MERCHANTNAME = \"MERCHANTNAME\";\r\n    /**\r\n     * Payflow Param MERCHANTSTRET\r\n     */\r\n    protected static final String PARAM_MERCHANTSTREET = \"MERCHANTSTREET\";\r\n    /**\r\n     * Payflow Param MERCHANTCITY\r\n     */\r\n    protected static final String PARAM_MERCHANTCITY = \"MERCHANTCITY\";\r\n    /**\r\n     * Payflow Param MERCHANTSTATE\r\n     */\r\n    protected static final String PARAM_MERCHANTSTATE = \"MERCHANTSTATE\";\r\n    /**\r\n     * Payflow Param MERCHANTZIP\r\n     */\r\n    protected static final String PARAM_MERCHANTZIP = \"MERCHANTZIP\";\r\n    /**\r\n     * Payflow Param MERCHANTCOUNTRYCODE\r\n     */\r\n    protected static final String PARAM_MERCHANTCOUNTRYCODE = \"MERCHANTCOUNTRYCODE\";\r\n    /**\r\n     * Payflow Param ADDLMSGS\r\n     */\r\n    protected static final String PARAM_ADDLMSGS = \"ADDLMSGS\";\r\n    /**\r\n     * Payflow Param PREFPSMSG\r\n     */\r\n    protected static final String PARAM_PREFPSMSG = \"PREFPSMSG\";\r\n    /**\r\n     * Payflow Param POSTFPSMSG\r\n     */\r\n    protected static final String PARAM_POSTFPSMSG = \"POSTFPSMSG\";\r\n    /**\r\n     * Payflow Param RESPTEXT\r\n     */\r\n    protected static final String PARAM_RESPTEXT = \"RESPTEXT\";\r\n    /**\r\n     * Payflow Param PROCAVS\r\n     */\r\n    protected static final String PARAM_PROCAVS = \"PROCAVS\";\r\n    /**\r\n     * Payflow Param PROCCARDSECURE\r\n     */\r\n    protected static final String PARAM_PROCCARDSECURE = \"PROCCARDSECURE\";\r\n    /**\r\n     * Payflow Param PROCCVV2\r\n     */\r\n    protected static final String PARAM_PROCCVV2 = \"PROCCVV2\";\r\n    /**\r\n     * Payflow Param HOSTCODE\r\n     */\r\n    protected static final String PARAM_HOSTCODE = \"HOSTCODE\";\r\n    /**\r\n     * Payflow Param INVNUM\r\n     */\r\n    protected static final String PARAM_INVNUM = \"INVNUM\";\r\n    /**\r\n     * Payflow Param AMT\r\n     */\r\n    protected static final String PARAM_AMT = \"AMT\";\r\n    /**\r\n     * Payflow Param TAXEXEMPT\r\n     */\r\n    protected static final String PARAM_TAXEXEMPT = \"TAXEXEMPT\";\r\n    /**\r\n     * Payflow Param TAXAMT\r\n     */\r\n    protected static final String PARAM_TAXAMT = \"TAXAMT\";\r\n    /**\r\n     * Payflow Param DUTYAMT\r\n     */\r\n    protected static final String PARAM_DUTYAMT = \"DUTYAMT\";\r\n    /**\r\n     * Payflow Param FREIGHTAMT\r\n     */\r\n    protected static final String PARAM_FREIGHTAMT = \"FREIGHTAMT\";\r\n    /**\r\n     * Payflow Param HANDLINGAMT\r\n     */\r\n    protected static final String PARAM_HANDLINGAMT = \"HANDLINGAMT\";\r\n    /**\r\n     * Payflow Param DISCOUNT\r\n     */\r\n    protected static final String PARAM_DISCOUNT = \"DISCOUNT\";\r\n    /**\r\n     * Payflow Param DESC\r\n     */\r\n    protected static final String PARAM_DESC = \"DESC\";\r\n    /**\r\n     * Payflow Param COMMENT1\r\n     */\r\n    protected static final String PARAM_COMMENT1 = \"COMMENT1\";\r\n    /**\r\n     * Payflow Param COMMENT2\r\n     */\r\n    protected static final String PARAM_COMMENT2 = \"COMMENT2\";\r\n    /**\r\n     * Payflow Param DESC1\r\n     */\r\n    protected static final String PARAM_DESC1 = \"DESC1\";\r\n    /**\r\n     * Payflow Param DESC2\r\n     */\r\n    protected static final String PARAM_DESC2 = \"DESC2\";\r\n    /**\r\n     * Payflow Param DESC3\r\n     */\r\n    protected static final String PARAM_DESC3 = \"DESC3\";\r\n    /**\r\n     * Payflow Param DESC4\r\n     */\r\n    protected static final String PARAM_DESC4 = \"DESC4\";\r\n    /**\r\n     * Payflow Param CUSTREF\r\n     */\r\n    protected static final String PARAM_CUSTREF = \"CUSTREF\";\r\n    /**\r\n     * Payflow Param PONUM\r\n     */\r\n    protected static final String PARAM_PONUM = \"PONUM\";\r\n    /**\r\n     * Payflow Param VATREGNUM\r\n     */\r\n    protected static final String PARAM_VATREGNUM = \"VATREGNUM\";\r\n    /**\r\n     * Payflow Param VATTAXAMT\r\n     */\r\n    protected static final String PARAM_VATTAXAMT = \"VATTAXAMT\";\r\n    /**\r\n     * Payflow Param LOCALTAXAMT\r\n     */\r\n    protected static final String PARAM_LOCALTAXAMT = \"LOCALTAXAMT\";\r\n    /**\r\n     * Payflow Param NATIONALTAXAMT\r\n     */\r\n    protected static final String PARAM_NATIONALTAXAMT = \"NATIONALTAXAMT\";\r\n    /**\r\n     * Payflow Param ALTTAXAMT\r\n     */\r\n    protected static final String PARAM_ALTTAXAMT = \"ALTTAXAMT\";\r\n    /**\r\n     * Payflow Param COMMCODE\r\n     */\r\n    protected static final String PARAM_COMMCODE = \"COMMCODE\";\r\n    /**\r\n     * Payflow Param INVOICEDATE\r\n     */\r\n    protected static final String PARAM_INVOICEDATE = \"INVOICEDATE\";\r\n    /**\r\n     * Payflow Param STARTTIME\r\n     */\r\n    protected static final String PARAM_STARTTIME = \"STARTTIME\";\r\n    /**\r\n     * Payflow Param ENDTIME\r\n     */\r\n    protected static final String PARAM_ENDTIME = \"ENDTIME\";\r\n    /**\r\n     * Payflow Param ORDERDATE\r\n     */\r\n    protected static final String PARAM_ORDERDATE = \"ORDERDATE\";\r\n    /**\r\n     * Payflow Param ORDERTIME\r\n     */\r\n    protected static final String PARAM_ORDERTIME = \"ORDERTIME\";\r\n    /**\r\n     * Payflow Param L_AMTn\r\n     */\r\n    protected static final String PARAM_L_AMT = \"L_AMT\";\r\n    /**\r\n     * Payflow Param L_COSTn\r\n     */\r\n    protected static final String PARAM_L_COST = \"L_COST\";\r\n    /**\r\n     * Payflow Param L_FREIGHTAMTn\r\n     */\r\n    protected static final String PARAM_L_FREIGHTAMT = \"L_FREIGHTAMT\";\r\n    /**\r\n     * Payflow Param L_HANDLINGAMTn\r\n     */\r\n    protected static final String PARAM_L_HANDLINGAMT = \"L_HANDLINGAMT\";\r\n    /**\r\n     * Payflow Param L_TAXAMTn\r\n     */\r\n    protected static final String PARAM_L_TAXAMT = \"L_TAXAMT\";\r\n    /**\r\n     * Payflow Param L_UOMn\r\n     */\r\n    protected static final String PARAM_L_UOM = \"L_UOM\";\r\n    /**\r\n     * Payflow Param L_PICKUPSTREETn\r\n     */\r\n    protected static final String PARAM_L_PICKUPSTREET = \"L_PICKUPSTREET\";\r\n    /**\r\n     * Payflow Param L_PICKUPSTATEn\r\n     */\r\n    protected static final String PARAM_L_PICKUPSTATE = \"L_PICKUPSTATE\";\r\n    /**\r\n     * Payflow Param L_PICKUPCOUNTRYn\r\n     */\r\n    protected static final String PARAM_L_PICKUPCOUNTRY = \"L_PICKUPCOUNTRY\";\r\n    /**\r\n     * Payflow Param L_PICKUPCITYn\r\n     */\r\n    protected static final String PARAM_L_PICKUPCITY = \"L_PICKUPCITY\";\r\n    /**\r\n     * Payflow Param L_PICKUPZIPn\r\n     */\r\n    protected static final String PARAM_L_PICKUPZIP = \"L_PICKUPZIP\";\r\n    /**\r\n     * Payflow Param L_DESCn\r\n     */\r\n    protected static final String PARAM_L_DESC = \"L_DESC\";\r\n    /**\r\n     * Payflow Param L_DISCOUNTn\r\n     */\r\n    protected static final String PARAM_L_DISCOUNT = \"L_DISCOUNT\";\r\n    /**\r\n     * Payflow Param L_MANUFACTURERn\r\n     */\r\n    protected static final String PARAM_L_MANUFACTURER = \"L_MANUFACTURER\";\r\n    /**\r\n     * Payflow Param L_PRODCODEn\r\n     */\r\n    protected static final String PARAM_L_PRODCODE = \"L_PRODCODE\";\r\n    /**\r\n     * Payflow Param L_QTYn\r\n     */\r\n    protected static final String PARAM_L_QTY = \"L_QTY\";\r\n    /**\r\n     * Payflow Param L_SKUn\r\n     */\r\n    protected static final String PARAM_L_SKU = \"L_SKU\";\r\n    /**\r\n     * Payflow Param L_TAXRATEn\r\n     */\r\n    protected static final String PARAM_L_TAXRATE = \"L_TAXRATE\";\r\n    /**\r\n     * Payflow Param L_TAXTYPEn\r\n     */\r\n    protected static final String PARAM_L_TAXTYPE = \"L_TAXTYPE\";\r\n    /**\r\n     * Payflow Param L_TYPEn\r\n     */\r\n    protected static final String PARAM_L_TYPE = \"L_TYPE\";\r\n    /**\r\n     * Payflow Param L_COMMCODEn\r\n     */\r\n    protected static final String PARAM_L_COMMCODE = \"L_COMMCODE\";\r\n    /**\r\n     * Payflow Param L_TRACKINGNUMn\r\n     */\r\n    protected static final String PARAM_L_TRACKINGNUM = \"L_TRACKINGNUM\";\r\n    /**\r\n     * Payflow Param L_COSTCENTERNUMn\r\n     */\r\n    protected static final String PARAM_L_COSTCENTERNUM = \"L_COSTCENTERNUM\";\r\n    /**\r\n     * Payflow Param L_CATALOGNUMn\r\n     */\r\n    protected static final String PARAM_L_CATALOGNUM = \"L_CATALOGNUM\";\r\n    /**\r\n     * Payflow Param L_UPCn\r\n     */\r\n    protected static final String PARAM_L_UPC = \"L_UPC\";\r\n    /**\r\n     * Payflow Param\r\n     */\r\n    protected static final String PARAM_L_UNSPSCCODE = \"L_UNSPSCCODE\";\r\n    /**\r\n     * Payflow Param EXPDATE\r\n     */\r\n    protected static final String PARAM_EXPDATE = \"EXPDATE\";\r\n    /**\r\n     * Payflow Param CVV2\r\n     */\r\n    protected static final String PARAM_CVV2 = \"CVV2\";\r\n    /**\r\n     * Payflow Param ACCT\r\n     */\r\n    protected static final String PARAM_ACCT = \"ACCT\";\r\n    /**\r\n     * Payflow Param COMMCARD\r\n     */\r\n    protected static final String PARAM_COMMCARD = \"COMMCARD\";\r\n    /**\r\n     * Payflow Param PROFILENAME\r\n     */\r\n    protected static final String PARAM_PROFILENAME = \"PROFILENAME\";\r\n    /**\r\n     * Payflow Param START\r\n     */\r\n    protected static final String PARAM_START = \"START\";\r\n    /**\r\n     * Payflow Param TERM\r\n     */\r\n    protected static final String PARAM_TERM = \"TERM\";\r\n    /**\r\n     * Payflow Param PAYPERIOD\r\n     */\r\n    protected static final String PARAM_PAYPERIOD = \"PAYPERIOD\";\r\n    /**\r\n     * Payflow Param OPTIONALTRX\r\n     */\r\n    protected static final String PARAM_OPTIONALTRX = \"OPTIONALTRX\";\r\n    /**\r\n     * Payflow Param OPTIONALTRXAMT\r\n     */\r\n    protected static final String PARAM_OPTIONALTRXAMT = \"OPTIONALTRXAMT\";\r\n    /**\r\n     * Payflow Param RETRYNUMDAYS\r\n     */\r\n    protected static final String PARAM_RETRYNUMDAYS = \"RETRYNUMDAYS\";\r\n    /**\r\n     * Payflow Param MAXFAILPAYMENTS\r\n     */\r\n    protected static final String PARAM_MAXFAILPAYMENTS = \"MAXFAILPAYMENTS\";\r\n    /**\r\n     * Payflow Param NUMFAILPAYMENTS\r\n     */\r\n    protected static final String PARAM_NUMFAILPAYMENTS = \"NUMFAILPAYMENTS\";\r\n    /**\r\n     * Payflow Param ORIGPROFILEID\r\n     */\r\n    protected static final String PARAM_ORIGPROFILEID = \"ORIGPROFILEID\";\r\n    /**\r\n     * Payflow Param PAYMENTHISTORY\r\n     */\r\n    protected static final String PARAM_PAYMENTHISTORY = \"PAYMENTHISTORY\";\r\n    /**\r\n     * Payflow Param PAYMENTNUM\r\n     */\r\n    protected static final String PARAM_PAYMENTNUM = \"PAYMENTNUM\";\r\n    /**\r\n     * Payflow Param RECURRING\r\n     */\r\n    protected static final String PARAM_RECURRING = \"RECURRING\";\r\n    /**\r\n     * Payflow Param PROFILEID\r\n     */\r\n    protected static final String PARAM_PROFILEID = \"PROFILEID\";\r\n    /**\r\n     * Payflow Param RPREF\r\n     */\r\n    protected static final String PARAM_RPREF = \"RPREF\";\r\n    /**\r\n     * Payflow Param TRXPNREF\r\n     */\r\n    protected static final String PARAM_TRXPNREF = \"TRXPNREF\";\r\n    /**\r\n     * Payflow Param TRXRESULT\r\n     */\r\n    protected static final String PARAM_TRXRESULT = \"TRXRESULT\";\r\n    /**\r\n     * Payflow Param TRXRESPMSG\r\n     */\r\n    protected static final String PARAM_TRXRESPMSG = \"TRXRESPMSG\";\r\n    /**\r\n     * Payflow Param STATUS\r\n     */\r\n    protected static final String PARAM_STATUS = \"STATUS\";\r\n    /**\r\n     * Payflow Param PAYMENTSLEFT\r\n     */\r\n    protected static final String PARAM_PAYMENTSLEFT = \"PAYMENTSLEFT\";\r\n    /**\r\n     * Payflow Param NEXTPAYMENT\r\n     */\r\n    protected static final String PARAM_NEXTPAYMENT = \"NEXTPAYMENT\";\r\n    /**\r\n     * Payflow Param END\r\n     */\r\n    protected static final String PARAM_END = \"END\";\r\n    /**\r\n     * Payflow Param AGGREGATEAMT\r\n     */\r\n    protected static final String PARAM_AGGREGATEAMT = \"AGGREGATEAMT\";\r\n    /**\r\n     * Payflow Param AGGREGATEOPTIONALAMT\r\n     */\r\n    protected static final String PARAM_AGGREGATEOPTIONALAMT = \"AGGREGATEOPTIONALAMT\";\r\n    /**\r\n     * Payflow Param SHIPTOFIRSTNAME\r\n     */\r\n    protected static final String PARAM_SHIPTONAME = \"SHIPTONAME\";\r\n    /**\r\n     * Payflow Param SHIPTOFIRSTNAME\r\n     */\r\n    protected static final String PARAM_SHIPTOFIRSTNAME = \"SHIPTOFIRSTNAME\";\r\n    /**\r\n     * Payflow Param SHIPTOMIDDLENAME\r\n     */\r\n    protected static final String PARAM_SHIPTOMIDDLENAME = \"SHIPTOMIDDLENAME\";\r\n    /**\r\n     * Payflow Param SHIPTOLASTNAME\r\n     */\r\n    protected static final String PARAM_SHIPTOLASTNAME = \"SHIPTOLASTNAME\";\r\n    /**\r\n     * Payflow Param SHIPTOSTREET\r\n     */\r\n    protected static final String PARAM_SHIPTOSTREET = \"SHIPTOSTREET\";\r\n    /**\r\n     * Payflow Param SHIPTOSTREET2\r\n     */\r\n    protected static final String PARAM_SHIPTOSTREET2 = \"SHIPTOSTREET2\";\r\n    /**\r\n     * Payflow Param SHIPTOCITY\r\n     */\r\n    protected static final String PARAM_SHIPTOCITY = \"SHIPTOCITY\";\r\n    /**\r\n     * Payflow Param SHIPTOSTATE\r\n     */\r\n    protected static final String PARAM_SHIPTOSTATE = \"SHIPTOSTATE\";\r\n    /**\r\n     * Payflow Param SHIPTOZIP\r\n     */\r\n    protected static final String PARAM_SHIPTOZIP = \"SHIPTOZIP\";\r\n    /**\r\n     * Payflow Param SHIPTOCOUNTRY\r\n     */\r\n    protected static final String PARAM_SHIPTOCOUNTRY = \"SHIPTOCOUNTRY\";\r\n    /**\r\n     * Payflow Param P_RESULTn\r\n     */\r\n    protected static final String PARAM_P_RESULTn = \"P_RESULTn\";\r\n    /**\r\n     * Payflow Param P_PNREFn\r\n     */\r\n    protected static final String PARAM_P_PNREFn = \"P_PNREFn\";\r\n    /**\r\n     * Payflow Param P_TRANSTATEn\r\n     */\r\n    protected static final String PARAM_P_TRANSTATEn = \"P_TRANSTATEn\";\r\n    /**\r\n     * Payflow Param P_TENDERn\r\n     */\r\n    protected static final String PARAM_P_TENDERn = \"P_TENDERn\";\r\n    /**\r\n     * Payflow Param P_TRANSTIMEn\r\n     */\r\n    protected static final String PARAM_P_TRANSTIMEn = \"P_TRANSTIMEn\";\r\n    /**\r\n     * Payflow Param P_AMOUNTn\r\n     */\r\n    protected static final String PARAM_P_AMOUNTn = \"P_AMOUNTn\";\r\n    /**\r\n     * Payflow Param FPS_PREXMLDATA\r\n     */\r\n    protected static final String PARAM_FPS_PREXMLDATA = \"FPS_PREXMLDATA\";\r\n    /**\r\n     * Payflow Param FPS_POSTXMLDATA\r\n     */\r\n    protected static final String PARAM_FPS_POSTXMLDATA = \"FPS_POSTXMLDATA\";\r\n    /**\r\n     * Payflow Param SHIPTOPHONE\r\n     */\r\n    protected static final String PARAM_SHIPTOPHONE = \"SHIPTOPHONE\";\r\n    /**\r\n     * Payflow Param SHIPTOPHONE2\r\n     */\r\n    protected static final String PARAM_SHIPTOPHONE2 = \"SHIPTOPHONE2\";\r\n    /**\r\n     * Payflow Param SHIPTOEMAIL\r\n     */\r\n    protected static final String PARAM_SHIPTOEMAIL = \"SHIPTOEMAIL\";\r\n    /**\r\n     * Payflow Param SHIPCARRIER\r\n     */\r\n    protected static final String PARAM_SHIPCARRIER = \"SHIPCARRIER\";\r\n    /**\r\n     * Payflow Param SHIPMETHOD\r\n     */\r\n    protected static final String PARAM_SHIPMETHOD = \"SHIPMETHOD\";\r\n    /**\r\n     * Payflow Param SHIPFROMZIP\r\n     */\r\n    protected static final String PARAM_SHIPFROMZIP = \"SHIPFROMZIP\";\r\n    /**\r\n     * Payflow Param SHIPPEDFROMZIP\r\n     */\r\n    protected static final String PARAM_SHIPPEDFROMZIP = \"SHIPPEDFROMZIP\";\r\n    /**\r\n     * Payflow Param ADDRESSSTATUS\r\n     */\r\n    protected static final String PARAM_ADDRESSSTATUS = \"ADDRESSSTATUS\";\r\n    /**\r\n     * Payflow Param SWIPE\r\n     */\r\n    protected static final String PARAM_SWIPE = \"SWIPE\";\r\n    /**\r\n     * Payflow Param RESULT\r\n     */\r\n    protected static final String PARAM_RESULT = \"RESULT\";\r\n    /**\r\n     * Payflow Param PNREF\r\n     */\r\n    protected static final String PARAM_PNREF = \"PNREF\";\r\n    /**\r\n     * Payflow Param RESPMSG\r\n     */\r\n    protected static final String PARAM_RESPMSG = \"RESPMSG\";\r\n    /**\r\n     * Payflow Param AUTHCODE\r\n     */\r\n    protected static final String PARAM_AUTHCODE = \"AUTHCODE\";\r\n    /**\r\n     * Payflow Param AVSADDR\r\n     */\r\n    protected static final String PARAM_AVSADDR = \"AVSADDR\";\r\n    /**\r\n     * Payflow Param AVSZIP\r\n     */\r\n    protected static final String PARAM_AVSZIP = \"AVSZIP\";\r\n    /**\r\n     * Payflow Param CARDSECURE\r\n     */\r\n    protected static final String PARAM_CARDSECURE = \"CARDSECURE\";\r\n    /**\r\n     * Payflow Param CVV2MATCH\r\n     */\r\n    protected static final String PARAM_CVV2MATCH = \"CVV2MATCH\";\r\n    /**\r\n     * Payflow Param IAVS\r\n     */\r\n    protected static final String PARAM_IAVS = \"IAVS\";\r\n    /**\r\n     * Payflow Param ORIGRESULT\r\n     */\r\n    protected static final String PARAM_ORIGRESULT = \"ORIGRESULT\";\r\n    /**\r\n     * Payflow Param TRANSSTATE\r\n     */\r\n    protected static final String PARAM_TRANSSTATE = \"TRANSSTATE\";\r\n    /**\r\n     * Payflow Param USER\r\n     */\r\n    protected static final String PARAM_USER = \"USER\";\r\n    /**\r\n     * Payflow Param VENDOR\r\n     */\r\n    protected static final String PARAM_VENDOR = \"VENDOR\";\r\n    /**\r\n     * Payflow Param PARTNER\r\n     */\r\n    protected static final String PARAM_PARTNER = \"PARTNER\";\r\n    /**\r\n     * Payflow Param PWD\r\n     */\r\n    protected static final String PARAM_PWD = \"PWD\";\r\n    /**\r\n     * Payflow Param TRXTYPE\r\n     */\r\n    protected static final String PARAM_TRXTYPE = \"TRXTYPE\";\r\n    /**\r\n     * Payflow Param BA_FLAG\r\n     */\r\n    protected static final String PARAM_BA_FLAG = \"BA_FLAG\";\r\n    /**\r\n     * Payflow Param BAID\r\n     */\r\n    protected static final String PARAM_BAID = \"BAID\";\r\n    /**\r\n     * Payflow Param BA_STATUS\r\n     */\r\n    protected static final String PARAM_BA_STATUS = \"BA_STATUS\";\r\n    /**\r\n     * Payflow Param VERBOSITY\r\n     */\r\n    protected static final String PARAM_VERBOSITY = \"VERBOSITY\";\r\n    /**\r\n     * Payflow Param CAPTURECOMPLETE\r\n     */\r\n    protected static final String PARAM_CAPTURECOMPLETE = \"CAPTURECOMPLETE\";\r\n    /**\r\n     * Payflow Param DOREAUTHORIZATION\r\n     */\r\n    protected static final String PARAM_DOREAUTHORIZATION = \"DOREAUTHORIZATION\";\r\n    /**\r\n     * Payflow Param PARES\r\n     */\r\n    protected static final String PARAM_PARES = \"PARES\";\r\n    /**\r\n     * Payflow Param CURRENCY\r\n     */\r\n    protected static final String PARAM_CURRENCY = \"CURRENCY\";\r\n    /**\r\n     * Payflow Param PUR_DESC\r\n     */\r\n    protected static final String PARAM_PUR_DESC = \"PUR_DESC\";\r\n    /**\r\n     * Payflow Param ORIGID\r\n     */\r\n    protected static final String PARAM_ORIGID = \"ORIGID\";\r\n    /**\r\n     * Payflow Param UPDATEACTION\r\n     */\r\n    protected static final String PARAM_UPDATEACTION = \"UPDATEACTION\";\r\n    /**\r\n     * Payflow Param ACTION\r\n     */\r\n    protected static final String PARAM_ACTION = \"ACTION\";\r\n\r\n    /**\r\n     * Payflow Param TRACEID\r\n     */\r\n    protected static final String PARAM_TRACEID = \"TRACEID\";\r\n    /**\r\n     * Payflow Param ACHSTATUS\r\n     */\r\n    protected static final String PARAM_ACHSTATUS = \"ACHSTATUS\";\r\n    /**\r\n     * Payflow Param TXID\r\n     */\r\n    protected static final String PARAM_TXID = \"TXID\";\r\n    /**\r\n     * Payflow Param CARDONFILE\r\n     */\r\n    protected static final String PARAM_CARDONFILE = \"CARDONFILE\";\r\n    /**\r\n     * Payflow Param L_ALTTAXAMT\r\n     */\r\n    protected static final String PARAM_L_ALTTAXAMT = \"L_ALTTAXAMT\";\r\n    /**\r\n     * Payflow Param L_ALTTAXID\r\n     */\r\n    protected static final String PARAM_L_ALTTAXID = \"L_ALTTAXID\";\r\n    /**\r\n     * Payflow Param L_ALTTAXRATE\r\n     */\r\n    protected static final String PARAM_L_ALTTAXRATE = \"L_ALTTAXRATE\";\r\n    /**\r\n     * Payflow Param L_CARRIERSERVICESLEVELCODE\r\n     */\r\n    protected static final String PARAM_L_CARRIERSERVICESLEVELCODE = \"L_CARRIERSERVICESLEVELCODE\";\r\n    /**\r\n     * Payflow Param L_EXTAMT\r\n     */\r\n    protected static final String PARAM_L_EXTAMT = \"L_EXTAMT\";\r\n    /**\r\n     * Payflow Param ADDLAMT\r\n     */\r\n    protected static final String PARAM_ADDLAMT = \"ADDLAMT\";\r\n    /**\r\n     * Payflow Param ADDLAMTTYPE\r\n     */\r\n    protected static final String PARAM_ADDLAMTTYPE = \"ADDLAMTTYPE\";\r\n    /**\r\n     * Payflow Param CATTYPE\r\n     */\r\n    protected static final String PARAM_CATTYPE = \"CATTYPE\";\r\n    /**\r\n     * Payflow Param CONTACTLESS\r\n     */\r\n    protected static final String PARAM_CONTACTLESS = \"CONTACTLESS\";\r\n    /**\r\n     * Payflow Param CUSTDATA\r\n     */\r\n    protected static final String PARAM_CUSTDATA = \"CUSTDATA\";\r\n    /**\r\n     * Payflow Param CUSTOMERID\r\n     */\r\n    protected static final String PARAM_CUSTOMERID = \"CUSTOMERID\";\r\n    /**\r\n     * Payflow Param CUSTOMERNUMBER\r\n     */\r\n    protected static final String PARAM_CUSTOMERNUMBER= \"CUSTOMERNUMBER\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/// ----------------------------------------------------------------------------\r\n\r\n    /**\r\n     * Payflow Param VIT_OSNAME\r\n     */\r\n    protected static final String PARAM_VIT_OSNAME = \"VIT_OSNAME\";\r\n    /**\r\n     * Payflow Param VIT_OSARCH\r\n     */\r\n    protected static final String PARAM_VIT_OSARCH = \"VIT_OSARCH\";\r\n    /**\r\n     * Payflow Param VIT_OSVERSION\r\n     */\r\n    protected static final String PARAM_VIT_OSVERSION = \"VIT_OSVERSION\";\r\n    /**\r\n     * Payflow Param VIT_SDKRUNTIMEVERSION\r\n     */\r\n    protected static final String PARAM_VIT_SDKRUNTIMEVERSION = \"VIT_SDKRUNTIMEVERSION\";\r\n    /**\r\n     * Payflow Param VIT_PROXY\r\n     */\r\n    protected static final String PARAM_VIT_PROXY = \"VIT_PROXY\";\r\n    /**\r\n     * Payflow Param VIT_WRAPTYPE\r\n     */\r\n    protected static final String PARAM_VIT_WRAPTYPE = \"VIT_WRAPTYPE\";\r\n    /**\r\n     * Payflow Param VIT_WRAPVERSION\r\n     */\r\n    protected static final String PARAM_VIT_WRAPVERSION = \"VIT_WRAPVERSION\";\r\n    /**\r\n     * Payflow Param REQUEST_ID\r\n     */\r\n    protected static final String PARAM_REQUEST_ID = \"REQUEST_ID\";\r\n    /**\r\n     * Payflow Param RESPONSE_ID\r\n     */\r\n    protected static final String PARAM_RESPONSE_ID = \"RESPONSE_ID\";\r\n    /**\r\n     * Payflow Param VATTAXPERCENT\r\n     */\r\n    protected static final String PARAM_VATTAXPERCENT = \"VATTAXPERCENT\";\r\n    /**\r\n     * Payflow Param DUPLICATE\r\n     */\r\n    protected static final String PARAM_DUPLICATE = \"DUPLICATE\";\r\n    /**\r\n     * Payflow Param DATE_TO_SETTLE\r\n     */\r\n    protected static final String PARAM_DATE_TO_SETTLE = \"DATE_TO_SETTLE\";\r\n    /**\r\n     * Payflow Param BATCHID\r\n     */\r\n    protected static final String PARAM_BATCHID = \"BATCHID\";\r\n    /**\r\n     * Payflow Param BILLINGTYPE\r\n     */\r\n    protected static final String PARAM_BILLINGTYPE = \"BILLINGTYPE\";\r\n    /**\r\n     * Payflow Param BA_DESC\r\n     */\r\n    protected static final String PARAM_BA_DESC = \"BA_DESC\";\r\n    /**\r\n     * Payflow Param BA_CUSTOM\r\n     */\r\n    protected static final String PARAM_BA_CUSTOM = \"BA_CUSTOM\";\r\n    /**\r\n     * Payflow Param CARDISSUE\r\n     */\r\n    protected static final String PARAM_CARDISSUE = \"CARDISSUE\";\r\n    /**\r\n     * Payflow Param CARDSTART\r\n     */\r\n    protected static final String PARAM_CARDSTART = \"CARDSTART\";\r\n    /**\r\n     * Payflow Param PROMOCODEOVERRIDE\r\n     */\r\n    protected static final String PARAM_PROMOCODEOVERRIDE = \"PROMOCODEOVERRIDE\";\r\n    /**\r\n     * Payflow Param PROFILEADDRESSCHANGEDATE\r\n     */\r\n    protected static final String PARAM_PROFILEADDRESSCHANGEDATE = \"PROFILEADDRESSCHANGEDATE\";\r\n    /**\r\n     * Payflow Param PAYPALCHECKOUTBTNTYPE\r\n     */\r\n    protected static final String PARAM_PAYPALCHECKOUTBTNTYPE = \"PAYPALCHECKOUTBTNTYPE\";\r\n    /**\r\n     * Payflow Param PRODUCTCATEGORY\r\n     */\r\n    protected static final String PARAM_PRODUCTCATEGORY = \"PRODUCTCATEGORY\";\r\n    /**\r\n     * Payflow Param SHIPPINGMETHOD\r\n     */\r\n    protected static final String PARAM_SHIPPINGMETHOD = \"SHIPPINGMETHOD\";\r\n    /**\r\n     * Payflow Param PROMOCODE\r\n     */\r\n    protected static final String PARAM_PROMOCODE = \"PROMOCODE\";\r\n    /**\r\n     * Payflow Param BALAMT\r\n     */\r\n    protected static final String PARAM_BALAMT = \"BALAMT\";\r\n    /**\r\n     * Payflow Param AMEXID\r\n     */\r\n    protected static final String PARAM_AMEXID = \"AMEXID\";\r\n    /**\r\n     * Payflow Param AMEXPOSDATA\r\n     */\r\n    protected static final String PARAM_AMEXPOSDATA = \"AMEXPOSDATA\";\r\n    /**\r\n     * Payflow Param CARDTYPE\r\n     */\r\n    protected static final String PARAM_CARDTYPE = \"CARDTYPE\";\r\n    /**\r\n     * Payflow Param PARTIALAUTH\r\n     */\r\n    protected static final String PARAM_PARTIALAUTH = \"PARTIALAUTH\";\r\n    /**\r\n     * Payflow Param ORIGAMT\r\n     */\r\n    protected static final String PARAM_ORIGAMT = \"ORIGAMT\";\r\n    /**\r\n     * Payflow Param TRANSTIME\r\n     */\r\n    protected static final String PARAM_TRANSTIME = \"TRANSTIME\";\r\n\r\n    /**\r\n     * Payflow Param SECURETOKEN\r\n     */\r\n    protected static final String PARAM_SECURETOKEN = \"SECURETOKEN\";\r\n    /**\r\n     * Payflow Param SECURETOKENID\r\n     */\r\n    protected static final String PARAM_SECURETOKENID = \"SECURETOKENID\";\r\n    /**\r\n     * Payflow Param CREATESECURETOKEN\r\n     */\r\n    protected static final String PARAM_CREATESECURETOKEN = \"CREATESECURETOKEN\";\r\n        /**\r\n     * Payflow Param PHONEMATCH\r\n     */\r\n    protected static final String PARAM_PHONEMATCH = \"PHONEMATCH\";\r\n            /**\r\n     * Payflow Param EMAILMATCH\r\n     */\r\n    protected static final String PARAM_EMAILMATCH = \"EMAILMATCH\";\r\n            /**\r\n     * Payflow Param EXTRSPMSG\r\n     */\r\n    protected static final String PARAM_EXTRSPMSG = \"EXTRSPMSGE\";\r\n    /**\r\n     * Payflow Param ALLOWNOTE\r\n     */\r\n    protected static final String PARAM_ALLOWNOTE = \"ALLOWNOTE\";\r\n    /**\r\n    * Payflow Param PAYMENTADVICECODE\r\n    */\r\n    protected static final String PARAM_PAYMENTADVICECODE = \"PAYMENTADVICECODE\";\r\n    /**\r\n     * Payflow Param PAYMENTADVICECODE\r\n     */\r\n    protected static final String PARAM_ASSOCIATIONRESPCODE = \"ASSOCIATIONRESPCODE\";\r\n    /**\r\n     * Payflow Param TRANSACTIONID\r\n     */\r\n    protected static final String PARAM_TRANSACTIONID = \"TRANSACTIONID\";\r\n    /**\r\n     * Payflow Param ECHODATA\r\n     */\r\n    protected static final String PARAM_ECHODATA = \"ECHODATA\";\r\n    /**\r\n     * Payflow Param ORDERID\r\n     */\r\n    protected static final String PARAM_ORDERID = \"ORDERID\";\r\n    /**\r\n     * Payflow Param USER1\r\n     */\r\n    protected static final String PARAM_USER1 = \"USER1\";\r\n    /**\r\n     * Payflow Param USERv2\r\n     */\r\n    protected static final String PARAM_USER2 = \"USER2\";\r\n    /**\r\n     * Payflow Param USER3\r\n     */\r\n    protected static final String PARAM_USER3 = \"USER3\";\r\n    /**\r\n     * Payflow Param USER4\r\n     */\r\n    protected static final String PARAM_USER4 = \"USER4\";\r\n    /**\r\n     * Payflow Param USER5\r\n     */\r\n    protected static final String PARAM_USER5 = \"USER5\";\r\n    /**\r\n     * Payflow Param USER6\r\n     */\r\n    protected static final String PARAM_USER6 = \"USER6\";\r\n    /**\r\n     * Payflow Param USER7\r\n     */\r\n    protected static final String PARAM_USER7 = \"USER7\";\r\n    /**\r\n     * Payflow Param USER8\r\n     */\r\n    protected static final String PARAM_USER8 = \"USER8\";\r\n    /**\r\n     * Payflow Param USER9\r\n     */\r\n    protected static final String PARAM_USER9 = \"USER9\";\r\n    /**\r\n     * Payflow Param USER10\r\n     */\r\n    protected static final String PARAM_USER10 = \"USER10\";\r\n    /**\r\n     * Payflow Param TYPE\r\n     */\r\n    protected static final String PARAM_TYPE = \"TYPE\";\r\n    /**\r\n     * Payflow Param AFFLUENT\r\n     */\r\n    protected static final String PARAM_AFFLUENT = \"AFFLUENT\";\r\n    /**\r\n     * Payflow Param CCUPDATED\r\n     */\r\n    protected static final String PARAM_CCUPDATED = \"CCUPDATED\";\r\n    /**\r\n     * Payflow Param THREEDSVERSION\r\n     */\r\n    protected static final String PARAM_THREEDSVERSION= \"THREEDSVERSION\";\r\n    /**\r\n     * Payflow Param DSTRANSACTIONID\r\n     */\r\n    protected static final String PARAM_DSTRANSACTIONID = \"DSTRANSACTIONID\";\r\n\r\n    /**\r\n     * Payflow Param RRN\r\n     */\r\n    protected static final String PARAM_RRN = \"RRN\";\r\n    /**\r\n     * Payflow Param STAN\r\n     */\r\n    protected static final String PARAM_STAN = \"STAN\";\r\n    /**\r\n     * Payflow Param ACI\r\n     */\r\n    protected static final String PARAM_ACI = \"ACI\";\r\n    /**\r\n     * Payflow Param VALIDATIONCODE\r\n     */\r\n    protected static final String PARAM_VALIDATIONCODE = \"VALIDATIONCODE\";\r\n    /**\r\n     * Payflow Param MERCHANTLOCATIONID\r\n     */\r\n    protected static final String PARAM_MERCHANTLOCATIONID = \"MERCHANTLOCATIONID\";\r\n    /**\r\n     * Payflow Param MERCHANTID\r\n     */\r\n    protected static final String PARAM_MERCHANTID = \"MERCHANTID\";\r\n    /**\r\n     * Payflow Param MERCHANTCONTACTINFO\r\n     */\r\n    protected static final String PARAM_MERCHANTCONTACTINFO = \"MERCHANTCONTACTINFO\";\r\n    /**\r\n     * Payflow Param CCTRANSID\r\n     */\r\n    protected static final String PARAM_CCTRANSID = \"CCTRANSID\";\r\n    /**\r\n     * Payflow Param CCTRANS_POSDATA\r\n     */\r\n    protected static final String PARAM_CCTRANS_POSDATA = \"CCTRANS_POSDATA\";\r\n    /**\r\n     * Payflow Param AUTHDATE\r\n     */\r\n    protected static final String PARAM_AUTHDATE = \"AUTHDATE\";\r\n    /**\r\n     * Payflow Param MERCHANTURL\r\n     */\r\n    protected static final String PARAM_MERCHANTURL = \"MERCHANTURL\";\r\n    /**\r\n     * Payflow Param MERCHANTVATNUM\r\n     */\r\n    protected static final String PARAM_MERCHANTVATNUM= \"MERCHANTVATNUM\";\r\n    /**\r\n     * Payflow Param CUSTHOSTNAME\r\n     */\r\n    protected static final String PARAM_CUSTHOSTNAME= \"CUSTHOSTNAME\";\r\n    /**\r\n     * Payflow Param CUSTBROWSER\r\n     */\r\n    protected static final String PARAM_CUSTBROWSER= \"CUSTBROWSER\";\r\n    /**\r\n     * Payflow Param MERCHANTINVOICENUM\r\n     */\r\n    protected static final String PARAM_MERCHANTINVOICENUM= \"MERCHANTINVOICENUM\";\r\n    /**\r\n     * Payflow Param VATINVNUM\r\n     */\r\n    protected static final String PARAM_VATINVNUM = \"VATINVNUM\";\r\n    /**\r\n     * Payflow Param VATTAXRATE\r\n     */\r\n    protected static final String PARAM_VATTAXRATE = \"VATTAXRATE\";\r\n    /**\r\n     * Payflow Param REPORTGROUP\r\n     */\r\n    protected static final String PARAM_REPORTGROUP = \"REPORTGROUP\";\r\n\t    /**\r\n     * Payflow Param MISCDATA\r\n     */\r\n    protected static final String PARAM_MISCDATA = \"MISCDATA\";\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    /**\r\n     * static finalant for PAYFLOW-OS-ARCHITECTURE\r\n     */\r\n    protected static final String PAYFLOWHEADER_OS_ARCHITECTURE = \"X-VPS-VIT-OS-ARCHITECTURE\";\r\n    /**\r\n     * Recurring Inquiry Response Param Prefix\r\n     */\r\n    protected static final String PREFIX_RECURRING_INQUIRY_RESP = \"P_\";\r\n    /**\r\n     * static finalant for PAYFLOW-CLIENT-DURATION\r\n     */\r\n    protected static final String PAYFLOWHEADER_CLIENT_DURATION = \"X-VPS-VIT-CLIENT-DURATION\";\r\n    /**\r\n     * static finalant for PAYFLOW-CLIENT-VERSION\r\n     */\r\n    protected static final String PAYFLOWHEADER_CLIENT_VERSION = \"X-VPS-VIT-CLIENT-VERSION\";\r\n    /**\r\n     * static finalant for PAYFLOW-OS-NAME\r\n     */\r\n    protected static final String PAYFLOWHEADER_OS_NAME = \"X-VPS-VIT-OS-NAME\";\r\n    /**\r\n     * static finalant for PAYFLOW-OS-VERSION\r\n     */\r\n    protected static final String PAYFLOWHEADER_OS_VERSION = \"X-VPS-VIT-OS-VERSION\";\r\n    /**\r\n     * static finalant for PAYFLOW-PROXY\r\n     */\r\n    protected static final String PAYFLOWHEADER_PROXY = \"X-VPS-VIT-PROXY\";\r\n    /**\r\n     * static finalant for PAYFLOW-RUNTIME-VERSION\r\n     */\r\n    protected static final String PAYFLOWHEADER_RUNTIME_VERSION = \"X-VPS-VIT-RUNTIME-VERSION\";\r\n    /**\r\n     * static finalant for PAYFLOW-INTEGRATION-PRODUCT\r\n     */\r\n    protected static final String PAYFLOWHEADER_INTEGRATION_PRODUCT = \"X-VPS-VIT-INTEGRATION-PRODUCT\";\r\n    /**\r\n     * static finalant for PAYFLOW-INTEGRATION-VERSION\r\n     */\r\n    protected static final String PAYFLOWHEADER_INTEGRATION_VERSION = \"X-VPS-VIT-INTEGRATION-VERSION\";\r\n    /**\r\n     * static finalant for PAYFLOW-CLIENT-TYPE\r\n     */\r\n    protected static final String PAYFLOWHEADER_CLIENT_TYPE = \"X-VPS-VIT-CLIENT-TYPE\";\r\n    /**\r\n     * static finalant for PAYFLOW-ASSEMBLY\r\n     */\r\n    protected static final String PAYFLOWHEADER_PAYFLOW_ASSEMBLY = \"X-VPS-VIT-ASSEMBLY\";\r\n    /**\r\n     * max LogFile Size in Bytes; beyond this size the log file will be archived\r\n     */\r\n    protected static final int DEFAULT_MAX_LOG_FILE_SIZE = 10000000;\r\n\r\n\r\n    protected static final String PARAM_POSTALCODE = \"POSTALCODE\";\r\n    protected static final String PARAM_TOKEN = \"TOKEN\";\r\n    protected static final String PARAM_COUNTRYCODE = \"COUNTRYCODE\";\r\n    protected static final String PARAM_ACTION_SET = \"S\";\r\n    protected static final String PARAM_ACTION_DO = \"D\";\r\n    protected static final String PARAM_ACTION_GET = \"G\";\r\n    protected static final String PARAM_ACTION_UPDATE = \"U\";\r\n    protected static final String PARAM_ACTION_SETBA = \"Z\";\r\n    protected static final String PARAM_ACTION_GETBA = \"W\";\r\n    protected static final String PARAM_ACTION_DOBA = \"X\";\r\n    protected static final String PARAM_RETURNURL = \"RETURNURL\";\r\n    protected static final String PARAM_CANCELURL = \"CANCELURL\";\r\n    protected static final String PARAM_REQCONFIRMSHIPPING = \"REQCONFIRMSHIPPING\";\r\n    protected static final String PARAM_NOSHIPPING = \"NOSHIPPING\";\r\n    protected static final String PARAM_ADDROVERRIDE = \"ADDROVERRIDE\";\r\n    protected static final String PARAM_LOCALECODE = \"LOCALECODE\";\r\n    protected static final String PARAM_PAGESTYLE = \"PAGESTYLE\";\r\n    protected static final String PARAM_HDRIMG = \"HDRIMG\";\r\n    protected static final String PARAM_HDRBORDERCOLOR = \"HDRBORDERCOLOR\";\r\n    protected static final String PARAM_HDRBACKCOLOR = \"HDRBACKCOLOR\";\r\n    protected static final String PARAM_PAYFLOWCOLOR = \"PAYFLOWCOLOR\";\r\n    protected static final String PARAM_MAXAMT = \"PARAM_MAXAMT\";\r\n    protected static final String PARAM_ITEMAMT = \"ITEMAMT\";\r\n    protected static final String PARAM_L_ITEMNUMBER = \"L_ITEMNUMBER\";\r\n    protected static final String PARAM_ORDERDESC = \"ORDERDESC\";\r\n    protected static final String PARAM_RECURRINGTYPE = \"RECURRINGTYPE\";\r\n    protected static final String PARAM_REQBILLINGADDRESS = \"REQBILLINGADDRESS\";\r\n\r\n    protected static final String INTL_PARAM_FULLRESPONSE = \"FULLRESPONSE\";\r\n    protected static final String PARAM_SETTLE_DATE = \"SETTLE_DATE\";\r\n    protected static final String PARAM_ORIGPNREF = \"ORIGPNREF\";\r\n    protected static final String PARAM_ORIGPPREF = \"ORIGPPREF\";\r\n    protected static final String PARAM_PAYERID = \"PAYERID\";\r\n    protected static final String PARAM_BUTTONSOURCE = \"BUTTONSOURCE\";\r\n    protected static final String PARAM_NOTIFYURL = \"NOTIFYURL\";\r\n    protected static final String PARAM_CUSTOM = \"CUSTOM\";\r\n    protected static final String PARAM_MERCHANTSESSIONID = \"MERCHANTSESSIONID\";\r\n    protected static final String PARAM_PAYERSTATUS = \"PAYERSTATUS\";\r\n    protected static final String PARAM_SHIPTOBUSINESS = \"SHIPTOBUSINESS\";\r\n    //protected static final String PARAM_ADDRSTATUS = \"ADDRSTATUS\";\r\n\r\n    protected static final String PARAM_PPREF = \"PPREF\";\r\n    protected static final String PARAM_FEEAMT = \"FEEAMT\";\r\n    protected static final String PARAM_SETTLEAMT = \"SETTLEAMT\";\r\n    protected static final String PARAM_EXCHANGERATE = \"EXCHANGERATE\";\r\n    protected static final String PARAM_PENDINGREASON = \"PENDINGREASON\";\r\n    protected static final String PARAM_PAYMENTDATE = \"PAYMENTDATE\";\r\n    protected static final String PARAM_PAYMENTSTATUS = \"PAYMENTSTATUS\";\r\n    protected static final String PARAM_PAYMENTTYPE = \"PAYMENTTYPE\";\r\n    protected static final String TAG_DUPLICATE = \"DUPLIACTE_NAME_KEY\";\r\n    protected static final String PARAM_SHIPPINGAMT = \"SHIPPINGAMT\";\r\n    protected static final String PARAM_CORRELATIONID = \"CORRELATIONID\";\r\n    protected static final String TENDERTYPE_ACH = \"A\";\r\n    protected static final String TENDERTYPE_PAYPAL = \"P\";\r\n    protected static final String TENDERTYPE_TELECHECK = \"K\";\r\n    protected static final String TRXTYPE_RECURRING = \"R\";\r\n    protected static final String TRXTYPE_AUTH = \"A\";\r\n    protected static final String TRXTYPE_BUYERAUTH_VA = \"Z\";\r\n    protected static final String TRXTYPE_BUYERAUTH_VE = \"E\";\r\n    protected static final String TRXTYPE_CAPTURE = \"D\";\r\n    protected static final String TRXTYPE_CREDIT = \"C\";\r\n    protected static final String TRXTYPE_FRAUDAPPROVE = \"U\";\r\n    protected static final String TRXTYPE_INQUIRY = \"I\";\r\n    protected static final String TRXTYPE_SALE = \"S\";\r\n    protected static final String TRXTYPE_VOID = \"V\";\r\n    protected static final String TRXTYPE_VOICEAUTH = \"F\";\r\n\r\n    public static final String RECURRING_ACTION_ADD = \"A\";\r\n    public static final String RECURRING_ACTION_INQUIRY = \"I\";\r\n    public static final String RECURRING_ACTION_MODIFY = \"M\";\r\n    public static final String RECURRING_ACTION_REACTIVATE = \"R\";\r\n    public static final String RECURRING_ACTION_PAYMENT = \"P\";\r\n    public static final String RECURRING_ACTION_CANCEL = \"C\";\r\n\r\n    // MagTek Encrypted Swipe params constants\r\n    /**\r\n     * Payflow Param ENCMP\r\n     */\r\n    protected static final String MAGTEK_PARAM_ENCMP = \"ENCMP\";\r\n    /**\r\n     * Payflow Param ENCRYTIONBLOCKTYPE\r\n     */\r\n    protected static final String MAGTEK_PARAM_ENCRYPTIONBLOCKTYPE = \"ENCRYPTIONBLOCKTYPE\";\r\n    /**\r\n     * Payflow Param ENCTRACK1\r\n     */\r\n    protected static final String MAGTEK_PARAM_ENCTRACK1 = \"ENCTRACK1\";\r\n    /**\r\n     * Payflow Param ENCTRACK2\r\n     */\r\n    protected static final String MAGTEK_PARAM_ENCTRACK2 = \"ENCTRACK2\";\r\n    /**\r\n     * Payflow Param ENCTRACK3\r\n     */\r\n    protected static final String MAGTEK_PARAM_ENCTRACK3 = \"ENCTRACK3\";\r\n    /**\r\n     * Payflow Param KSN\r\n     */\r\n    protected static final String MAGTEK_PARAM_KSN = \"KSN\";\r\n    /**\r\n     * Payflow Param MAGTEKCARDTYPE\r\n     */\r\n    protected static final String  MAGTEK_PARAM_MAGTEKCARDTYPE = \"MAGTEKCARDTYPE\";\r\n    /**\r\n     * Payflow Param NPSTATUS\r\n     */\r\n    protected static final String MAGTEK_PARAM_MPSTATUS = \"MPSTATUS\";\r\n    /**\r\n     * Payflow Param REGISTEREDBY\r\n     */\r\n    protected static final String MAGTEK_PARAM_REGISTEREDBY = \"REGISTEREDBY\";\r\n    /**\r\n     * Payflow Param SWIPEDECRHOST\r\n     */\r\n    protected static final String MAGTEK_PARAM_SWIPEDECRHOST = \"SWIPEDECRHOST\";\r\n    /**\r\n     * Payflow Param DEVICESN\r\n     */\r\n    protected static final String MAGTEK_PARAM_DEVICESN = \"DEVICESN\";\r\n    /**\r\n     * Payflow Param MERCHANTID\r\n     */\r\n    protected static final String MAGTEK_PARAM_MERCHANTID = \"MERCHANTID\";\r\n    /**\r\n     * Payflow Param PAN4\r\n     */\r\n    protected static final String MAGTEK_PARAM_PAN4 = \"PAN4\";\r\n    /**\r\n     * Payflow Param PCODE\r\n     */\r\n    protected static final String MAGTEK_PARAM_PCODE = \"PCODE\";\r\n    /**\r\n     * Payflow Param AUTHVALUE1\r\n     */\r\n    protected static final String MAGTEK_PARAM_AUTHVALUE1 = \"AUTHVALUE1\";\r\n    /**\r\n     * Payflow Param AUTHVALUE2\r\n     */\r\n    protected static final String MAGTEK_PARAM_AUTHVALUE2 = \"AUTHVALUE2\";\r\n    /**\r\n     * Payflow Param AUTHVALUE3\r\n     */\r\n    protected static final String MAGTEK_PARAM_AUTHVALUE3 = \"AUTHVALUE3\";\r\n    /**\r\n     * Payflow Param MAGTEKUSERNAME\r\n     */\r\n    protected static final String MAGTEK_PARAM_MAGTEKUSERNAME = \"MAGTEKUSERNAME\";\r\n    /**\r\n     * Payflow Param MAGTEKPWD\r\n     */\r\n    protected static final String MAGTEK_PARAM_MAGTEKPWD = \"MAGTEKPWD\";\r\n    /**\r\n     * Payflow Param MAGTRESPONSE\r\n     */\r\n    protected static final String MAGTEK_PARAM_MAGTRESPONSE = \"MAGTRESPONSE\";\r\n\r\n\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/base/paypal/payflow/PayflowConstants.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/base/paypal/payflow/PayflowConstants.java	(date 1600063730061)
@@ -18,7 +18,7 @@
     protected static final String EMPTY_STRING = "";
 
     /**
-     * NVP Delimiter (&)
+     * NVP Delimiter (ampersand)
      */
     protected static final String DELIMITER_NVP = "&";
 
@@ -55,11 +55,11 @@
      */
     protected static final int DEFAULT_HOSTPORT = 443;
     /**
-     * SDK Client Type (J --> JAVA)
+     * SDK Client Type (J -- JAVA)
      */
     protected static final String CLIENT_TYPE = "J";
     /**
-     * SDK Client Version (4000 --> V4 protocol)
+     * SDK Client Version (4000 -- V4 protocol)
      */
     protected static final String CLIENT_VERSION = "440";
     /**
Index: src/sdk/dataobjects/paypal/payflow/PaymentCard.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This abstract class serves as base class for Card Payment devices.\r\n * This class can be extended to create a new payment device type.\r\n */\r\nabstract class PaymentCard extends PaymentDevice {\r\n    /**\r\n     * Card Expiry Date\r\n     */\r\n    private String expDate;\r\n    /**\r\n     * Card CVV2 code\r\n     */\r\n    private String cvv2;\r\n    /**\r\n     * Card Sart used for Swicth/Solo cards.\r\n     */\r\n    private String cardStart;\r\n    /**\r\n     * Card Issue used for Swicth/Solo cards.\r\n     */\r\n    private String cardIssue;\r\n    /**\r\n     * Flag card as stored credential (card on file).\r\n     */\r\n    private String cardOnFile;\r\n    /**\r\n     * Transaction Id for stored credential (card on file).\r\n     */\r\n    private String txId;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param acct    Card number\r\n     * @param expDate Card expiry date\r\n     */\r\n    protected PaymentCard(String acct, String expDate) {\r\n        super(acct);\r\n        this.expDate = expDate;\r\n    }\r\n\r\n    /**\r\n     * Gets the CVV2 value.\r\n     * Card validation code. This is the 3 or 4 digit code present at the back side of the card.\r\n     *\r\n     * @return CVV2 value\r\n     *         <p/>\r\n     *  Maps to Payflow Parameters as follows: CVV2\r\n     * </p>\r\n     */\r\n    public String getCvv2() {\r\n        return cvv2;\r\n    }\r\n\r\n    /**\r\n     * Sets the CVV2 value.\r\n     * Card validation code. This is the 3 or 4 digit code present at the back side of the card.\r\n     *\r\n     * @param cvv2 CVV2 value\r\n     *             <p/>\r\n     *  Maps to Payflow Parameters as follows: CVV2\r\n     * </p>\r\n     */\r\n    public void setCvv2(String cvv2) {\r\n        this.cvv2 = cvv2;\r\n    }\r\n\r\n    /**\r\n     * Gets the cardIssue\r\n     * <p> Used in Switch/Solo cards </p>\r\n     *\r\n     * @return cardIssue String\r\n     *         <p/>\r\n     *  Maps to Payflow Parameter : CARDISSUE\r\n     * </p>\r\n     */\r\n    public String getCardIssue() {\r\n        return cardIssue;\r\n    }\r\n\r\n    /**\r\n     * Sets the cardIssue\r\n     * <p> Used in Switch/Solo cards </p>\r\n     *\r\n     * @param cardIssue String\r\n     *                  <p/>\r\n     *  Maps to Payflow Parameter : CARDISSUE\r\n     * </p>\r\n     */\r\n    public void setCardIssue(String cardIssue) {\r\n        this.cardIssue = cardIssue;\r\n    }\r\n\r\n    /**\r\n     * Gets the cardStart\r\n     * <p> Used in Switch/Solo cards </p>\r\n     *\r\n     * @return cardStart String\r\n     *         <p/>\r\n     *  Maps to Payflow Parameter : CARDSTART\r\n     * </p>\r\n     */\r\n    public String getCardStart() {\r\n        return cardStart;\r\n    }\r\n\r\n    /**\r\n     * Sets the cardStart\r\n     * <p> Used in Switch/Solo cards </p>\r\n     *\r\n     * @param cardStart String\r\n     *                  <p/>\r\n     *  Maps to Payflow Parameter : CARDSTART\r\n     * </p>\r\n     */\r\n    public void setCardStart(String cardStart) {\r\n        this.cardStart = cardStart;\r\n    }\r\n\r\n    /**\r\n     * Sets the cardOnFile\r\n     * <p> Used to store credit card (stored credential) </p>\r\n     *\r\n     * @param cardOnFile String\r\n     *                  <p/>\r\n     *  Maps to Payflow Parameter : CARDONFILE\r\n     * </p>\r\n     */\r\n    public void setCardOnFile(String cardOnFile) {\r\n        this.cardOnFile= cardOnFile;\r\n    }\r\n    /**\r\n     * Sets the Transaction Id (stored credential).\r\n     * <p> The transaction Id to reference a stored crendential</p>\r\n     *\r\n     * @param txId String\r\n     *                  <p/>\r\n     *  Maps to Payflow Parameter : TXID\r\n     * </p>\r\n     */\r\n    public void setTxId(String txId) {\r\n        this.txId = txId;\r\n    }\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_EXPDATE, expDate));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CVV2, cvv2));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CARDSTART, cardStart));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CARDISSUE, cardIssue));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CARDONFILE, cardOnFile));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TXID, txId));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/PaymentCard.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/PaymentCard.java	(date 1600056970131)
@@ -46,7 +46,7 @@
      * Card validation code. This is the 3 or 4 digit code present at the back side of the card.
      *
      * @return CVV2 value
-     *         <p/>
+     *          * <p>
      *  Maps to Payflow Parameters as follows: CVV2
      * </p>
      */
@@ -59,7 +59,7 @@
      * Card validation code. This is the 3 or 4 digit code present at the back side of the card.
      *
      * @param cvv2 CVV2 value
-     *             <p/>
+     *              * <p>
      *  Maps to Payflow Parameters as follows: CVV2
      * </p>
      */
@@ -72,7 +72,7 @@
      * <p> Used in Switch/Solo cards </p>
      *
      * @return cardIssue String
-     *         <p/>
+     *          * <p>
      *  Maps to Payflow Parameter : CARDISSUE
      * </p>
      */
@@ -85,7 +85,7 @@
      * <p> Used in Switch/Solo cards </p>
      *
      * @param cardIssue String
-     *                  <p/>
+     *                   * <p>
      *  Maps to Payflow Parameter : CARDISSUE
      * </p>
      */
@@ -98,7 +98,7 @@
      * <p> Used in Switch/Solo cards </p>
      *
      * @return cardStart String
-     *         <p/>
+     *          * <p>
      *  Maps to Payflow Parameter : CARDSTART
      * </p>
      */
@@ -111,7 +111,7 @@
      * <p> Used in Switch/Solo cards </p>
      *
      * @param cardStart String
-     *                  <p/>
+     *                   * <p>
      *  Maps to Payflow Parameter : CARDSTART
      * </p>
      */
@@ -124,7 +124,7 @@
      * <p> Used to store credit card (stored credential) </p>
      *
      * @param cardOnFile String
-     *                  <p/>
+     *                   * <p>
      *  Maps to Payflow Parameter : CARDONFILE
      * </p>
      */
@@ -136,7 +136,7 @@
      * <p> The transaction Id to reference a stored crendential</p>
      *
      * @param txId String
-     *                  <p/>
+     *                   * <p>
      *  Maps to Payflow Parameter : TXID
      * </p>
      */
Index: src/sdk/dataobjects/paypal/payflow/RecurringInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n/**\r\n * Used for recurring transaction related information\r\n * <p>RecurringInfo contains the required and optional parameters\r\n * specific to all the recurring transactions.</p>\r\n *\r\n *  Following examples shows how to use the RecurringInfo.\r\n * <code lang=\"C#\" escaped=\"false\">\r\n * ............................\r\n * //Populate other data objects.\r\n * ............................\r\n * <p/>\r\n * RecurringInfo RecurInfo = new RecurringInfo();\r\n * // The date that the first payment will be processed.\r\n * // This will be of the format mmddyyyy.\r\n * RecurInfo.Start = \"01012009\";\r\n * RecurInfo.ProfileName = \"PayPal\";\r\n * // Specifies how often the payment occurs. All PAYPERIOD values must use\r\n * // capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /\r\n * // QTER / SMYR / YEAR\r\n * RecurInfo.PayPeriod = \"WEEK\";\r\n * <p/>\r\n * <p/>\r\n * // Create a new Recurring Add Transaction.\r\n * RecurringAddTransaction Trans = new RecurringAddTransaction(\r\n * User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId);\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response Resp = Trans.SubmitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse TrxnResponse =  Resp.TransactionResponse;\r\n * if (TrxnResponse != null)\r\n * {\r\n * Console.WriteLine(\"RESULT = \" + TrxnResponse.Result);\r\n * Console.WriteLine(\"RESPMSG = \" + TrxnResponse.RespMsg);\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse RecurResponse = Resp.RecurringResponse;\r\n * if (RecurResponse != null)\r\n * {\r\n * Console.WriteLine(\"RPREF = \" + RecurResponse.RPRef);\r\n * Console.WriteLine(\"PROFILEID = \" + RecurResponse.ProfileId);\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context Ctx = Resp.TransactionContext;\r\n * if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)\r\n * {\r\n * Console.WriteLine(Environment.NewLine + \"Errors = \" + Ctx.ToString());\r\n * }\r\n * <p/>\r\n * Console.WriteLine(Environment.NewLine + \"Press Enter to Exit ...\");\r\n * Console.ReadLine();\r\n * }\r\n * </code>\r\n */\r\npublic final class RecurringInfo extends BaseRequestDataObject {\r\n    private String profileName;\r\n    private String start;\r\n    private long term = PayflowConstants.INVALID_NUMBER;\r\n    private String payPeriod;\r\n    private String optionalTrx;\r\n    private Currency optionalTrxAmt;\r\n    private long retryNumDays;\r\n    private long maxFailPayments = PayflowConstants.INVALID_NUMBER;\r\n    private String origProfileId;\r\n    private String paymentHistory;\r\n    private String paymentNum;\r\n\r\n    /**\r\n     * Gets the profileName parameter.\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PROFILENAME\r\n     */\r\n    public String getProfileName() {\r\n        return profileName;\r\n    }\r\n\r\n    /**\r\n     * Sets the profileName parameter.\r\n     *\r\n     * @param profileName - String\r\n     *  <p>Maps to Payflow Parameter: PROFILENAME\r\n     */\r\n    public void setProfileName(String profileName) {\r\n        this.profileName = profileName;\r\n    }\r\n\r\n    /**\r\n     * Gets the start parameter.\r\n     * <p>Beginning date for the recurring billing cycle.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: START\r\n     */\r\n    public String getStart() {\r\n        return start;\r\n    }\r\n\r\n    /**\r\n     * Sets the start parameter.\r\n     * <p>Beginning date for the recurring billing cycle.</p>\r\n     *\r\n     * @param start - String\r\n     *  <p>Maps to Payflow Parameter: START\r\n     */\r\n    public void setStart(String start) {\r\n        this.start = start;\r\n    }\r\n\r\n    /**\r\n     * Gets the term parameter.\r\n     * <p>Number of payments to be made over the life of the agreement.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: TERM\r\n     */\r\n    public long getTerm() {\r\n        return term;\r\n    }\r\n\r\n    /**\r\n     * Sets the term parameter.\r\n     * <p>Number of payments to be made over the life of the agreement.</p>\r\n     *\r\n     * @param term - String\r\n     *  <p>Maps to Payflow Parameter: TERM\r\n     */\r\n    public void setTerm(long term) {\r\n        this.term = term;\r\n    }\r\n\r\n    /**\r\n     * Gets the payPeriod parameter.\r\n     * <p>Specifies how often the payment occurs.</p>\r\n     *\r\n     * @return - String\r\n     *         <p/>\r\n     *         {@paypal.listtable}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.lth} Value {@paypal.elth}\r\n     *         {@paypal.lth} Description {@paypal.elth}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} WEEK {@paypal.eltd}\r\n     *         {@paypal.ltd} Weekly - Every week on the same day of the week as the first payment. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} BIWK {@paypal.eltd}\r\n     *         {@paypal.ltd} Every Two Weeks - Every other week on the same day of the week as the first payment. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} SMMO {@paypal.eltd}\r\n     *         {@paypal.ltd} Twice Every Month - The 1st and 15th of the month.Results in 24 payments per year. SMMO can start on 1st to 15th of the month, second payment 15 days later or on the last day of the month. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} FRWK {@paypal.eltd}\r\n     *         {@paypal.ltd} Every Four Weeks - Every 28 days from the previous payment date beginning with the first payment date. Results in 13 payments per year. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} MONT {@paypal.eltd}\r\n     *         {@paypal.ltd} Monthly - Every month on the same date as the first payment. Results in 12 payments per year. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} QTER {@paypal.eltd}\r\n     *         {@paypal.ltd} Quarterly - Every three months on the same date as the first payment. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} SMYR {@paypal.eltd}\r\n     *         {@paypal.ltd} Twice Every Year - Every six months on the same date as the first payment. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd} YEAR {@paypal.eltd}\r\n     *         {@paypal.ltd} Yearly - Every twelve months on the same date as the first payment. {@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.endlisttable}\r\n     *         </p>\r\n     *  <p>Maps to Payflow Parameter: PAYPERIOD\r\n     */\r\n    public String getPayPeriod() {\r\n        return payPeriod;\r\n    }\r\n\r\n    /**\r\n     * Sets the payPeriod parameter.\r\n     * <p>Specifies how often the payment occurs.</p>\r\n     *\r\n     * @param payPeriod - String\r\n     *                  <p/>\r\n     *                  * {@paypal.listtable}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.lth} Value {@paypal.elth}\r\n     *                  {@paypal.lth} Description {@paypal.elth}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} WEEK {@paypal.eltd}\r\n     *                  {@paypal.ltd} Weekly - Every week on the same day of the week as the first payment. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} BIWK {@paypal.eltd}\r\n     *                  {@paypal.ltd} Every Two Weeks - Every other week on the same day of the week as the first payment. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} SMMO {@paypal.eltd}\r\n     *                  {@paypal.ltd} Twice Every Month - The 1st and 15th of the month.Results in 24 payments per year. SMMO can start on 1st to 15th of the month, second payment 15 days later or on the last day of the month. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} FRWK {@paypal.eltd}\r\n     *                  {@paypal.ltd} Every Four Weeks - Every 28 days from the previous payment date beginning with the first payment date. Results in 13 payments per year. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} MONT {@paypal.eltd}\r\n     *                  {@paypal.ltd} Monthly - Every month on the same date as the first payment. Results in 12 payments per year. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} QTER {@paypal.eltd}\r\n     *                  {@paypal.ltd} Quarterly - Every three months on the same date as the first payment. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} SMYR {@paypal.eltd}\r\n     *                  {@paypal.ltd} Twice Every Year - Every six months on the same date as the first payment. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.ltr}\r\n     *                  {@paypal.ltd} YEAR {@paypal.eltd}\r\n     *                  {@paypal.ltd} Yearly - Every twelve months on the same date as the first payment. {@paypal.eltd}\r\n     *                  {@paypal.eltr}\r\n     *                  {@paypal.endlisttable}\r\n     *                  </p>\r\n     *  <p>Maps to Payflow Parameter: PAYPERIOD\r\n     */\r\n    public void setPayPeriod(String payPeriod) {\r\n        this.payPeriod = payPeriod;\r\n    }\r\n\r\n    /**\r\n     * Gets the optionalTrx parameter.\r\n     * <p>Defines an optional Authorization for validating the account\r\n     * information or for charging an initial fee. If this transaction\r\n     * fails, then the profile is not generated.\r\n     * OPTIONALTRX=A only applies to credit card transactions.</p>\r\n     * <p>S represents an initial fee.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: OPTIONALTRX\r\n     */\r\n    public String getOptionalTrx() {\r\n        return optionalTrx;\r\n    }\r\n\r\n    /**\r\n     * Sets the optionalTrx parameter.\r\n     * <p>Defines an optional Authorization for validating the account\r\n     * information or for charging an initial fee. If this transaction\r\n     * fails, then the profile is not generated.\r\n     * OPTIONALTRX=A only applies to credit card transactions.</p>\r\n     * <p>S represents an initial fee.</p>\r\n     *\r\n     * @param optionalTrx - String\r\n     *  <p>Maps to Payflow Parameter: OPTIONALTRX\r\n     */\r\n    public void setOptionalTrx(String optionalTrx) {\r\n        this.optionalTrx = optionalTrx;\r\n    }\r\n\r\n    /**\r\n     * Gets the optionalTrxAmt parameter.\r\n     * <p>Amount of the Optional Transaction. Required only when OPTIONALTRX=S.\r\n     * Optional when OPTIONALTRX=A ($1 Authorization by default)</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: OPTIONALTRXAMT\r\n     */\r\n    public Currency getOptionalTrxAmt() {\r\n        return optionalTrxAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the optionalTrxAmt parameter.\r\n     * <p>Amount of the Optional Transaction. Required only when OPTIONALTRX=S.\r\n     * Optional when OPTIONALTRX=A ($1 Authorization by default)</p>\r\n     *\r\n     * @param optionalTrxAmt - String\r\n     *  <p>Maps to Payflow Parameter: OPTIONALTRXAMT\r\n     */\r\n    public void setOptionalTrxAmt(Currency optionalTrxAmt) {\r\n        this.optionalTrxAmt = optionalTrxAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the retryNumDays parameter.\r\n     * <p>The number of consecutive days that Gateway should\r\n     * attempt to process a failed transaction until Approved\r\n     * status is received.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: RETRYNUMDAYS\r\n     */\r\n    public long getRetryNumDays() {\r\n        return retryNumDays;\r\n    }\r\n\r\n    /**\r\n     * Sets the retryNumDays parameter.\r\n     * <p>The number of consecutive days that Gateway should\r\n     * attempt to process a failed transaction until Approved\r\n     * status is received.</p>\r\n     *\r\n     * @param retryNumDays - String\r\n     *  <p>Maps to Payflow Parameter: RETRYNUMDAYS\r\n     */\r\n    public void setRetryNumDays(long retryNumDays) {\r\n        this.retryNumDays = retryNumDays;\r\n    }\r\n\r\n    /**\r\n     * Gets the maxFailPayments parameter.\r\n     * <p/>\r\n     * * The number of payment periods (specified by\r\n     * PAYPERIOD) for which the transaction is allowed to fail\r\n     * before PayPal cancels a profile.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: MAXFAILPAYMENTS\r\n     */\r\n    public long getMaxFailPayments() {\r\n        return maxFailPayments;\r\n    }\r\n\r\n    /**\r\n     * Sets the maxFailPayments parameter.\r\n     * <p/>\r\n     * * The number of payment periods (specified by\r\n     * PAYPERIOD) for which the transaction is allowed to fail\r\n     * before PayPal cancels a profile.</p>\r\n     *\r\n     * @param maxFailPayments - String\r\n     *  <p>Maps to Payflow Parameter: MAXFAILPAYMENTS\r\n     */\r\n    public void setMaxFailPayments(long maxFailPayments) {\r\n        this.maxFailPayments = maxFailPayments;\r\n    }\r\n\r\n    /**\r\n     * Gets the origProfileId parameter.\r\n     * <p>Required for Modify/Cancel/Inquiry/Retry action.\r\n     * Profile IDs for test profiles start with RT.\r\n     * Profile IDs for live profiles start with RP.\r\n     * </p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: ORIGPROFILEID\r\n     */\r\n    public String getOrigProfileId() {\r\n        return origProfileId;\r\n    }\r\n\r\n    /**\r\n     * Sets the origProfileId parameter.\r\n     * <p>Required for Modify/Cancel/Inquiry/Retry action.\r\n     * Profile IDs for test profiles start with RT.\r\n     * Profile IDs for live profiles start with RP.\r\n     * </p>\r\n     *\r\n     * @param origProfileId - String\r\n     *  <p>Maps to Payflow Parameter: ORIGPROFILEID\r\n     */\r\n    public void setOrigProfileId(String origProfileId) {\r\n        this.origProfileId = origProfileId;\r\n    }\r\n\r\n    /**\r\n     * Gets the paymentHistory parameter.\r\n     * <p/>\r\n     * Used for recurring inquiry.Allowed values are:\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth} Value {@paypal.elth}\r\n     * {@paypal.lth} Description {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} Y {@paypal.eltd}\r\n     * {@paypal.ltd} To view the full set of payment information for a profile, include the name/value pair with the Inquiry action. {@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} N {@paypal.eltd}\r\n     * {@paypal.ltd} To view the status of a customer's profile, submit an Inquiry action that does not include the PAYMENTHISTORY parameter (alternatively, submit PAYMENTHISTORY=N). {@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     * </p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTHISTORY\r\n     */\r\n    public String getPaymentHistory() {\r\n        return paymentHistory;\r\n    }\r\n\r\n    /**\r\n     * Sets the paymentHistory parameter.\r\n     * <p/>\r\n     * Used for recurring inquiry.Allowed values are:\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth} Value {@paypal.elth}\r\n     * {@paypal.lth} Description {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} Y {@paypal.eltd}\r\n     * {@paypal.ltd} To view the full set of payment information for a profile, include the name/value pair with the Inquiry action. {@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} N {@paypal.eltd}\r\n     * {@paypal.ltd} To view the status of a customer's profile, submit an Inquiry action that does not include the PAYMENTHISTORY parameter (alternatively, submit PAYMENTHISTORY=N). {@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     * </p>\r\n     *\r\n     * @param paymentHistory - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTHISTORY\r\n     */\r\n    public void setPaymentHistory(String paymentHistory) {\r\n        this.paymentHistory = paymentHistory;\r\n    }\r\n\r\n    /**\r\n     * Gets the paymentNum parameter.\r\n     * <p>Payment number identifying the failed payment to be retried.</p>\r\n     *\r\n     * @return - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTNUM\r\n     */\r\n    public String getPaymentNum() {\r\n        return paymentNum;\r\n    }\r\n\r\n    /**\r\n     * Sets the paymentNum parameter.\r\n     * <p>Payment number identifying the failed payment to be retried.</p>\r\n     *\r\n     * @param paymentNum - String\r\n     *  <p>Maps to Payflow Parameter: PAYMENTNUM\r\n     */\r\n    public void setPaymentNum(String paymentNum) {\r\n        this.paymentNum = paymentNum;\r\n    }\r\n\r\n    /**\r\n     * constructor\r\n     */\r\n    public RecurringInfo() {\r\n    }\r\n\r\n\r\n    protected void generateRequest() {\r\n        try {\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PROFILENAME, profileName));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_START, start));\r\n\r\n            if (term != PayflowConstants.INVALID_NUMBER) {\r\n                super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TERM, String.valueOf(term)));\r\n            }\r\n\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAYPERIOD, payPeriod));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_OPTIONALTRX, optionalTrx));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_OPTIONALTRXAMT, optionalTrxAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_RETRYNUMDAYS, String.valueOf(retryNumDays)));\r\n            if (maxFailPayments != PayflowConstants.INVALID_NUMBER) {\r\n                super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_MAXFAILPAYMENTS, String.valueOf(maxFailPayments)));\r\n            }\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGPROFILEID, origProfileId));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAYMENTHISTORY, paymentHistory));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PAYMENTNUM, paymentNum));\r\n        }\r\n        catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() != null) {\r\n                getContext().addError(err);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/RecurringInfo.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/RecurringInfo.java	(date 1600063101789)
@@ -2,16 +2,15 @@
 
 
 /**
+ * <pre> {@code
  * Used for recurring transaction related information
  * <p>RecurringInfo contains the required and optional parameters
  * specific to all the recurring transactions.</p>
  *
  *  Following examples shows how to use the RecurringInfo.
- * <code lang="C#" escaped="false">
  * ............................
  * //Populate other data objects.
  * ............................
- * <p/>
  * RecurringInfo RecurInfo = new RecurringInfo();
  * // The date that the first payment will be processed.
  * // This will be of the format mmddyyyy.
@@ -21,15 +20,14 @@
  * // capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
  * // QTER / SMYR / YEAR
  * RecurInfo.PayPeriod = "WEEK";
- * <p/>
- * <p/>
+ *
  * // Create a new Recurring Add Transaction.
  * RecurringAddTransaction Trans = new RecurringAddTransaction(
  * User, Connection, Inv, Card, RecurInfo, PayflowUtility.RequestId);
- * <p/>
+ *
  * // Submit the transaction.
  * Response Resp = Trans.SubmitTransaction();
- * <p/>
+ *
  * if (Resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -39,7 +37,7 @@
  * Console.WriteLine("RESULT = " + TrxnResponse.Result);
  * Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);
  * }
- * <p/>
+ *
  * // Get the Recurring Response parameters.
  * RecurringResponse RecurResponse = Resp.RecurringResponse;
  * if (RecurResponse != null)
@@ -48,18 +46,19 @@
  * Console.WriteLine("PROFILEID = " + RecurResponse.ProfileId);
  * }
  * }
- * <p/>
+ *
  * // Get the Context and check for any contained SDK specific errors.
  * Context Ctx = Resp.TransactionContext;
- * if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)
+ * if (Ctx != null & Ctx.getErrorCount() > 0)
  * {
  * Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());
  * }
- * <p/>
+ *
  * Console.WriteLine(Environment.NewLine + "Press Enter to Exit ...");
  * Console.ReadLine();
  * }
- * </code>
+ * }
+ * </pre>
  */
 public final class RecurringInfo extends BaseRequestDataObject {
     private String profileName;
@@ -78,7 +77,7 @@
      * Gets the profileName parameter.
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PROFILENAME
+     *  <p>Maps to Payflow Parameter: PROFILENAME</p>
      */
     public String getProfileName() {
         return profileName;
@@ -88,7 +87,7 @@
      * Sets the profileName parameter.
      *
      * @param profileName - String
-     *  <p>Maps to Payflow Parameter: PROFILENAME
+     *  <p>Maps to Payflow Parameter: PROFILENAME</p>
      */
     public void setProfileName(String profileName) {
         this.profileName = profileName;
@@ -99,7 +98,7 @@
      * <p>Beginning date for the recurring billing cycle.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: START
+     *  <p>Maps to Payflow Parameter: START</p>
      */
     public String getStart() {
         return start;
@@ -110,7 +109,7 @@
      * <p>Beginning date for the recurring billing cycle.</p>
      *
      * @param start - String
-     *  <p>Maps to Payflow Parameter: START
+     *  <p>Maps to Payflow Parameter: START</p>
      */
     public void setStart(String start) {
         this.start = start;
@@ -121,7 +120,7 @@
      * <p>Number of payments to be made over the life of the agreement.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: TERM
+     *  <p>Maps to Payflow Parameter: TERM</p>
      */
     public long getTerm() {
         return term;
@@ -132,7 +131,7 @@
      * <p>Number of payments to be made over the life of the agreement.</p>
      *
      * @param term - String
-     *  <p>Maps to Payflow Parameter: TERM
+     *  <p>Maps to Payflow Parameter: TERM</p>
      */
     public void setTerm(long term) {
         this.term = term;
@@ -143,47 +142,20 @@
      * <p>Specifies how often the payment occurs.</p>
      *
      * @return - String
-     *         <p/>
-     *         {@paypal.listtable}
-     *         {@paypal.ltr}
-     *         {@paypal.lth} Value {@paypal.elth}
-     *         {@paypal.lth} Description {@paypal.elth}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} WEEK {@paypal.eltd}
-     *         {@paypal.ltd} Weekly - Every week on the same day of the week as the first payment. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} BIWK {@paypal.eltd}
-     *         {@paypal.ltd} Every Two Weeks - Every other week on the same day of the week as the first payment. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} SMMO {@paypal.eltd}
-     *         {@paypal.ltd} Twice Every Month - The 1st and 15th of the month.Results in 24 payments per year. SMMO can start on 1st to 15th of the month, second payment 15 days later or on the last day of the month. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} FRWK {@paypal.eltd}
-     *         {@paypal.ltd} Every Four Weeks - Every 28 days from the previous payment date beginning with the first payment date. Results in 13 payments per year. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} MONT {@paypal.eltd}
-     *         {@paypal.ltd} Monthly - Every month on the same date as the first payment. Results in 12 payments per year. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} QTER {@paypal.eltd}
-     *         {@paypal.ltd} Quarterly - Every three months on the same date as the first payment. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} SMYR {@paypal.eltd}
-     *         {@paypal.ltd} Twice Every Year - Every six months on the same date as the first payment. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd} YEAR {@paypal.eltd}
-     *         {@paypal.ltd} Yearly - Every twelve months on the same date as the first payment. {@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.endlisttable}
-     *         </p>
-     *  <p>Maps to Payflow Parameter: PAYPERIOD
+     *
+     * <pre>
+     *  Value - Description
+     *  WEEK  - Weekly - Every week on the same day of the week as the first payment.
+     *  BIWK  - Every Two Weeks - Every other week on the same day of the week as the first payment.
+     *  SMMO  - Twice Every Month - The 1st and 15th of the month.Results in 24 payments per year. SMMO can start on 1st to 15th of the month, second payment 15 days later or on the last day of the month.
+     *  FRWK  - Every Four Weeks - Every 28 days from the previous payment date beginning with the first payment date. Results in 13 payments per year.
+     *  MONT  - Monthly - Every month on the same date as the first payment. Results in 12 payments per year.
+     *  QTER  - Quarterly - Every three months on the same date as the first payment.
+     *  SMYR  - Twice Every Year - Every six months on the same date as the first payment.
+     *  YEAR  - Yearly - Every twelve months on the same date as the first payment.
+     *
+     *  Maps to Payflow Parameter: PAYPERIOD
+     *  </pre>
      */
     public String getPayPeriod() {
         return payPeriod;
@@ -194,47 +166,19 @@
      * <p>Specifies how often the payment occurs.</p>
      *
      * @param payPeriod - String
-     *                  <p/>
-     *                  * {@paypal.listtable}
-     *                  {@paypal.ltr}
-     *                  {@paypal.lth} Value {@paypal.elth}
-     *                  {@paypal.lth} Description {@paypal.elth}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} WEEK {@paypal.eltd}
-     *                  {@paypal.ltd} Weekly - Every week on the same day of the week as the first payment. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} BIWK {@paypal.eltd}
-     *                  {@paypal.ltd} Every Two Weeks - Every other week on the same day of the week as the first payment. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} SMMO {@paypal.eltd}
-     *                  {@paypal.ltd} Twice Every Month - The 1st and 15th of the month.Results in 24 payments per year. SMMO can start on 1st to 15th of the month, second payment 15 days later or on the last day of the month. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} FRWK {@paypal.eltd}
-     *                  {@paypal.ltd} Every Four Weeks - Every 28 days from the previous payment date beginning with the first payment date. Results in 13 payments per year. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} MONT {@paypal.eltd}
-     *                  {@paypal.ltd} Monthly - Every month on the same date as the first payment. Results in 12 payments per year. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} QTER {@paypal.eltd}
-     *                  {@paypal.ltd} Quarterly - Every three months on the same date as the first payment. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} SMYR {@paypal.eltd}
-     *                  {@paypal.ltd} Twice Every Year - Every six months on the same date as the first payment. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.ltr}
-     *                  {@paypal.ltd} YEAR {@paypal.eltd}
-     *                  {@paypal.ltd} Yearly - Every twelve months on the same date as the first payment. {@paypal.eltd}
-     *                  {@paypal.eltr}
-     *                  {@paypal.endlisttable}
-     *                  </p>
-     *  <p>Maps to Payflow Parameter: PAYPERIOD
+     * <pre>
+     *  Value - Description
+     *  WEEK  - Weekly - Every week on the same day of the week as the first payment.
+     *  BIWK  - Every Two Weeks - Every other week on the same day of the week as the first payment.
+     *  SMMO  - Twice Every Month - The 1st and 15th of the month.Results in 24 payments per year. SMMO can start on 1st to 15th of the month, second payment 15 days later or on the last day of the month.
+     *  FRWK  - Every Four Weeks - Every 28 days from the previous payment date beginning with the first payment date. Results in 13 payments per year.
+     *  MONT  - Monthly - Every month on the same date as the first payment. Results in 12 payments per year.
+     *  QTER  - Quarterly - Every three months on the same date as the first payment.
+     *  SMYR  - Twice Every Year - Every six months on the same date as the first payment.
+     *  YEAR  - Yearly - Every twelve months on the same date as the first payment.
+     *
+     *  Maps to Payflow Parameter: PAYPERIOD
+     *  </pre>
      */
     public void setPayPeriod(String payPeriod) {
         this.payPeriod = payPeriod;
@@ -249,7 +193,7 @@
      * <p>S represents an initial fee.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: OPTIONALTRX
+     *  <p>Maps to Payflow Parameter: OPTIONALTRX</p>
      */
     public String getOptionalTrx() {
         return optionalTrx;
@@ -264,7 +208,7 @@
      * <p>S represents an initial fee.</p>
      *
      * @param optionalTrx - String
-     *  <p>Maps to Payflow Parameter: OPTIONALTRX
+     *  <p>Maps to Payflow Parameter: OPTIONALTRX</p>
      */
     public void setOptionalTrx(String optionalTrx) {
         this.optionalTrx = optionalTrx;
@@ -276,7 +220,7 @@
      * Optional when OPTIONALTRX=A ($1 Authorization by default)</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: OPTIONALTRXAMT
+     *  <p>Maps to Payflow Parameter: OPTIONALTRXAMT</p>
      */
     public Currency getOptionalTrxAmt() {
         return optionalTrxAmt;
@@ -288,7 +232,7 @@
      * Optional when OPTIONALTRX=A ($1 Authorization by default)</p>
      *
      * @param optionalTrxAmt - String
-     *  <p>Maps to Payflow Parameter: OPTIONALTRXAMT
+     *  <p>Maps to Payflow Parameter: OPTIONALTRXAMT</p>
      */
     public void setOptionalTrxAmt(Currency optionalTrxAmt) {
         this.optionalTrxAmt = optionalTrxAmt;
@@ -301,7 +245,7 @@
      * status is received.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: RETRYNUMDAYS
+     *  <p>Maps to Payflow Parameter: RETRYNUMDAYS</p>
      */
     public long getRetryNumDays() {
         return retryNumDays;
@@ -314,7 +258,7 @@
      * status is received.</p>
      *
      * @param retryNumDays - String
-     *  <p>Maps to Payflow Parameter: RETRYNUMDAYS
+     *  <p>Maps to Payflow Parameter: RETRYNUMDAYS</p>
      */
     public void setRetryNumDays(long retryNumDays) {
         this.retryNumDays = retryNumDays;
@@ -322,13 +266,13 @@
 
     /**
      * Gets the maxFailPayments parameter.
-     * <p/>
+     *  * <p>
      * * The number of payment periods (specified by
      * PAYPERIOD) for which the transaction is allowed to fail
      * before PayPal cancels a profile.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: MAXFAILPAYMENTS
+     *  <p>Maps to Payflow Parameter: MAXFAILPAYMENTS</p>
      */
     public long getMaxFailPayments() {
         return maxFailPayments;
@@ -336,13 +280,13 @@
 
     /**
      * Sets the maxFailPayments parameter.
-     * <p/>
+     *  * <p>
      * * The number of payment periods (specified by
      * PAYPERIOD) for which the transaction is allowed to fail
      * before PayPal cancels a profile.</p>
      *
      * @param maxFailPayments - String
-     *  <p>Maps to Payflow Parameter: MAXFAILPAYMENTS
+     *  <p>Maps to Payflow Parameter: MAXFAILPAYMENTS</p>
      */
     public void setMaxFailPayments(long maxFailPayments) {
         this.maxFailPayments = maxFailPayments;
@@ -356,7 +300,7 @@
      * </p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: ORIGPROFILEID
+     *  <p>Maps to Payflow Parameter: ORIGPROFILEID</p>
      */
     public String getOrigProfileId() {
         return origProfileId;
@@ -370,7 +314,7 @@
      * </p>
      *
      * @param origProfileId - String
-     *  <p>Maps to Payflow Parameter: ORIGPROFILEID
+     *  <p>Maps to Payflow Parameter: ORIGPROFILEID</p>
      */
     public void setOrigProfileId(String origProfileId) {
         this.origProfileId = origProfileId;
@@ -378,26 +322,15 @@
 
     /**
      * Gets the paymentHistory parameter.
-     * <p/>
+     *
      * Used for recurring inquiry.Allowed values are:
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth} Value {@paypal.elth}
-     * {@paypal.lth} Description {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} Y {@paypal.eltd}
-     * {@paypal.ltd} To view the full set of payment information for a profile, include the name/value pair with the Inquiry action. {@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} N {@paypal.eltd}
-     * {@paypal.ltd} To view the status of a customer's profile, submit an Inquiry action that does not include the PAYMENTHISTORY parameter (alternatively, submit PAYMENTHISTORY=N). {@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
-     * </p>
+     * Value Description
+     *
+     *   Y - To view the full set of payment information for a profile, include the name/value pair with the Inquiry action.
+     *   N - To view the status of a customer's profile, submit an Inquiry action that does not include the PAYMENTHISTORY parameter (alternatively, submit PAYMENTHISTORY=N).
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PAYMENTHISTORY
+     *  <p>Maps to Payflow Parameter: PAYMENTHISTORY</p>
      */
     public String getPaymentHistory() {
         return paymentHistory;
@@ -405,26 +338,15 @@
 
     /**
      * Sets the paymentHistory parameter.
-     * <p/>
+     *
      * Used for recurring inquiry.Allowed values are:
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth} Value {@paypal.elth}
-     * {@paypal.lth} Description {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} Y {@paypal.eltd}
-     * {@paypal.ltd} To view the full set of payment information for a profile, include the name/value pair with the Inquiry action. {@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} N {@paypal.eltd}
-     * {@paypal.ltd} To view the status of a customer's profile, submit an Inquiry action that does not include the PAYMENTHISTORY parameter (alternatively, submit PAYMENTHISTORY=N). {@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
-     * </p>
+     * Value Description
+     *
+     *   Y - To view the full set of payment information for a profile, include the name/value pair with the Inquiry action.
+     *   N - To view the status of a customer's profile, submit an Inquiry action that does not include the PAYMENTHISTORY parameter (alternatively, submit PAYMENTHISTORY=N).
      *
      * @param paymentHistory - String
-     *  <p>Maps to Payflow Parameter: PAYMENTHISTORY
+     * <p>Maps to Payflow Parameter: PAYMENTHISTORY</p>
      */
     public void setPaymentHistory(String paymentHistory) {
         this.paymentHistory = paymentHistory;
@@ -435,7 +357,7 @@
      * <p>Payment number identifying the failed payment to be retried.</p>
      *
      * @return - String
-     *  <p>Maps to Payflow Parameter: PAYMENTNUM
+     *  <p>Maps to Payflow Parameter: PAYMENTNUM</p>
      */
     public String getPaymentNum() {
         return paymentNum;
@@ -446,7 +368,7 @@
      * <p>Payment number identifying the failed payment to be retried.</p>
      *
      * @param paymentNum - String
-     *  <p>Maps to Payflow Parameter: PAYMENTNUM
+     *  <p>Maps to Payflow Parameter: PAYMENTNUM</p>
      */
     public void setPaymentNum(String paymentNum) {
         this.paymentNum = paymentNum;
Index: src/sdk/dataobjects/paypal/payflow/BaseTender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This abstract class serves as base class of all tender objects.\r\n * Each tender type is associated with a Payment Device.\r\n * Following are the Payment Devices associated with different tender types:\r\n * {@paypal.listtable}\r\n * {@paypal.ltr}\r\n * {@paypal.lth}Tender Type {@paypal.elth}\r\n * {@paypal.lth}Payment Device Data Object  {@paypal.elth}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}ACHTender {@paypal.eltd}\r\n * {@paypal.ltd}{@link BankAcct}{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} CardTender{@paypal.eltd}\r\n * {@paypal.ltd}\r\n * {@link CreditCard}\r\n * <br>\r\n * {@link PurchaseCard}\r\n * <br>\r\n * {@link SwipeCard}\r\n * {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} CheckTender {@paypal.eltd}\r\n * {@paypal.ltd} {@link CheckPayment}{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.endlisttable}\r\n */\r\npublic class BaseTender extends BaseRequestDataObject {\r\n    /**\r\n     * Holds the tender type.\r\n     */\r\n    private String tender;\r\n    /**\r\n     * Holds the associated payment device.\r\n     */\r\n    private PaymentDevice paymentDevice;\r\n    /**\r\n     * Holds Check number\r\n     */\r\n    private String chkNum;\r\n    /**\r\n     * Holds Check type\r\n     */\r\n    private String chkType;\r\n    /**\r\n     * Holds dL Type\r\n     */\r\n    private String dL;\r\n    /**\r\n     * Holds the sS Type\r\n     */\r\n    private String sS;\r\n    /**\r\n     * Holds the authType\r\n     */\r\n    private String authType;\r\n    /**\r\n     * Gets the checkNumber.\r\n     * <p/>\r\n     * For ACH - The check serial number. Required for POP, ARC, and RCK.\r\n     * For TeleCheck - Account holder's next unused (available) check number.\r\n     *\r\n     * @return chkNum String\r\n     *  </p><p> Maps to Payflow Parameter: CHKNUM</p>\r\n     */\r\n    public String getChkNum() {\r\n        return chkNum;\r\n    }\r\n\r\n    /**\r\n     * Sets the check Number.\r\n     * <p/>\r\n     * For ACH - The check serial number. Required for POP, ARC, and RCK.\r\n     * For TeleCheck - Account holder's next unused (available) check number.</p>\r\n     *\r\n     * @param chkNum String\r\n     *  <p> Maps to Payflow Parameter: CHKNUM </p>\r\n     */\r\n    public void setChkNum(String chkNum) {\r\n        this.chkNum = chkNum;\r\n    }\r\n\r\n    /**\r\n     *  Gets the Authtype.\r\n     *  <p/>\r\n     *  Allowed AuthTypes for ACH:\r\n     *  CCD (B2B), PPD (B2C), ARC (Accounts Receivables)\r\n     *  RCK (Re-presentment), WEB (Internet), TEL (Telephone, mailorder), POP (Point of Purchase)\r\n     *  <p/>\r\n     *  Allowed AuthTypes for TeleCheck:\r\n     *  I (Internet), P (Telephone, mailorder), D (Prearranged Deposits)\r\n     * @param authType String\r\n     * <p>Maps to Payflow Parameter: AUTHTYPE</p>\r\n     */\r\n    public void getAuthType(String authType) {this.authType = authType;}\r\n\r\n    /**\r\n     * Gets the check Type.\r\n     * <p/>Allowed CheckTypes are:\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth}Check Type {@paypal.elth}\r\n     * {@paypal.lth}Description  {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd}P {@paypal.eltd}\r\n     * {@paypal.ltd}Personal{@paypal.eltd}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} C{@paypal.eltd}\r\n     * {@paypal.ltd}Company{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     *\r\n     * @return chkNum String\r\n     *  </p><p> Maps to Payflow Parameter: CHKTYPE</p>\r\n     */\r\n    public String getChkType() {\r\n        return chkType;\r\n    }\r\n\r\n    /**\r\n     * sets the check type\r\n     *\r\n     * @param chkType String\r\n     *                <p/>\r\n     *                Allowed CheckTypes are:\r\n     *                {@paypal.listtable}\r\n     *                {@paypal.ltr}\r\n     *                {@paypal.lth} Check Type {@paypal.elth}\r\n     *                {@paypal.lth} Description {@paypal.elth}\r\n     *                {@paypal.eltr}\r\n     *                {@paypal.ltr}\r\n     *                {@paypal.ltd} P {@paypal.eltd}\r\n     *                {@paypal.ltd} Personal {@paypal.eltd}\r\n     *                {@paypal.eltr}\r\n     *                {@paypal.ltr}\r\n     *                {@paypal.ltd} C {@paypal.eltd}\r\n     *                {@paypal.ltd} Company {@paypal.ltd}\r\n     *                {@paypal.eltr}\r\n     *                {@paypal.endlisttable}\r\n     *                </p>\r\n     *  </p><p> Maps to Payflow Parameter: CHKTYPE</p>\r\n     */\r\n    public void setChkType(String chkType) {\r\n        this.chkType = chkType;\r\n    }\r\n\r\n    /**\r\n     * gets the drivers License Number.\r\n     *\r\n     * @return dL String\r\n     *  <p>Format: XXnnnnnnnn</p>\r\n     * <p>XX = State Code, nnnnnnnn = DL Number</p>\r\n     * <p>Maps to Payflow Parameter: DL </p>\r\n     */\r\n    public String getDL() {\r\n        return dL;\r\n    }\r\n\r\n    /**\r\n     * Gets the Tender Type.\r\n     *\r\n     * @return tender\r\n     *  <p>\r\n     * Maps to Payflow Parameter: TENDER</p>\r\n     */\r\n    public String getTender() {\r\n        return tender;\r\n    }\r\n\r\n    /**\r\n     * gets the drivers License Number.\r\n     *\r\n     * @param dL String\r\n     *  <p>Format: XXnnnnnnnn</p>\r\n     * <p>XX = State Code, nnnnnnnn = DL Number</p>\r\n     * <p>Maps to Payflow Parameter: DL </p>\r\n     */\r\n    public void setDL(String dL) {\r\n        this.dL = dL;\r\n    }\r\n\r\n    /**\r\n     * returns the account holders social security number\r\n     *\r\n     * @return sS String\r\n     *  <p>Maps to Payflow Parameter: SS </p>\r\n     */\r\n    public String getSS() {\r\n        return sS;\r\n    }\r\n\r\n    /**\r\n     * returns the account holders social security number\r\n     * <p>Maps to Payflow Parameter: SS </p>\r\n     *\r\n     * @param sS String\r\n     */\r\n    public void setSS(String sS) {\r\n        this.sS = sS;\r\n    }\r\n\r\n    /**\r\n     * returns the authorization type\r\n     * <p>Maps to Payflow Parameter: AUTHTYPE </p>\r\n     *\r\n     * @param authType String\r\n     */\r\n    public void setAuthType(String authType) {\r\n        this.authType = authType;\r\n    }\r\n\r\n    /**\r\n     * Constructor for BaseTender.\r\n     * Abstract class. Instance cannot be created directly.\r\n     *\r\n     * @param tender    String\r\n     * @param payDevice PaymentDevice\r\n     */\r\n    public BaseTender(String tender, PaymentDevice payDevice) {\r\n        this.tender = tender;\r\n        this.paymentDevice = payDevice;\r\n\r\n    }\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n        if (paymentDevice != null) {\r\n            paymentDevice.setRequestBuffer(this.getRequestBuffer());\r\n            paymentDevice.generateRequest();\r\n        }\r\n\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TENDER, tender));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CHKNUM, chkNum));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CHKTYPE, chkType));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_DL, dL));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SS, sS));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_AUTHTYPE, authType));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/BaseTender.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/BaseTender.java	(date 1600059072897)
@@ -4,30 +4,13 @@
  * This abstract class serves as base class of all tender objects.
  * Each tender type is associated with a Payment Device.
  * Following are the Payment Devices associated with different tender types:
- * {@paypal.listtable}
- * {@paypal.ltr}
- * {@paypal.lth}Tender Type {@paypal.elth}
- * {@paypal.lth}Payment Device Data Object  {@paypal.elth}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}ACHTender {@paypal.eltd}
- * {@paypal.ltd}{@link BankAcct}{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} CardTender{@paypal.eltd}
- * {@paypal.ltd}
- * {@link CreditCard}
- * <br>
- * {@link PurchaseCard}
- * <br>
- * {@link SwipeCard}
- * {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} CheckTender {@paypal.eltd}
- * {@paypal.ltd} {@link CheckPayment}{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.endlisttable}
+ *
+ * Tender Type Payment Device Data Object
+ *
+ * ACHTender - {@link BankAcct}
+ * CardTender - {@link CreditCard} {@link PurchaseCard} {@link SwipeCard}
+ * CheckTender- {@link CheckPayment}
+ *
  */
 public class BaseTender extends BaseRequestDataObject {
     /**
@@ -60,7 +43,7 @@
     private String authType;
     /**
      * Gets the checkNumber.
-     * <p/>
+     *  * <p>
      * For ACH - The check serial number. Required for POP, ARC, and RCK.
      * For TeleCheck - Account holder's next unused (available) check number.
      *
@@ -73,7 +56,7 @@
 
     /**
      * Sets the check Number.
-     * <p/>
+     *  * <p>
      * For ACH - The check serial number. Required for POP, ARC, and RCK.
      * For TeleCheck - Account holder's next unused (available) check number.</p>
      *
@@ -86,11 +69,11 @@
 
     /**
      *  Gets the Authtype.
-     *  <p/>
+     *   * <p>
      *  Allowed AuthTypes for ACH:
      *  CCD (B2B), PPD (B2C), ARC (Accounts Receivables)
      *  RCK (Re-presentment), WEB (Internet), TEL (Telephone, mailorder), POP (Point of Purchase)
-     *  <p/>
+     *   * <p>
      *  Allowed AuthTypes for TeleCheck:
      *  I (Internet), P (Telephone, mailorder), D (Prearranged Deposits)
      * @param authType String
@@ -100,20 +83,11 @@
 
     /**
      * Gets the check Type.
-     * <p/>Allowed CheckTypes are:
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth}Check Type {@paypal.elth}
-     * {@paypal.lth}Description  {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd}P {@paypal.eltd}
-     * {@paypal.ltd}Personal{@paypal.eltd}
-     * {@paypal.ltr}
-     * {@paypal.ltd} C{@paypal.eltd}
-     * {@paypal.ltd}Company{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
+     * <p>Allowed CheckTypes are:
+     * Check Type - Description
+     *
+     * P - Personal
+     * C - Company
      *
      * @return chkNum String
      *  </p><p> Maps to Payflow Parameter: CHKTYPE</p>
@@ -126,24 +100,15 @@
      * sets the check type
      *
      * @param chkType String
-     *                <p/>
-     *                Allowed CheckTypes are:
-     *                {@paypal.listtable}
-     *                {@paypal.ltr}
-     *                {@paypal.lth} Check Type {@paypal.elth}
-     *                {@paypal.lth} Description {@paypal.elth}
-     *                {@paypal.eltr}
-     *                {@paypal.ltr}
-     *                {@paypal.ltd} P {@paypal.eltd}
-     *                {@paypal.ltd} Personal {@paypal.eltd}
-     *                {@paypal.eltr}
-     *                {@paypal.ltr}
-     *                {@paypal.ltd} C {@paypal.eltd}
-     *                {@paypal.ltd} Company {@paypal.ltd}
-     *                {@paypal.eltr}
-     *                {@paypal.endlisttable}
-     *                </p>
-     *  </p><p> Maps to Payflow Parameter: CHKTYPE</p>
+     * <p>
+     * Allowed CheckTypes are:
+     *
+     * Check Type - Description
+     *
+     * P - Personal
+     * C - Company
+     * </p>
+     * <p> Maps to Payflow Parameter: CHKTYPE</p>
      */
     public void setChkType(String chkType) {
         this.chkType = chkType;
@@ -165,8 +130,8 @@
      * Gets the Tender Type.
      *
      * @return tender
-     *  <p>
-     * Maps to Payflow Parameter: TENDER</p>
+     *
+     * <p>Maps to Payflow Parameter: TENDER</p>
      */
     public String getTender() {
         return tender;
Index: src/sdk/dataobjects/paypal/payflow/PayflowConnectionData.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Payflow Host related information.\r\n * <P>This class stores the information related to connection to the\r\n * PayPal payment gateway. If the empty constructor of this class\r\n * is used to create the object, or\r\n * passed values are empty, then The following values (if empty) are looked for\r\n * as follows:\r\n * * {@paypal.listtable}\r\n * {@paypal.ltr}\r\n * {@paypal.lth}Property {@paypal.elth}\r\n * {@paypal.lth}From Internal Default {@paypal.elth}\r\n * {@paypal.lth}From SDK Properties {@paypal.elth}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} Payflow Host {@paypal.eltd}\r\n * {@paypal.ltd} NA{@paypal.eltd}\r\n * {@paypal.ltd} HostAddress{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} Payflow Port{@paypal.eltd}\r\n * {@paypal.ltd} 443 {@paypal.eltd}\r\n * {@paypal.ltd} HostPort{@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} Transaction timeout {@paypal.eltd}\r\n * {@paypal.ltd} 45 seconds {@paypal.eltd}\r\n * {@paypal.ltd} TimeOut {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd} NA {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.endlisttable}\r\n * </P>\r\n */\r\npublic final class PayflowConnectionData extends BaseRequestDataObject {\r\n\r\n    private String hostAddress;\r\n    private int hostPort;\r\n    private String proxyAddress;\r\n    private int proxyPort;\r\n    private String proxyLogon;\r\n    private String proxyPassword;\r\n    private int timeOut;\r\n\r\n    /**\r\n     * Gets HostAddress. It is PayPal's HostName\r\n     *\r\n     * @return String\r\n     */\r\n    public String getHostAddress() {\r\n        return hostAddress;\r\n    }\r\n\r\n    /**\r\n     * Gets the Host port.Port 443 is used.\r\n     *\r\n     * @return int\r\n     */\r\n    public int getHostPort() {\r\n        return hostPort;\r\n    }\r\n\r\n    /**\r\n     * Gets Proxy server address. Use the PROXY parameters for servers\r\n     * behind a firewall. Your network administrator can provide the\r\n     * values.\r\n     *\r\n     * @return String\r\n     */\r\n    public String getProxyAddress() {\r\n        return proxyAddress;\r\n    }\r\n\r\n    /**\r\n     * Gets the proxy port.\r\n     *\r\n     * @return int\r\n     */\r\n    public int getProxyPort() {\r\n        return proxyPort;\r\n    }\r\n\r\n    /**\r\n     * Gets proxy Logon.\r\n     *\r\n     * @return String\r\n     */\r\n    public String getProxyLogon() {\r\n        return proxyLogon;\r\n    }\r\n\r\n    /**\r\n     * Gets the proxy password.\r\n     *\r\n     * @return String\r\n     */\r\n    public String getProxyPassword() {\r\n        return proxyPassword;\r\n    }\r\n\r\n    /**\r\n     * Gets Time-out period for the transaction. The minimum recommended\r\n     * time-out value is 30 seconds. The client begins tracking\r\n     * from the time that it sends the transaction request to the server.\r\n     *\r\n     * @return int\r\n     */\r\n    public int getTimeOut() {\r\n        return timeOut;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     */\r\n    public PayflowConnectionData() {\r\n        this(null, 0, 0, null, 0, null, null);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param HostAddress String\r\n     */\r\n    public PayflowConnectionData(String HostAddress) {\r\n        this(HostAddress, 0, 0, null, 0, null, null);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param HostAddress String\r\n     * @param HostPort    Integer\r\n     * @param Timeout     Integer\r\n     */\r\n    public PayflowConnectionData(String HostAddress, int HostPort, int Timeout) {\r\n        this(HostAddress, HostPort, Timeout, null, 0, null, null);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param HostAddress   String\r\n     * @param HostPort      Integer\r\n     * @param TimeOut       Integer\r\n     * @param ProxyAddress  String\r\n     * @param ProxyPort     Integer\r\n     * @param ProxyLogon    String\r\n     * @param ProxyPassword String\r\n     */\r\n    public PayflowConnectionData(String HostAddress, int HostPort, int TimeOut, String ProxyAddress, int ProxyPort, String ProxyLogon, String ProxyPassword) {\r\n        if (getContext() == null) {\r\n            this.setContext(new Context());\r\n        }\r\n\r\n        hostAddress = HostAddress;\r\n        hostPort = HostPort;\r\n        timeOut = TimeOut;\r\n        proxyAddress = ProxyAddress;\r\n        proxyPort = ProxyPort;\r\n        proxyLogon = ProxyLogon;\r\n        proxyPassword = ProxyPassword;\r\n        this.initSDKProperties();\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param HostAddress String\r\n     * @param HostPort    Integer\r\n     */\r\n    public PayflowConnectionData(String HostAddress, int HostPort) {\r\n        this(HostAddress, HostPort, 0, null, 0, null, null);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param HostAddress   String\r\n     * @param HostPort      Integer\r\n     * @param ProxyAddress  String\r\n     * @param ProxyPort     Integer\r\n     * @param ProxyLogon    String\r\n     * @param ProxyPassword String\r\n     */\r\n    public PayflowConnectionData(String HostAddress, int HostPort, String ProxyAddress, int ProxyPort, String ProxyLogon, String ProxyPassword) {\r\n        this(HostAddress, HostPort, 0, ProxyAddress, ProxyPort, ProxyLogon, ProxyPassword);\r\n    }\r\n\r\n    /**\r\n     * For any value not passed in the constructor the values being set in the properties will be used.\r\n     */\r\n    private void initSDKProperties() {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowConnectionData.initSDKProperties(): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        if (timeOut == 0) {\r\n            timeOut = SDKProperties.getTimeOut();\r\n        }\r\n        if (hostPort == 0) {\r\n            hostPort = SDKProperties.getHostPort();\r\n        }\r\n        if (null == hostAddress || hostAddress.trim().length() == 0) {\r\n            hostAddress = SDKProperties.getHostAddress();\r\n            if (null == hostAddress || hostAddress.trim().length() == 0) {\r\n                String RespMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_INIT_ERROR)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_INIT_ERROR)\r\n                        + \"host Address has not been initialised. Please make sure it is being set.\";\r\n\r\n                ErrorObject error = new ErrorObject(PayflowConstants.SEVERITY_FATAL, PayflowConstants.EMPTY_STRING, RespMessage);\r\n                getContext().addError(error);\r\n            }\r\n        }\r\n\r\n        if (proxyPort == 0) {\r\n            proxyPort = SDKProperties.getProxyPort();\r\n        }\r\n        if (null == proxyAddress || proxyAddress.trim().length() == 0) {\r\n            proxyAddress = SDKProperties.getProxyAddress();\r\n            if (null == proxyAddress) {\r\n                proxyAddress = PayflowConstants.EMPTY_STRING;\r\n            }\r\n        }\r\n        if (null == proxyLogon || proxyLogon.trim().length() == 0) {\r\n            proxyLogon = SDKProperties.getProxyLogin();\r\n            if (null == proxyLogon) {\r\n                proxyLogon = PayflowConstants.EMPTY_STRING;\r\n            }\r\n        }\r\n        if (null == proxyPassword || proxyPassword.trim().length() == 0) {\r\n            proxyPassword = SDKProperties.getProxyPassword();\r\n            if (null == proxyPassword) {\r\n                proxyPassword = PayflowConstants.EMPTY_STRING;\r\n            }\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowConnectionData.initSDKProperties(): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/PayflowConnectionData.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/PayflowConnectionData.java	(date 1600059846190)
@@ -7,32 +7,12 @@
  * is used to create the object, or
  * passed values are empty, then The following values (if empty) are looked for
  * as follows:
- * * {@paypal.listtable}
- * {@paypal.ltr}
- * {@paypal.lth}Property {@paypal.elth}
- * {@paypal.lth}From Internal Default {@paypal.elth}
- * {@paypal.lth}From SDK Properties {@paypal.elth}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} Payflow Host {@paypal.eltd}
- * {@paypal.ltd} NA{@paypal.eltd}
- * {@paypal.ltd} HostAddress{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} Payflow Port{@paypal.eltd}
- * {@paypal.ltd} 443 {@paypal.eltd}
- * {@paypal.ltd} HostPort{@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} Transaction timeout {@paypal.eltd}
- * {@paypal.ltd} 45 seconds {@paypal.eltd}
- * {@paypal.ltd} TimeOut {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd} NA {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.endlisttable}
- * </P>
+ *
+ * Property From Internal Default From SDK Properties
+ * Payflow Host - NA - HostAddress
+ * Payflow Port- 443 - HostPort
+ * Transaction timeout - 45 seconds - NA
+ *
  */
 public final class PayflowConnectionData extends BaseRequestDataObject {
 
Index: src/sdk/dataobjects/paypal/payflow/UserInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n/**\r\n * Used for PayPal User account information\r\n * <p>This is a required class for a strong assembly\r\n * transactions. This class is used to store the\r\n * user credential needed to authenticate the user\r\n * performing the transaction.</p>\r\n * <p>Every transaction takes UserInfo\r\n * mandatorily.</p>\r\n * <p>Following are the required user credentials:</p>\r\n * {@paypal.listtable}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}Payflow Parameter{@paypal.eltd}\r\n * {@paypal.ltd}Description {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}USER{@paypal.eltd}\r\n * {@paypal.ltd}Login name. This value is case-sensitive.\r\n * The login name created while registering for the Payflow\r\n * account. {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}VENDOR{@paypal.eltd}\r\n * {@paypal.ltd}Login name. This value is case-sensitive.\r\n * The login name created while registering for the Payflow\r\n * account. {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}PARTNER{@paypal.eltd}\r\n * {@paypal.ltd}The authorized PayPal Reseller that\r\n * registered this account for the Payflow service\r\n * provided you with a Partner ID.\r\n * If you registered yourself, use PayPal.\r\n * Case-sensitive. {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.ltr}\r\n * {@paypal.ltd}PWD{@paypal.eltd}\r\n * {@paypal.ltd}Case-sensitive 6- to 32-character password. {@paypal.eltd}\r\n * {@paypal.eltr}\r\n * {@paypal.endlisttable}\r\n *\r\n *  ..............\r\n * // Create the User data object with the required user details.\r\n * UserInfo user = new UserInfo(\"user\", \"vendor\", \"partner\", \"password\");\r\n * ..............\r\n */\r\npublic final class UserInfo extends BaseRequestDataObject {\r\n\r\n    private String user;\r\n\r\n    private String vendor;\r\n\r\n    private String partner;\r\n\r\n    private String pwd;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param User    - String\r\n     * @param Vendor  - String\r\n     * @param Partner - String\r\n     * @param Pwd     -String\r\n     */\r\n\r\n    public UserInfo(String User, String Vendor, String Partner, String Pwd) {\r\n        user = User;\r\n        vendor = Vendor;\r\n        partner = Partner;\r\n        pwd = Pwd;\r\n\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_USER, user));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_VENDOR, vendor));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PARTNER, partner));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PWD, pwd));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/UserInfo.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/UserInfo.java	(date 1600063572791)
@@ -3,45 +3,23 @@
 
 /**
  * Used for PayPal User account information
- * <p>This is a required class for a strong assembly
- * transactions. This class is used to store the
- * user credential needed to authenticate the user
- * performing the transaction.</p>
- * <p>Every transaction takes UserInfo
- * mandatorily.</p>
- * <p>Following are the required user credentials:</p>
- * {@paypal.listtable}
- * {@paypal.ltr}
- * {@paypal.ltd}Payflow Parameter{@paypal.eltd}
- * {@paypal.ltd}Description {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}USER{@paypal.eltd}
- * {@paypal.ltd}Login name. This value is case-sensitive.
- * The login name created while registering for the Payflow
- * account. {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}VENDOR{@paypal.eltd}
- * {@paypal.ltd}Login name. This value is case-sensitive.
- * The login name created while registering for the Payflow
- * account. {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}PARTNER{@paypal.eltd}
- * {@paypal.ltd}The authorized PayPal Reseller that
- * registered this account for the Payflow service
- * provided you with a Partner ID.
- * If you registered yourself, use PayPal.
- * Case-sensitive. {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.ltr}
- * {@paypal.ltd}PWD{@paypal.eltd}
- * {@paypal.ltd}Case-sensitive 6- to 32-character password. {@paypal.eltd}
- * {@paypal.eltr}
- * {@paypal.endlisttable}
+ *
+ * This is a required class for a strong assembly  transactions. This class is used to store the
+ * user credential needed to authenticate the user performing the transaction.
+ *
+ * Following are the required user credentials:
+ *
+ * Payflow Parameter    Description
+ *
+ *      USER            User login Id.  Created in Manager.
+        VENDOR          Login name. The login name created while registering for the Payflow account.
+        PARTNER         The authorized PayPal Reseller that registered this account for the Payflow service provided you with a Partner ID.
+ *                      If you registered yourself, use PayPal.
+ *      PWD             6 to 32 character password.
+ *
+ *      All values are case-sensitive.
  *
- *  ..............
+ * ..............
  * // Create the User data object with the required user details.
  * UserInfo user = new UserInfo("user", "vendor", "partner", "password");
  * ..............
@@ -49,11 +27,8 @@
 public final class UserInfo extends BaseRequestDataObject {
 
     private String user;
-
     private String vendor;
-
     private String partner;
-
     private String pwd;
 
     /**
@@ -70,7 +45,6 @@
         vendor = Vendor;
         partner = Partner;
         pwd = Pwd;
-
     }
 
     protected void generateRequest() {
Index: src/sdk/dataobjects/paypal/payflow/ACHTender.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to create and use an ACH( Automatic Clearing House ) Tender type.\r\n * BankAcct is the Payment device associated with this tender type. {@link BankAcct}\r\n */\r\n\r\npublic final class ACHTender extends BaseTender {\r\n\r\n    /**\r\n     * ACH Auth Type\r\n     */\r\n    private String authType;\r\n    /**\r\n     * ACH Prenote (Y/N)\r\n     */\r\n    private String preNote;\r\n    /**\r\n     * ACH Term City\r\n     */\r\n    private String termCity;\r\n    /**\r\n     * ACH Term State\r\n     */\r\n    private String termState;\r\n\r\n    /**\r\n     * ACHTender should be used to perform the transactions\r\n     * in which the user provides his bank account details for\r\n     * the online payment processing.\r\n     *\r\n     * @param bankAccount String\r\n     *  Maps to Payflow Parameter: TENDER\r\n     * <p/>\r\n     * .............\r\n     * //bnkAcct is the populated BankAcct object.\r\n     * .............\r\n     * <p/>\r\n     * //Create the Tender object\r\n     * ACHTender tender = new ACHTender(bnkAcct);\r\n     */\r\n    public ACHTender(BankAcct bankAccount) {\r\n        super(PayflowConstants.TENDERTYPE_ACH, bankAccount);\r\n    }\r\n\r\n    /**\r\n     * Gets the Authtype.\r\n     * <p/>\r\n     * The type of authorization received from the payer.\r\n     * Allowed Auth Types are:\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth}AUTHTYPE {@paypal.elth}\r\n     * {@paypal.lth}Description  {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} CCD {@paypal.eltd}\r\n     * {@paypal.ltd}Default for B2B format accounts{@paypal.eltd}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} PPD {@paypal.eltd}\r\n     * {@paypal.ltd}Standard customer authorization method) for B2C format accounts.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} ARC {@paypal.eltd}\r\n     * {@paypal.ltd}Accounts Receivables check entry for a single entry debit.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} RCK {@paypal.eltd}\r\n     * {@paypal.ltd}Re-presented check entry for a single entry debit.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} WEB {@paypal.eltd}\r\n     * {@paypal.ltd}The customer authorized the payment over the Internet.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} TEL {@paypal.eltd}\r\n     * {@paypal.ltd}Debit authorization obtained by telephone.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} POP {@paypal.eltd}\r\n     * {@paypal.ltd}Point of Purchase check entry for a single entry debit.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     * </p>\r\n     *\r\n     * @return authType\r\n     *  <p> Maps to Payflow Parameter: AUTHTYPE </p>\r\n     */\r\n\r\n    public String getAuthType() {\r\n        return authType;\r\n    }\r\n\r\n    /**\r\n     * Sets the Authtype.\r\n     * <p/>\r\n     * The type of authorization received from the payer.\r\n     * Allowed Auth Types are:\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth}AUTHTYPE {@paypal.elth}\r\n     * {@paypal.lth}Description  {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} CCD {@paypal.eltd}\r\n     * {@paypal.ltd}Default for B2B format accounts{@paypal.eltd}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} PPD {@paypal.eltd}\r\n     * {@paypal.ltd}Standard customer authorization method) for B2C format accounts.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} ARC {@paypal.eltd}\r\n     * {@paypal.ltd}Accounts Receivables check entry for a single entry debit.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} RCK {@paypal.eltd}\r\n     * {@paypal.ltd}Re-presented check entry for a single entry debit.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} WEB {@paypal.eltd}\r\n     * {@paypal.ltd}The customer authorized the payment over the Internet.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} TEL {@paypal.eltd}\r\n     * {@paypal.ltd}Debit authorization obtained by telephone.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} POP {@paypal.eltd}\r\n     * {@paypal.ltd}Point of Purchase check entry for a single entry debit.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     * </p>\r\n     *\r\n     * @param authType String\r\n     *  <p> Maps to Payflow Parameter: AUTHTYPE </p>\r\n     */\r\n    public void setAuthType(String authType) {\r\n        this.authType = authType;\r\n    }\r\n\r\n    /**\r\n     * Gets the PreNote.\r\n     * <p/>\r\n     * Prenote indicates a prenotification payment with no amount.\r\n     * Used to verify bank account validity. Receiving banks are not required\r\n     * to respond to prenotification payments.\r\n     * Allowed prenote values are:\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth}PRENOTE {@paypal.elth}\r\n     * {@paypal.lth}Description  {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} N {@paypal.eltd}\r\n     * {@paypal.ltd}Default. AMT needs to be passed.{@paypal.eltd}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} Y {@paypal.eltd}\r\n     * {@paypal.ltd}Default. AMT does not need to be passed.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     * </p>\r\n     *\r\n     * @return preNote\r\n     *  <p> Maps to Payflow Parameter: PRENOTE </p>\r\n     */\r\n    public String getPreNote() {\r\n        return preNote;\r\n    }\r\n\r\n    /**\r\n     * Sets the PreNote.\r\n     * <p/>\r\n     * Prenote indicates a prenotification payment with no amount.\r\n     * Used to verify bank account validity. Receiving banks are not required\r\n     * to respond to prenotification payments.\r\n     * Allowed prenote values are:\r\n     * {@paypal.listtable}\r\n     * {@paypal.ltr}\r\n     * {@paypal.lth}PRENOTE {@paypal.elth}\r\n     * {@paypal.lth}Description  {@paypal.elth}\r\n     * {@paypal.eltr}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} N {@paypal.eltd}\r\n     * {@paypal.ltd}Default. AMT needs to be passed.{@paypal.eltd}\r\n     * {@paypal.ltr}\r\n     * {@paypal.ltd} Y {@paypal.eltd}\r\n     * {@paypal.ltd}Default. AMT does not need to be passed.{@paypal.eltd}\r\n     * {@paypal.eltr}\r\n     * {@paypal.endlisttable}\r\n     * </p>\r\n     *\r\n     * @param preNote String\r\n     *  <p> Maps to Payflow Parameter: PRENOTE </p>\r\n     */\r\n    public void setPreNote(String preNote) {\r\n        this.preNote = preNote;\r\n    }\r\n\r\n    /**\r\n     * Gets the Term City.\r\n     * <p/>\r\n     * City where the merchant's terminal is located.\r\n     * Used only for POP.</p>\r\n     *\r\n     * @return termCity\r\n     *  <p> Maps to Payflow Parameter: TERMCITY </p>\r\n     */\r\n    public String getTermCity() {\r\n        return termCity;\r\n    }\r\n\r\n    /**\r\n     * Gets the Term City.\r\n     * <p/>\r\n     * City where the merchant's terminal is located.\r\n     * Used only for POP.</p>\r\n     *\r\n     * @param termCity String\r\n     *  <p> Maps to Payflow Parameter: TERMCITY </p>\r\n     */\r\n    public void setTermCity(String termCity) {\r\n        this.termCity = termCity;\r\n    }\r\n\r\n    /**\r\n     * Gets the TermState.\r\n     * <p/>\r\n     * State where the merchant's terminal is located.\r\n     * Used only for POP.</p>\r\n     *\r\n     * @return termState\r\n     *  <p> Maps to Payflow Parameter: TERMSTATE </p>\r\n     */\r\n    public String getTermState() {\r\n        return termState;\r\n    }\r\n\r\n    /**\r\n     * Gets the TermState.\r\n     * <p/>\r\n     * State where the merchant's terminal is located.\r\n     * Used only for POP.</p>\r\n     *\r\n     * @param termState String\r\n     *  <p> Maps to Payflow Parameter: TERMSTATE </p>\r\n     */\r\n    public void setTermState(String termState) {\r\n        this.termState = termState;\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_AUTHTYPE, authType));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PRENOTE, preNote));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TERMCITY, termCity));\r\n        super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TERMSTATE, termState));\r\n    }\r\n\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ACHTender.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ACHTender.java	(date 1600056970420)
@@ -31,11 +31,11 @@
      *
      * @param bankAccount String
      *  Maps to Payflow Parameter: TENDER
-     * <p/>
+     *  * <p>
      * .............
      * //bnkAcct is the populated BankAcct object.
      * .............
-     * <p/>
+     *  * <p>
      * //Create the Tender object
      * ACHTender tender = new ACHTender(bnkAcct);
      */
@@ -45,43 +45,19 @@
 
     /**
      * Gets the Authtype.
-     * <p/>
+     *  * <p>
      * The type of authorization received from the payer.
      * Allowed Auth Types are:
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth}AUTHTYPE {@paypal.elth}
-     * {@paypal.lth}Description  {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} CCD {@paypal.eltd}
-     * {@paypal.ltd}Default for B2B format accounts{@paypal.eltd}
-     * {@paypal.ltr}
-     * {@paypal.ltd} PPD {@paypal.eltd}
-     * {@paypal.ltd}Standard customer authorization method) for B2C format accounts.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} ARC {@paypal.eltd}
-     * {@paypal.ltd}Accounts Receivables check entry for a single entry debit.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} RCK {@paypal.eltd}
-     * {@paypal.ltd}Re-presented check entry for a single entry debit.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} WEB {@paypal.eltd}
-     * {@paypal.ltd}The customer authorized the payment over the Internet.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} TEL {@paypal.eltd}
-     * {@paypal.ltd}Debit authorization obtained by telephone.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} POP {@paypal.eltd}
-     * {@paypal.ltd}Point of Purchase check entry for a single entry debit.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
-     * </p>
+     *
+     * AUTHTYPE - Description
+     *
+     * CCD - Default for B2B format accounts
+     * PPD - Standard customer authorization method) for B2C format accounts.
+     * ARC - Accounts Receivables check entry for a single entry debit.
+     * RCK - Re-presented check entry for a single entry debit.
+     * WEB - The customer authorized the payment over the Internet.
+     * TEL - Debit authorization obtained by telephone.
+     * POP - Point of Purchase check entry for a single entry debit.
      *
      * @return authType
      *  <p> Maps to Payflow Parameter: AUTHTYPE </p>
@@ -93,43 +69,19 @@
 
     /**
      * Sets the Authtype.
-     * <p/>
+     *  * <p>
      * The type of authorization received from the payer.
      * Allowed Auth Types are:
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth}AUTHTYPE {@paypal.elth}
-     * {@paypal.lth}Description  {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} CCD {@paypal.eltd}
-     * {@paypal.ltd}Default for B2B format accounts{@paypal.eltd}
-     * {@paypal.ltr}
-     * {@paypal.ltd} PPD {@paypal.eltd}
-     * {@paypal.ltd}Standard customer authorization method) for B2C format accounts.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} ARC {@paypal.eltd}
-     * {@paypal.ltd}Accounts Receivables check entry for a single entry debit.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} RCK {@paypal.eltd}
-     * {@paypal.ltd}Re-presented check entry for a single entry debit.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} WEB {@paypal.eltd}
-     * {@paypal.ltd}The customer authorized the payment over the Internet.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} TEL {@paypal.eltd}
-     * {@paypal.ltd}Debit authorization obtained by telephone.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} POP {@paypal.eltd}
-     * {@paypal.ltd}Point of Purchase check entry for a single entry debit.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
-     * </p>
+     *
+     * AUTHTYPE - Description
+     *
+     * CCD - Default for B2B format accounts
+     * PPD - Standard customer authorization method) for B2C format accounts.
+     * ARC - Accounts Receivables check entry for a single entry debit.
+     * RCK - Re-presented check entry for a single entry debit.
+     * WEB - The customer authorized the payment over the Internet.
+     * TEL - Debit authorization obtained by telephone.
+     * POP - Point of Purchase check entry for a single entry debit.
      *
      * @param authType String
      *  <p> Maps to Payflow Parameter: AUTHTYPE </p>
@@ -140,25 +92,16 @@
 
     /**
      * Gets the PreNote.
-     * <p/>
+     *  * <p>
      * Prenote indicates a prenotification payment with no amount.
      * Used to verify bank account validity. Receiving banks are not required
      * to respond to prenotification payments.
      * Allowed prenote values are:
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth}PRENOTE {@paypal.elth}
-     * {@paypal.lth}Description  {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} N {@paypal.eltd}
-     * {@paypal.ltd}Default. AMT needs to be passed.{@paypal.eltd}
-     * {@paypal.ltr}
-     * {@paypal.ltd} Y {@paypal.eltd}
-     * {@paypal.ltd}Default. AMT does not need to be passed.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
-     * </p>
+     *
+     * PRENOTE  - Description
+     *
+     * N Default. AMT needs to be passed.
+     * Y Default. AMT does not need to be passed.
      *
      * @return preNote
      *  <p> Maps to Payflow Parameter: PRENOTE </p>
@@ -169,25 +112,16 @@
 
     /**
      * Sets the PreNote.
-     * <p/>
+     *  * <p>
      * Prenote indicates a prenotification payment with no amount.
      * Used to verify bank account validity. Receiving banks are not required
      * to respond to prenotification payments.
      * Allowed prenote values are:
-     * {@paypal.listtable}
-     * {@paypal.ltr}
-     * {@paypal.lth}PRENOTE {@paypal.elth}
-     * {@paypal.lth}Description  {@paypal.elth}
-     * {@paypal.eltr}
-     * {@paypal.ltr}
-     * {@paypal.ltd} N {@paypal.eltd}
-     * {@paypal.ltd}Default. AMT needs to be passed.{@paypal.eltd}
-     * {@paypal.ltr}
-     * {@paypal.ltd} Y {@paypal.eltd}
-     * {@paypal.ltd}Default. AMT does not need to be passed.{@paypal.eltd}
-     * {@paypal.eltr}
-     * {@paypal.endlisttable}
-     * </p>
+     *
+     * PRENOTE  - Description
+     *
+     * N Default. AMT needs to be passed.
+     * Y Default. AMT does not need to be passed.
      *
      * @param preNote String
      *  <p> Maps to Payflow Parameter: PRENOTE </p>
@@ -198,8 +132,7 @@
 
     /**
      * Gets the Term City.
-     * <p/>
-     * City where the merchant's terminal is located.
+     * <p>City where the merchant's terminal is located.
      * Used only for POP.</p>
      *
      * @return termCity
@@ -211,8 +144,7 @@
 
     /**
      * Gets the Term City.
-     * <p/>
-     * City where the merchant's terminal is located.
+     * <p>City where the merchant's terminal is located.
      * Used only for POP.</p>
      *
      * @param termCity String
@@ -224,8 +156,7 @@
 
     /**
      * Gets the TermState.
-     * <p/>
-     * State where the merchant's terminal is located.
+     * <p>State where the merchant's terminal is located.
      * Used only for POP.</p>
      *
      * @return termState
@@ -237,8 +168,7 @@
 
     /**
      * Gets the TermState.
-     * <p/>
-     * State where the merchant's terminal is located.
+     * <p> State where the merchant's terminal is located.
      * Used only for POP.</p>
      *
      * @param termState String
Index: src/sdk/base/paypal/payflow/PayflowAPI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n\r\nimport org.xml.sax.SAXException;\r\n\r\nimport java.io.IOException;\r\nimport java.util.ArrayList;\r\n\r\n/**\r\n * PayflowAPI is used to submit a Name-value pair or XMLPay request to\r\n * PayPal payment gateway for online payment processing. The response\r\n * returned is the string value of the response from the PayPal payment\r\n * gateway.\r\n *\r\n *  // Create an instantce of PayflowAPI.\r\n * PayflowAPI pa = new PayflowAPI();\r\n * <p/>\r\n * //Sample Request.\r\n * // Please replace <user>, <vendor>, <password> & <partner> with your merchant information.\r\n * String request = \"TRXTYPE=S&ACCT=5100000000000008&EXPDATE=0109&TENDER=C&INVNUM=INV12345&PONUM=PO12345&STREET=123 Main St.&ZIP=12345&AMT=12.25&USER=[user]&VENDOR=[vendor]&PARTNER=[partner]&PWD=[password]\";\r\n * // RequestId is a unique string that is required for each & every transaction.\r\n * // The merchant can use her/his own algorithm to generate this unique request id or\r\n * // use the SDK provided API to generate this as shown below (PayflowAPI.generateRequestId).\r\n * String requestId = pa.generateRequestId();\r\n * String response = pa.submitTransaction(request,requestId);\r\n * <p/>\r\n * // Following lines of code are optional.\r\n * // Begin optional code for displaying SDK errors ...\r\n * // It is used to read any errors that might have occured in the SDK.\r\n * // Get the transaction errors.\r\n * <p/>\r\n * String transErrors = pa.getTransactionContext().toString();\r\n * if (transErrors != null && transErrors.length()> 0)\r\n * {\r\n * System.out.println(\"Transaction Errors from SDK = \\n\" + transErrors);\r\n * }\r\n * .........................\r\n */\r\npublic class PayflowAPI {\r\n\r\n    /**\r\n     * Host Address\r\n     */\r\n    private String mHostAddress;\r\n\r\n    /**\r\n     * Host Port\r\n     */\r\n    private int mHostPort;\r\n\r\n    /**\r\n     * Timeout\r\n     */\r\n    private int mTimeout;\r\n\r\n    /**\r\n     * Proxy Address\r\n     */\r\n    private String mProxyAddress;\r\n\r\n    /**\r\n     * Proxy Port\r\n     */\r\n    private int mProxyPort;\r\n\r\n    /**\r\n     * Proxy Logon\r\n     */\r\n    private String mProxyLogon;\r\n\r\n    /**\r\n     * Proxy Password\r\n     */\r\n    private String mProxyPassword;\r\n\r\n    /**\r\n     * Request id\r\n     */\r\n    private String mRequestId;\r\n\r\n    /**\r\n     * Transaction Context\r\n     */\r\n    private Context mTransactionContext;\r\n\r\n    /**\r\n     * Transaction Request\r\n     */\r\n    private String mTransactionRequest;\r\n\r\n    /**\r\n     * Transaction Response\r\n     */\r\n    private String mTransactionResponse;\r\n\r\n\r\n    /**\r\n     * Flag for xml pay request\r\n     */\r\n    private boolean mIsXmlPayRequest = false;\r\n\r\n    /**\r\n     * Client information.\r\n     */\r\n    private ClientInfo mClientInfo;\r\n    /**\r\n     * Flag for Strong Assembly Transaction;\r\n     */\r\n    public boolean isStrongAssemblyTransaction = false;\r\n\r\n    /**\r\n     * Default Constructor.\r\n     * All the values will be picked up from the SDkProperties ,if specified.\r\n     * If this is not specified then the default values will be used.\r\n     */\r\n\r\n    public PayflowAPI() {\r\n        this(null, 0, 0, null, 0, null, null);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI() : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI() : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * @param hostAddress   String\r\n     * @param hostPort      int\r\n     * @param timeout       int\r\n     * @param proxyAddress  String\r\n     * @param proxyPort     int\r\n     * @param proxyLogon    String\r\n     * @param proxyPassword String\r\n     */\r\n    public PayflowAPI(String hostAddress, int hostPort, int timeout, String proxyAddress, int proxyPort, String proxyLogon, String proxyPassword) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int,int,String,int,String,String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        mTransactionContext = new Context();\r\n        setParameters(hostAddress, hostPort, timeout, proxyAddress, proxyPort, proxyLogon, proxyPassword);\r\n\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int,int,String,int,String,String,String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * @param hostAddress String\r\n     * @param hostPort    String\r\n     */\r\n    public PayflowAPI(String hostAddress, int hostPort) {\r\n        this(hostAddress, hostPort, 0, null, 0, null, null);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * @param hostAddress   String\r\n     * @param hostPort      int\r\n     * @param proxyAddress  String\r\n     * @param proxyPort     int\r\n     * @param proxyLogon    String\r\n     * @param proxyPassword String\r\n     */\r\n    public PayflowAPI(String hostAddress, int hostPort, String proxyAddress, int proxyPort, String proxyLogon, String proxyPassword) {\r\n        this(hostAddress, hostPort, 0, proxyAddress, proxyPort, proxyLogon, proxyPassword);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int,String,int,String,String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int,String,int,String,String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * @param hostAddress String\r\n     * @param hostPort    int\r\n     * @param timeout     int\r\n     */\r\n    public PayflowAPI(String hostAddress, int hostPort, int timeout) {\r\n        this(hostAddress, hostPort, timeout, null, 0, null, null);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int,int) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String,int,intg) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * @param hostAddress String\r\n     */\r\n    public PayflowAPI(String hostAddress) {\r\n        this(hostAddress, 0, 0, null, 0, null, null);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.PayflowAPI(String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Returns the RequestId passed to the gateway.\r\n     *\r\n     * @return requestId String\r\n     */\r\n    public String getRequestId() {\r\n        return mRequestId;\r\n    }\r\n\r\n    /**\r\n     * Returns the Transaction Context.This will have the errors generated during the transaction.\r\n     *\r\n     * @return transactionContext Context\r\n     */\r\n    public Context getTransactionContext() {\r\n        return mTransactionContext;\r\n    }\r\n\r\n    /**\r\n     * Returns the response string for a Transaction.\r\n     *\r\n     * @return transactionResponse String\r\n     */\r\n    public String getTransactionResponse() {\r\n        return mTransactionResponse;\r\n    }\r\n\r\n    /**\r\n     * Returns the request string for a Transaction.\r\n     *\r\n     * @return transactionRequest String\r\n     */\r\n    public String getTransactionRequest() {\r\n        return mTransactionRequest;\r\n    }\r\n\r\n\r\n    /**\r\n     * Returns the version for the client.\r\n     *\r\n     * @return version String\r\n     */\r\n    public String getVersion() {\r\n        return PayflowConstants.CLIENT_TYPE + PayflowConstants.CLIENT_VERSION;\r\n    }\r\n\r\n    /**\r\n     * @return isXmlpayRequest boolean\r\n     */\r\n    protected boolean getIsXmlPayRequest() {\r\n        return mIsXmlPayRequest;\r\n    }\r\n\r\n    /**\r\n     * @param value boolean\r\n     */\r\n    protected void setIsXmlPayRequest(boolean value) {\r\n        mIsXmlPayRequest = value;\r\n    }\r\n\r\n    /**\r\n     * Returns the ClientInfo contained by the class.\r\n     *\r\n     * @return clientInfo ClientInfo\r\n     */\r\n    public ClientInfo getClientInfo() {\r\n        return mClientInfo;\r\n    }\r\n\r\n    /**\r\n     * Sets the ClientInfo Object.\r\n     *\r\n     * @param value ClientInfo\r\n     */\r\n    public void setClientInfo(ClientInfo value) {\r\n        mClientInfo = value;\r\n    }\r\n\r\n    /**\r\n     * if any parameter has not already been set, set it to the appropriate values.\r\n     *\r\n     * @param hostAddress   String\r\n     * @param hostPort      Integer\r\n     * @param timeout       Integer\r\n     * @param proxyAddress  String\r\n     * @param proxyPort     Integer\r\n     * @param proxyLogon    String\r\n     * @param proxyPassword String\r\n     */\r\n    private void setParameters(String hostAddress, int hostPort, int timeout, String proxyAddress, int proxyPort, String proxyLogon, String proxyPassword) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.setParameters(String,int,int,String,int,String,String,String): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        mTransactionContext.clearErrors();\r\n\r\n        if (hostAddress != null) {\r\n            mHostAddress = hostAddress.trim();\r\n        }\r\n        mHostPort = hostPort;\r\n        mTimeout = timeout;\r\n         if (proxyAddress != null) {\r\n            mProxyAddress = proxyAddress.trim();\r\n        }\r\n        mProxyPort = proxyPort;\r\n                  if (proxyLogon != null) {\r\n            mProxyLogon = proxyLogon.trim();\r\n        }\r\n\r\n        if (proxyPassword != null) {\r\n            mProxyPassword = proxyPassword.trim();\r\n        }\r\n\r\n        initSDKProperties();\r\n\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.setParameters(String,int,int,String,int,String,String,String): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n\r\n    }\r\n\r\n    /**\r\n     * Submits a transaction to Payflow Server.\r\n     * PayflowAPI is used to submit a Name-value pair or XMLPay request to\r\n     * PayPal payment gateway for online payment processing. The response\r\n     * returned is the string value of the response from the PayPal payment\r\n     * gateway.\r\n     *\r\n     * @param paramList String\r\n     * @param requestId String\r\n     * @return response String\r\n     */\r\n    public String submitTransaction(String paramList, String requestId) {\r\n        if (!isStrongAssemblyTransaction) {\r\n            Logger.getInstance().log(\"########### BEGIN TRANSACTION request id : \" + requestId + \" ###########\", PayflowConstants.SEVERITY_INFO);\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.submitTransaction(String,String): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n\r\n        String retVal = null;\r\n        mRequestId = requestId;\r\n        //masked Transaction Requests will be used for logging\r\n        mTransactionRequest = PayflowUtility.maskSensitiveFields(paramList);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.submitTransaction(String,String): Host \" + mHostAddress, PayflowConstants.SEVERITY_DEBUG);\r\n        try {\r\n            checkTransactionArgs(paramList, requestId);\r\n            //Logger.getInstance().log(\"paypal.payflow.PayflowAPI.submitTransaction(String,String): parmList \" + paramList, PayflowConstants.SEVERITY_DEBUG);\r\n            mTransactionContext.setLoadLoggerErrs(true);\r\n            ArrayList errors = PayflowUtility.alignContext(mTransactionContext, getIsXmlPayRequest());\r\n            mTransactionContext.setLoadLoggerErrs(false);\r\n            mTransactionContext.clearErrors();\r\n            mTransactionContext.addErrors(errors);\r\n            //Logger.getInstance().log(\"submitTransaction()START\", PayflowConstants.SEVERITY_DEBUG);\r\n            if (mTransactionContext.getHighestErrorLvl() == PayflowConstants.SEVERITY_FATAL) {\r\n                ArrayList errorList = mTransactionContext.getErrors(PayflowConstants.SEVERITY_FATAL);\r\n                ErrorObject firstFatalError = (ErrorObject) errorList.get(0);\r\n                retVal = firstFatalError.toString();\r\n                //mTransactionRequest = PayflowUtility.maskSensitiveFields(ParamList);\r\n                mTransactionResponse = retVal;\r\n            } else {\r\n                PaymentStateMachine mPaymentStateMachine = PaymentStateMachine.getInstance();\r\n                if (mClientInfo == null) {\r\n                    mClientInfo = new ClientInfo();\r\n                }\r\n                mClientInfo.setClientVersion(PayflowConstants.CLIENT_VERSION);\r\n                mClientInfo.setClientType(PayflowConstants.CLIENT_TYPE);\r\n                if (isStrongAssemblyTransaction) {\r\n                    mClientInfo.setPayflowAssembly(PayflowConstants.STRONG_ASSEMBLY);\r\n                } else {\r\n                    mClientInfo.setPayflowAssembly(PayflowConstants.WEAK_ASSEMBLY);\r\n                }\r\n                mPaymentStateMachine.initializeContext(mHostAddress, mHostPort, mTimeout, mProxyAddress, mProxyPort, mProxyLogon, mProxyPassword, mClientInfo);\r\n\r\n                //Initialize transaction\r\n                mPaymentStateMachine.initTrans(paramList, requestId);\r\n                if (PayflowUtility.isTimedOut(mPaymentStateMachine.getTimeout(), mPaymentStateMachine.getStartTime())) {\r\n                    String addlMessage = \"Input timeout in millsec = \" + mPaymentStateMachine.getTimeout();\r\n                    ErrorObject err = PayflowUtility.populateCommError(PayflowConstants.E_TIMEOUT_WAIT_RESP, null, PayflowConstants.SEVERITY_FATAL,\r\n                            mPaymentStateMachine.getIsXmlPayRequest(), addlMessage);\r\n                    if (!mPaymentStateMachine.getPsmContext().isCommunicationErrorContained(err)) {\r\n                        mPaymentStateMachine.getPsmContext().addError(err);\r\n                    }\r\n                }\r\n                //End Payflow Timeout Check Point 1\r\n\r\n                //Begin Toggle through states\r\n                while (mPaymentStateMachine.getInProgress()) {\r\n                    mPaymentStateMachine.execute();\r\n                }\r\n                //End Toggle through states\r\n\r\n                mTransactionResponse = mPaymentStateMachine.getResponse();\r\n                retVal = mTransactionResponse;\r\n                mClientInfo = mPaymentStateMachine.getClientInfo();\r\n                mRequestId = mPaymentStateMachine.getRequestId();\r\n                mTransactionContext.addErrors(mPaymentStateMachine.getPsmContext().getErrors());\r\n                ArrayList errList = PayflowUtility.alignContext(mTransactionContext, getIsXmlPayRequest());\r\n                mTransactionContext.setLoadLoggerErrs(false);\r\n                mTransactionContext.clearErrors();\r\n                mTransactionContext.addErrors(errList);\r\n            }\r\n        } catch (Exception ex) {\r\n            retVal = ex.toString();\r\n        } finally {\r\n            Logger.getInstance().log(\"paypal.payflow.PayflowAPI.SubmitTransaction(String,String): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n        }\r\n        if (!isStrongAssemblyTransaction) {\r\n            Logger.getInstance().log(\"########### END TRANSACTION request id : \" + requestId + \"###########\", PayflowConstants.SEVERITY_INFO);\r\n        }\r\n\r\n        // added debug logging statements for SDK errors, ie negative errors.\r\n        // 08/23/07 tsieber\r\n        // If there is some error due to which the return is called even before mPaymentStateMachine.initTrans object is\r\n        // created.  Check the first fatal error in context and put its response value to string.\r\n        //if (retVal != null && retVal.length() > 0) {\r\n        //    retVal = PayflowUtility.maskSensitiveFields(retVal);\r\n        // }\r\n        //Log the context\r\n        if (mTransactionContext.isErrorContained()) {\r\n            mTransactionContext.logErrors();\r\n        }\r\n        return retVal;\r\n    }\r\n\r\n    /**\r\n     * For any value not passed in the constructor the values being set in the properties will\r\n     * be used.\r\n     */\r\n    private void initSDKProperties() {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.initSDKProperties(): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        if (mTimeout == 0) {\r\n            mTimeout = SDKProperties.getTimeOut() * 1000;\r\n        } else {\r\n            mTimeout = mTimeout * 1000;\r\n        }\r\n        if (mHostPort == 0) {\r\n            mHostPort = SDKProperties.getHostPort();\r\n        }\r\n        if (null == mHostAddress || mHostAddress.trim().length() == 0) {\r\n            mHostAddress = SDKProperties.getHostAddress();\r\n            if (null == mHostAddress || mHostAddress.trim().length() == 0) {\r\n                String RespMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_INIT_ERROR)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_INIT_ERROR)\r\n                        + \"host Address has not been initialised. Please make sure it is being set.\";\r\n\r\n                ErrorObject error = new ErrorObject(PayflowConstants.SEVERITY_FATAL, PayflowConstants.EMPTY_STRING, RespMessage);\r\n                mTransactionContext.addError(error);\r\n            }\r\n            Logger.getInstance().log(\"paypal.payflow.PayflowAPI.initSDKProperties(): host set: \" + mHostAddress, PayflowConstants.SEVERITY_DEBUG);\r\n        }\r\n        if (mProxyPort == 0) {\r\n            mProxyPort = SDKProperties.getProxyPort();\r\n        }\r\n        if (null == mProxyAddress || mProxyAddress.trim().length() == 0) {\r\n            mProxyAddress = SDKProperties.getProxyAddress();\r\n            if (null == mProxyAddress) {\r\n                mProxyAddress = PayflowConstants.EMPTY_STRING;\r\n            }\r\n        }\r\n        if (null == mProxyLogon || mProxyLogon.trim().length() == 0) {\r\n            mProxyLogon = SDKProperties.getProxyLogin();\r\n            if (null == mProxyLogon) {\r\n                mProxyLogon = PayflowConstants.EMPTY_STRING;\r\n            }\r\n        }\r\n        if (null == mProxyPassword || mProxyPassword.trim().length() == 0) {\r\n            mProxyPassword = SDKProperties.getProxyPassword();\r\n            if (null == mProxyPassword) {\r\n                mProxyPassword = PayflowConstants.EMPTY_STRING;\r\n            }\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.initSDKProperties(): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Checks the vital transaction arguments\r\n     * for null or empty and populates context\r\n     * accordingly.\r\n     *\r\n     * @param paramList String\r\n     * @param requestId String\r\n     */\r\n    private void checkTransactionArgs(String paramList, String requestId) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.CheckTransactionArgs(String, String): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        try {\r\n            Context tempContext = null;\r\n            if (paramList == null || paramList.trim().length() == 0) {\r\n                //Logger.getInstance().log(\"paypal.payflow.PayflowAPI.CheckTransactionArgs(String, String): 1.\", PayflowConstants.SEVERITY_DEBUG);\r\n                String respMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_EMPTY_PARAM_LIST)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_EMPTY_PARAM_LIST);\r\n                ErrorObject error = new ErrorObject(PayflowConstants.SEVERITY_FATAL, PayflowConstants.EMPTY_STRING, respMessage);\r\n                tempContext.addError(error);\r\n            } else {\r\n                //Logger.getInstance().log(\"paypal.payflow.PayflowAPI.CheckTransactionArgs(String, String): 2.\", PayflowConstants.SEVERITY_DEBUG);\r\n                //Check for XmlPay 1.0\r\n                //We are not supporting Xml Pay 1.0\r\n                int index = paramList.trim().indexOf(PayflowConstants.XML_ID);\r\n                if (index >= 0) {\r\n                    String version;\r\n                    version = PayflowUtility.getXmlAttribute(paramList, PayflowConstants.XML_PARAM_VERSION);\r\n\r\n                    if (version != null && version.trim().length() > 0) {\r\n                        mIsXmlPayRequest = true;\r\n                        if (\"1.0\".equals(version)) {\r\n                            String addlMessage = \", Input XMLPay Request Version = \" + version;\r\n                            String[] errParams = new String[]{(String) PayflowConstants.CommErrorCodes.get(\"E_VERSION_NOT_SUPPORTED\"), PayflowConstants.CommErrorMessages.get(\"E_VERSION_NOT_SUPPORTED\") + addlMessage};\r\n                            ErrorObject error = new ErrorObject(PayflowConstants.SEVERITY_FATAL, PayflowConstants.MSG_COMMUNICATION_ERROR_XMLPAY_NO_RESPONSE_ID, errParams);\r\n                            tempContext.addError(error);\r\n                        }\r\n                    }\r\n                } else {\r\n                    if (!isStrongAssemblyTransaction) {\r\n                        ParameterListValidator.validate(paramList, false, mTransactionContext);\r\n                    }\r\n                }\r\n            }\r\n            if (requestId == null || requestId.trim().length() == 0) {\r\n                String respMessage = PayflowConstants.PARAM_RESULT\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorCodes.get(PayflowConstants.E_MISSING_REQUEST_ID)\r\n                        + PayflowConstants.DELIMITER_NVP\r\n                        + PayflowConstants.PARAM_RESPMSG\r\n                        + PayflowConstants.SEPARATOR_NVP\r\n                        + PayflowConstants.CommErrorMessages.get(PayflowConstants.E_MISSING_REQUEST_ID);\r\n\r\n                ErrorObject error = new ErrorObject(PayflowConstants.SEVERITY_FATAL, PayflowConstants.EMPTY_STRING, respMessage);\r\n                tempContext.addError(error);\r\n            }\r\n        } catch (SAXException exp) {\r\n            String addlMessage;\r\n            setIsXmlPayRequest(true);\r\n            addlMessage = \"Error while parsing the xml request.\";\r\n            ErrorObject Error = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, exp, PayflowConstants.SEVERITY_FATAL, getIsXmlPayRequest(), addlMessage);\r\n            mTransactionContext.addError(Error);\r\n        } catch (IOException exp) {\r\n            String addlMessage;\r\n            setIsXmlPayRequest(true);\r\n            addlMessage = \"Error while parsing the xml request.\";\r\n            ErrorObject error = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, exp, PayflowConstants.SEVERITY_FATAL, getIsXmlPayRequest(), addlMessage);\r\n            mTransactionContext.addError(error);\r\n        } catch (Exception exp) {\r\n            String addlMessage;\r\n            setIsXmlPayRequest(false);\r\n            addlMessage = \"Error while parsing NVP request.\";\r\n            ErrorObject error = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, exp, PayflowConstants.SEVERITY_FATAL, getIsXmlPayRequest(), addlMessage);\r\n            mTransactionContext.addError(error);\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.CheckTransactionArgs(String, String): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * This function has been out in place to support generation of requestID from the COM Wrapper.\r\n     *\r\n     * @return requestId String\r\n     */\r\n    public String generateRequestId() {\r\n        /*This is required\r\n         because a static function cannot be called from COM Wrapper and PayflowUtility is a static class and has\r\n         a private constructor.\r\n         */\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.generateRequestId() : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.generateRequestId() : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n        return PayflowUtility.getRequestId();\r\n    }\r\n\r\n    /**\r\n     * Removes a Transaction header\r\n     *\r\n     * @param headerName String\r\n     */\r\n    public void removeTransHeader(String headerName) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.removeTransHeader(String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        removeHeader(headerName);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.removeTransHeader(String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Removes a header\r\n     *\r\n     * @param headerName String\r\n     */\r\n    private void removeHeader(String headerName) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.removeHeader(String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        if (mClientInfo != null) {\r\n            if (mClientInfo.getClientInfoHash().containsKey(headerName)) {\r\n                mClientInfo.getClientInfoHash().remove(headerName);\r\n            }\r\n\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.removeHeader(String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Adds a header to the transaction\r\n     *\r\n     * @param headerName  String\r\n     * @param headerValue String\r\n     */\r\n    public void addHeader(String headerName, String headerValue) {\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.addHeader(String,String) : Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        if (mClientInfo == null) {\r\n            mClientInfo = new ClientInfo();\r\n        }\r\n\r\n        mClientInfo.addHeaderToHash(headerName, headerValue);\r\n        Logger.getInstance().log(\"paypal.payflow.PayflowAPI.addHeader(String,String) : Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/base/paypal/payflow/PayflowAPI.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/base/paypal/payflow/PayflowAPI.java	(date 1600061882823)
@@ -13,29 +13,31 @@
  * returned is the string value of the response from the PayPal payment
  * gateway.
  *
- *  // Create an instantce of PayflowAPI.
+ * <pre>{@code
+ *  // Create an instance of PayflowAPI.
  * PayflowAPI pa = new PayflowAPI();
- * <p/>
  * //Sample Request.
- * // Please replace <user>, <vendor>, <password> & <partner> with your merchant information.
+ * // Please replace <user>, <vendor>, <password> & <partner>with your merchant information.
  * String request = "TRXTYPE=S&ACCT=5100000000000008&EXPDATE=0109&TENDER=C&INVNUM=INV12345&PONUM=PO12345&STREET=123 Main St.&ZIP=12345&AMT=12.25&USER=[user]&VENDOR=[vendor]&PARTNER=[partner]&PWD=[password]";
- * // RequestId is a unique string that is required for each & every transaction.
+ * // RequestId is a unique string that is required for each and every transaction.
  * // The merchant can use her/his own algorithm to generate this unique request id or
  * // use the SDK provided API to generate this as shown below (PayflowAPI.generateRequestId).
  * String requestId = pa.generateRequestId();
  * String response = pa.submitTransaction(request,requestId);
- * <p/>
+ * * <p>
  * // Following lines of code are optional.
  * // Begin optional code for displaying SDK errors ...
- * // It is used to read any errors that might have occured in the SDK.
+ * // It is used to read any errors that might have occurred in the SDK.
  * // Get the transaction errors.
- * <p/>
+ *  * <p>
  * String transErrors = pa.getTransactionContext().toString();
- * if (transErrors != null && transErrors.length()> 0)
+ * if (transErrors != null & transErrors.length() > 0)
  * {
  * System.out.println("Transaction Errors from SDK = \n" + transErrors);
  * }
  * .........................
+ * }
+ * </pre>
  */
 public class PayflowAPI {
 
Index: src/sdk/dataobjects/paypal/payflow/PayLaterLineItem.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class holds the PayPal Pay Later Promotional related information.\r\n * <p>A promotion code for PayPal Promotional Financing where n is a value from 0 to 9.\r\n * The first promotion must be specified as L_PROMOCODE0. Combine promotions by\r\n * using additonal parameters, such as L_PROMOCODE1 and L_PROMOCODE2.</p>\r\n * <p>Following example shows how to use the Pay Later Promo Code.</p>\r\n *\r\n *  .................\r\n * // setPayLaterLineItem is the PayLaterLineItem object.\r\n * .................\r\n * <p/>\r\n * // Create new Promo Code or Codes.  You can combine up to 10 promotions.\r\n * // First promo code, L_PROMOCODE0\r\n * PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();\r\n * setPayLaterLineItem.setpromoCode(\"101\");\r\n * setPayLater.PayLaterAddLineItem(setPayLaterLineItem);\r\n * // Additional promo code (if needed), L_PROMOCODE1.  All addtional codes created in\r\n * // this manner.\r\n * PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();\r\n * setPayLaterLineItem1.setpromoCode(\"102\");\r\n * setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);\r\n * <p/>\r\n * ..................\r\n */\r\n\r\npublic final class PayLaterLineItem extends BaseRequestDataObject {\r\n\r\n    private String promoCode;\r\n\r\n    /**\r\n     * Gets the Promo Code.\r\n     *\r\n     * @return promoCode\r\n     *  <p>Maps to Payflow Parameter: L_PROMOCODEn</p>\r\n     */\r\n    public String getpromoCode() {\r\n        return promoCode;\r\n    }\r\n\r\n    /**\r\n     * Sets the Line item number.\r\n     * <p/>\r\n     * A promotion code for PayPal Promotional Financing.\r\n     *\r\n     * @param promoCode String\r\n     *  <p>Maps to Payflow Parameter: L_PROMOCODEn</p>\r\n     */\r\n    public void setpromoCode(String promoCode) {\r\n        this.promoCode = promoCode;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * <p>A promotion code for PayPal Promotional Financing where n is a value from 0 to 9.\r\n     * The first promotion must be specified as L_PROMOCODE0. Combine promotions by\r\n     * using additonal parameters, such as L_PROMOCODE1 and L_PROMOCODE2.</p>\r\n     * <p>Following example shows how to use the Pay Later Promo Code.</p>\r\n     *\r\n     *  .................\r\n     * // setPayLaterLineItem is the PayLaterLineItem object.\r\n     * .................\r\n     * <p/>\r\n     * // Create new Promo Code or Codes.  You can combine up to 10 promotions.\r\n     * // First promo code, L_PROMOCODE0\r\n     * PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();\r\n     * setPayLaterLineItem.setpromoCode(\"101\");\r\n     * setPayLater.PayLaterAddLineItem(setPayLaterLineItem);\r\n     * // Additional promo code (if needed), L_PROMOCODE1.  All addtional codes created in\r\n     * // this manner.\r\n     * PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();\r\n     * setPayLaterLineItem1.setpromoCode(\"102\");\r\n     * setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);\r\n     * <p/>\r\n     * ..................\r\n     */\r\n    public PayLaterLineItem() {\r\n    }\r\n\r\n    protected void generateRequest(int Index) {\r\n\r\n        try {\r\n            String IndexVal = String.valueOf(Index);\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PROMOCODE + IndexVal, promoCode));\r\n        }\r\n        catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() != null) {\r\n                getContext().addError(err);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/PayLaterLineItem.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/PayLaterLineItem.java	(date 1600056996089)
@@ -10,7 +10,7 @@
  *  .................
  * // setPayLaterLineItem is the PayLaterLineItem object.
  * .................
- * <p/>
+ *  * <p>
  * // Create new Promo Code or Codes.  You can combine up to 10 promotions.
  * // First promo code, L_PROMOCODE0
  * PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();
@@ -21,7 +21,7 @@
  * PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();
  * setPayLaterLineItem1.setpromoCode("102");
  * setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);
- * <p/>
+ *  * <p>
  * ..................
  */
 
@@ -41,7 +41,7 @@
 
     /**
      * Sets the Line item number.
-     * <p/>
+     *  * <p>
      * A promotion code for PayPal Promotional Financing.
      *
      * @param promoCode String
@@ -61,7 +61,7 @@
      *  .................
      * // setPayLaterLineItem is the PayLaterLineItem object.
      * .................
-     * <p/>
+     *  * <p>
      * // Create new Promo Code or Codes.  You can combine up to 10 promotions.
      * // First promo code, L_PROMOCODE0
      * PayLaterLineItem setPayLaterLineItem = new PayLaterLineItem();
@@ -72,7 +72,7 @@
      * PayLaterLineItem setPayLaterLineItem1 = new PayLaterLineItem();
      * setPayLaterLineItem1.setpromoCode("102");
      * setPayLater.PayLaterAddLineItem(setPayLaterLineItem1);
-     * <p/>
+     *  * <p>
      * ..................
      */
     public PayLaterLineItem() {
Index: src/sdk/dataobjects/paypal/payflow/ECGetBARequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for ExpressCheckout with Billing Agreement (Reference Transaction) without Purchase GET operation.\r\n * {@link ECSetBARequest}\r\n * {@link ECDoBARequest}\r\n */\r\n\r\npublic class ECGetBARequest extends ECGetRequest {\r\n    /**\r\n     * Constructor for ECGetBARequest\r\n     *\r\n     * @param Token String\r\n     *              <p/>\r\n     *              <p/>\r\n     *              ECGetBARequest is used to set the data required for a Express Checkout GET operation\r\n     *              with Billing Agreement (Reference Transaction) without Purchase.\r\n     *              </p>\r\n     *  .............\r\n     * <p/>\r\n     * Create the ECGetBARequest object\r\n     * ECGetBARequest getEC = new ECGetBARequest(\"[tokenid]\");\r\n     * <p/>\r\n     * .............\r\n     */\r\n\r\n    public ECGetBARequest(String Token) {\r\n        super(Token, PayflowConstants.PARAM_ACTION_GETBA);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/ECGetBARequest.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/ECGetBARequest.java	(date 1600056998207)
@@ -11,16 +11,15 @@
      * Constructor for ECGetBARequest
      *
      * @param Token String
-     *              <p/>
-     *              <p/>
+     *               * <p>
      *              ECGetBARequest is used to set the data required for a Express Checkout GET operation
      *              with Billing Agreement (Reference Transaction) without Purchase.
      *              </p>
      *  .............
-     * <p/>
+     *  * <p>
      * Create the ECGetBARequest object
      * ECGetBARequest getEC = new ECGetBARequest("[tokenid]");
-     * <p/>
+     *  * <p>
      * .............
      */
 
Index: ../dotNET/PFProSDK/src/PayPal/Payments/DataObjects/Devices.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#region \"Imports\"\r\n\r\nusing System;\r\nusing PayPal.Payments.Common.Utility;\r\nusing PayPal.Payments.Common.Exceptions;\r\n\r\n#endregion\r\n\r\nnamespace PayPal.Payments.DataObjects\r\n{\r\n\r\n    public sealed class Devices : BaseRequestDataObject\r\n    {\r\n        #region \"Member Variables\"\r\n\r\n\t\t/// <summary>\r\n\t\t/// Type of Terminal\r\n\t\t/// </summary>\r\n\t\tprivate String mCatType;\r\n\r\n\t\t/// <summary>\r\n\t\t/// Card Input Capability\r\n\t\t/// </summary>\r\n\t\tprivate String mContactless;\r\n\r\n\t\t#endregion\r\n\r\n\t\t#region \"Properties\"\r\n\r\n\t\t/// <summary>\r\n\t\t/// Gets, Sets Terminal type\r\n\t\t/// </summary>\r\n\t\t/// <remarks>\r\n\t\t/// <para>Maps to Payflow Parameter:</para>\r\n\t\t/// <code>CATTYPE</code>\r\n\t\t/// </remarks>\r\n\t\tpublic String CatType\r\n\t\t{\r\n            get { return mCatType; }\r\n            set { mCatType = value; }\r\n        }\r\n\r\n\t\t/// <summary>\r\n\t\t/// Gets, Sets Card Input Capability\r\n\t\t/// </summary>\r\n\t\t/// <remarks>\r\n\t\t/// <para>Maps to Payflow Parameter:</para>\r\n\t\t/// <code>CONTACTLESS</code>\r\n\t\t/// </remarks>\r\n\t\tpublic String Contactless\r\n\t\t{\r\n            get { return mContactless; }\r\n            set { mContactless = value; }\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\r\n\t\t#region \"Constructors\"\r\n\r\n\t\t/// <summary>\r\n\t\t/// Constructor\r\n\t\t/// </summary>\r\n\t\t/// <remarks>Items that reflect what type of device; either terminal or card is used or presented.</remarks>\r\n\t\t/// <example>\r\n\t\t/// <para>Following example shows how to use Devices.</para>\r\n\t\t/// <code lang=\"C#\" escaped=\"false\">\r\n\t\t///  .................\r\n\t\t///  //Inv is the Invoice object.\r\n\t\t///  .................\r\n\t\t/// // Create a new Devices object.\r\n\t\t///\tDevices UsedDevices = new Devices();\r\n\t\t///\tUsedDevices.CatType = \"3\";\r\n\t\t///\tUsedDevices.Contactless = \"RFD\";\r\n\t\t///\tInv.Devices = UsedDevices;\r\n\t\t///\t.................\r\n\t\t/// </code>\r\n\t\t/// <code lang=\"Visual Basic\" escaped=\"false\">\r\n\t\t/// .................\r\n\t\t/// 'Inv is the Invoice object.\r\n\t\t/// .................\r\n        /// ' Set the device/card capabilities\r\n        /// Dim UsedDevices As Devices = New Devices\r\n        /// UsedDevices.CatType = \"3\"\r\n        /// UsedDevices.Contactless = \"RFD\"\r\n        /// Inv.Devices = UsedDevices\r\n\t\t///\t.................\r\n\t\t/// </code>\r\n\t\t/// </example>\r\n\t\tpublic Devices()\r\n\t\t{\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\r\n\t\t#region \"Core functions\"\r\n\r\n\t\t/// <summary>\r\n\t\t/// Generates the transaction request.\r\n\t\t/// </summary>\r\n\t\tinternal override void GenerateRequest()\r\n\t\t{\r\n\t\t\ttry\r\n\t\t\t{\r\n\t\t\t\tRequestBuffer.Append(PayflowUtility.AppendToRequest(PayflowConstants.PARAM_CATTYPE, mCatType));\r\n\t\t\t\tRequestBuffer.Append(PayflowUtility.AppendToRequest(PayflowConstants.PARAM_CONTACTLESS, mContactless));\r\n\t\t\r\n\t\t\t}\r\n\t\t\tcatch (BaseException)\r\n\t\t\t{\r\n\t\t\t\tthrow;\r\n\t\t\t}\r\n\t\t\tcatch (Exception Ex)\r\n\t\t\t{\r\n\t\t\t\tDataObjectException DEx = new DataObjectException(Ex);\r\n\t\t\t\tthrow DEx;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t#endregion\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../dotNET/PFProSDK/src/PayPal/Payments/DataObjects/Devices.cs	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ ../dotNET/PFProSDK/src/PayPal/Payments/DataObjects/Devices.cs	(date 1600049433746)
@@ -7,7 +7,36 @@
 #endregion
 
 namespace PayPal.Payments.DataObjects
-{
+{	
+		/// <summary>
+		/// Constructor
+		/// </summary>
+		/// <remarks>Items that reflect what type of device; either terminal or card is used or presented.</remarks>
+		/// <example>
+		/// <para>Following example shows how to use Devices.</para>
+		/// <code lang="C#" escaped="false">
+		///  .................
+		///  //Inv is the Invoice object.
+		///  .................
+		/// // Create a new Devices object.
+		///	Devices UsedDevices = new Devices();
+		///	UsedDevices.CatType = "3";
+		///	UsedDevices.Contactless = "RFD";
+		///	Inv.Devices = UsedDevices;
+		///	.................
+		/// </code>
+		/// <code lang="Visual Basic" escaped="false">
+		/// .................
+		/// 'Inv is the Invoice object.
+		/// .................
+        /// ' Set the device/card capabilities
+        /// Dim UsedDevices As Devices = New Devices
+        /// UsedDevices.CatType = "3"
+        /// UsedDevices.Contactless = "RFD"
+        /// Inv.Devices = UsedDevices
+		///	.................
+		/// </code>
+		/// </example>
 
     public sealed class Devices : BaseRequestDataObject
     {
Index: src/sdk/dataobjects/paypal/payflow/AdviceDetail.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class holds the advice detail related information.\r\n * Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.\r\n * For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,\r\n * <p>Following example shows how to use advice detail.</p>\r\n * <p>\r\n * .................\r\n * //inv is the Invoice object.\r\n * .................\r\n * // Create a advice detail item.\r\n * AdviceDetail addDetail1 = new AdviceDetail();\r\n * addDetail1.setAddLAmt(\"1\");\r\n * addDetail1.setAddLAmtType(\"1\");\r\n * inv.addAdviceDetailItem(addDetail1);Advuc\r\n * AdviceDetail addDetail2 = new AdviceDetail();\r\n * addDetail2.setAddLAmt(\"2\");\r\n * addDetail2.setAddLAmtType(\"2\");\r\n * inv.addAdviceDetailItem(addDetail2);\r\n * ..................\r\n */\r\n\r\npublic class AdviceDetail extends BaseRequestDataObject {\r\n\r\n    private String adviceDetailNumber;\r\n    private String addLAmt;\r\n    private String addLAmtType;\r\n\r\n    /**\r\n     * Gets the advice detail amount\r\n     *\r\n     * @return addLAmt\r\n     * <p>Maps to Payflow Parameter: ADDLAMT</p>\r\n     */\r\n    public String getAddLAmt() {\r\n        return addLAmt;\r\n    }\r\n\r\n    /**\r\n     * Sets the advice detail amount\r\n     *\r\n     * @param addLAmt String\r\n     * <p>Maps to Payflow Parameter: ADDLAMT</p>\r\n     */\r\n    public void setAddLAmt(String addLAmt) {\r\n        this.addLAmt= addLAmt;\r\n    }\r\n\r\n    /**\r\n     * Gets the advice detail amount type\r\n     *\r\n     * @return addLAmtType\r\n     * <p>Maps to Payflow Parameter: ADDLAMTTYPE</p>\r\n     */\r\n    public String getAddLAmtType() {\r\n        return addLAmtType;\r\n    }\r\n    /**\r\n     * Sets the advice detail amount type\r\n     *\r\n     * @param addLAmtType String\r\n     * <p>Maps to Payflow Parameter: ADDLAMTTYPE/p>\r\n     */\r\n    public void setAddLAmtType(String addLAmtType) {\r\n        this.addLAmtType = addLAmtType;\r\n    }\r\n\r\n    /// --------------------------------------------\r\n    /**\r\n     * Gets the advice detail number.\r\n     *\r\n     * @return advice detail number.\r\n     * <p>Maps to Payflow Parameter: ADDLXXXXXn</p>\r\n     */\r\n    public String getAdviceDetailNumber() {\r\n        return adviceDetailNumber;\r\n    }\r\n\r\n    /**\r\n     * Sets the advice detail number.\r\n     *\r\n     * @param adviceDetailNumber String\r\n     * <p>Maps to Payflow Parameter: ADDLXXXXXn</p>\r\n     */\r\n    public void setAdviceDetailNumber(String adviceDetailNumber) {\r\n        this.adviceDetailNumber = adviceDetailNumber;\r\n    }\r\n\r\n    protected void generateRequest(int Index) {\r\n\r\n        try {\r\n            String IndexVal = String.valueOf(Index+1);  // adding +1 as range is 1 to 5.\r\n\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ADDLAMT + IndexVal, addLAmt));\r\n            super.getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ADDLAMTTYPE+ IndexVal, addLAmtType));\r\n\r\n        }\r\n        catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() != null) {\r\n                getContext().addError(err);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/AdviceDetail.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/AdviceDetail.java	(date 1600057986111)
@@ -60,7 +60,7 @@
      * Sets the advice detail amount type
      *
      * @param addLAmtType String
-     * <p>Maps to Payflow Parameter: ADDLAMTTYPE/p>
+     * <p>Maps to Payflow Parameter: ADDLAMTTYPE</p>
      */
     public void setAddLAmtType(String addLAmtType) {
         this.addLAmtType = addLAmtType;
Index: ../dotNET/PFProSDK/ndoc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../dotNET/PFProSDK/ndoc.xml	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ ../dotNET/PFProSDK/ndoc.xml	(date 1600051817339)
@@ -3133,6 +3133,151 @@
             Payflow Param CCUPDATED
             </summary>
         </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_RRN">
+            <summary>
+            Payflow Param RRN
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_STAN">
+            <summary>
+            Payflow Param STAN
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ACI">
+            <summary>
+            Payflow Param ACI
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VALIDATIONCODE">
+            <summary>
+            Payflow Param VALIDATIONCODE
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTLOCATIONID">
+            <summary>
+            Payflow Param MERCHANTLOCATIONID
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTID">
+            <summary>
+            Payflow Param MERCHANTID
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTCONTACTINFO">
+            <summary>
+            Payflow Param MERCHANTCONTACTINFO
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CCTRANSID">
+            <summary>
+            Payflow Param CCTRANSID
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CCTRANS_POSDATA">
+            <summary>
+            Payflow Param CCTRANS_POSDATA
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_AUTHDATE">
+            <summary>
+            Payflow Param AUTHDATE
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTURL">
+            <summary>
+            Payflow Param MERCHANTURL
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTVATNUM">
+            <summary>
+            Payflow Param MERCHANTVATNUM
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MERCHANTINVNUM">
+            <summary>
+            Payflow Param MERCHANTINVNUM
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VATINVNUM">
+            <summary>
+            Payflow Param VATINVNUM
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_VATTAXRATE">
+            <summary>
+            Payflow Param VATTAXRATE
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_REPORTGROUP">
+            <summary>
+            Payflow Param REPORTGROUP
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_ALTTAXAMT">
+            <summary>
+            Payflow Param L_ALTTAXAMT
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_ALTTAXID">
+            <summary>
+            Payflow Param L_ALTTAXID
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_ALTTAXRATE">
+            <summary>
+            Payflow Param L_ALTTAXRATE
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_CARRIERSERVICELEVELCODE">
+            <summary>
+            Payflow Param L_CARRIERSERVICELEVELCODE
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_L_EXTAMT">
+            <summary>
+            Payflow Param L_EXTAMT
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ADDLAMT">
+            <summary>
+            Payflow Param LADDLAMT
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_ADDLAMTTYPE">
+            <summary>
+            Payflow Param ADDLAMTTYPE
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CATTYPE">
+            <summary>
+            Payflow Param CATTYPE
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CONTACTLESS">
+            <summary>
+            Payflow Param CONTACTLESS
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTDATA">
+            <summary>
+            Payflow Param CUSTDATA
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTOMERID">
+            <summary>
+            Payflow Param CUSTOMERID
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_CUSTOMERNUMBER">
+            <summary>
+            Payflow Param CUSTOMERNUMBER
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.PARAM_MISCDATA">
+            <summary>
+            Payflow Param MISCDATA
+            </summary>
+        </member>
         <member name="F:PayPal.Payments.Common.Utility.PayflowConstants.MAGTEK_PARAM_ENCMP">
             <summary>
             Magtek Param ENCMP
@@ -5047,7 +5192,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	If(CurrnetPaymentState.IsXmlPayRequest)
+            	If(CurrentPaymentState.IsXmlPayRequest)
             	{
             		Console.WriteLine("Request Type = XML Pay request")
             	}
@@ -5121,7 +5266,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	if(CurrnetPaymentState.HaveRequestId)
+            	if(CurrentPaymentState.HaveRequestId)
             	{
             		Console.WriteLine("RequestId obtained.");
             	}
@@ -5135,7 +5280,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	If(CurrnetPaymentState.HaveRequestId)
+            	If(CurrentPaymentState.HaveRequestId)
             	{
             		Console.WriteLine("RequestId obtained.")
             	}
@@ -5194,7 +5339,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	if(CurrnetPaymentState.InProgress)
+            	if(CurrentPaymentState.InProgress)
             	{
             		Console.WriteLine("Transaction in progress.");
             	}
@@ -5208,7 +5353,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	If(CurrnetPaymentState.InProgress)
+            	If(CurrentPaymentState.InProgress)
             	{
             		Console.WriteLine("Transaction in progress.")
             	}
@@ -5232,7 +5377,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	if(CurrnetPaymentState.Success)
+            	if(CurrentPaymentState.Success)
             	{
             		Console.WriteLine("Current state succeeds.");
             	}
@@ -5246,7 +5391,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	If(CurrnetPaymentState.Success)
+            	If(CurrentPaymentState.Success)
             	{
             		Console.WriteLine("Current state succeeds.")
             	}
@@ -5270,7 +5415,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	if(CurrnetPaymentState.Failed)
+            	if(CurrentPaymentState.Failed)
             	{
             		Console.WriteLine("Current state fails.");
             	}
@@ -5284,7 +5429,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	If(CurrnetPaymentState.Failed)
+            	If(CurrentPaymentState.Failed)
             	{
             		Console.WriteLine("Current state fails.")
             	}
@@ -5308,7 +5453,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	if(CurrnetPaymentState.HasExecuted)
+            	if(CurrentPaymentState.HasExecuted)
             	{
             		Console.WriteLine("Current State has finished execution.");
             	}
@@ -5322,7 +5467,7 @@
             	// CurrentPaymentState is the
             	// PaymentState object.
             	
-            	If(CurrnetPaymentState.HasExecuted)
+            	If(CurrentPaymentState.HasExecuted)
             	{
             		Console.WriteLine("Current State has finished execution.")
             	}
@@ -7716,34 +7861,19 @@
             Holds ReqName
             </summary>
         </member>
-        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mMerchantName">
+        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustData">
             <summary>
-            Holds MerchantName
+            Holds Customer Data
             </summary>
         </member>
-        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mMerchantStreet">
+        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustomerId">
             <summary>
-            Holds MerchantStreet
+            Holds Customer Id
             </summary>
         </member>
-        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mMerchantCity">
+        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mCustomerNumber">
             <summary>
-            Holds MerchantCity
-            </summary>
-        </member>
-        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mMerchantState">
-            <summary>
-            Holds MerchantState
-            </summary>
-        </member>
-        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mMerchantCountryCode">
-            <summary>
-            Holds MerchantCountryCode
-            </summary>
-        </member>
-        <member name="F:PayPal.Payments.DataObjects.CustomerInfo.mMerchantZip">
-            <summary>
-            Holds MerchantZip
+            Holds Customer Number
             </summary>
         </member>
         <member name="M:PayPal.Payments.DataObjects.CustomerInfo.#ctor">
@@ -7860,68 +7990,130 @@
             <code>CUSTID</code>
             </remarks>
         </member>
-        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.MerchantName">
+        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustData">
             <summary>
-            Gets, Sets  MerchantName.
+            Gets, Sets Customer Data
             </summary>
             <remarks>
-            <para>Name of Merchant</para>
+            <para>Requester Name.</para>
             <para>Maps to Payflow Parameter:</para>
-            <code>MERCHANTNAME</code>
+            <code>CUSTDATAE</code>
             </remarks>
         </member>
-        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.MerchantStreet">
+        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustomerId">
             <summary>
-            Gets, Sets  MerchantStreet.
+            Gets, Sets Customer identification.
             </summary>
             <remarks>
-            <para>Merchant's Stree Address (Number and Street Name)</para>
             <para>Maps to Payflow Parameter:</para>
-            <code>MERCHANTSTREET</code>
+            <code>CUSTOMERID</code>
             </remarks>
         </member>
-        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.MerchantCity">
+        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.CustomerNumber">
             <summary>
-            Gets, Sets  MerchantCity.
+            Gets, Sets Customer Number.
             </summary>
             <remarks>
-            <para>Merchant's City</para>
             <para>Maps to Payflow Parameter:</para>
-            <code>MERCHANTCITY</code>
+            <code>CUSTOMERNUMBER</code>
             </remarks>
         </member>
-        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.MerchantState">
+        <member name="M:PayPal.Payments.DataObjects.CustomerInfo.GenerateRequest">
+            <summary>
+            Generates the transaction request.
+            </summary>
+        </member>
+        <member name="T:PayPal.Payments.DataObjects.Devices">
             <summary>
-            Gets, Sets  MerchantState.
+            Constructor
+            </summary>
+            <remarks>Items that reflect what type of device; either terminal or card is used or presented.</remarks>
+            <example>
+            <para>Following example shows how to use Devices.</para>
+            <code lang="C#" escaped="false">
+             .................
+             //Inv is the Invoice object.
+             .................
+            // Create a new Devices object.
+            Devices UsedDevices = new Devices();
+            UsedDevices.CatType = "3";
+            UsedDevices.Contactless = "RFD";
+            Inv.Devices = UsedDevices;
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+            .................
+            'Inv is the Invoice object.
+            .................
+            ' Set the device/card capabilities
+            Dim UsedDevices As Devices = New Devices
+            UsedDevices.CatType = "3"
+            UsedDevices.Contactless = "RFD"
+            Inv.Devices = UsedDevices
+            .................
+            </code>
+            </example>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.Devices.mCatType">
+            <summary>
+            Type of Terminal
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.Devices.mContactless">
+            <summary>
+            Card Input Capability
+            </summary>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.Devices.CatType">
+            <summary>
+            Gets, Sets Terminal type
             </summary>
             <remarks>
-            <para>Merchant's State</para>
             <para>Maps to Payflow Parameter:</para>
-            <code>MERCHANTSTATE</code>
+            <code>CATTYPE</code>
             </remarks>
         </member>
-        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.MerchantCountryCode">
+        <member name="P:PayPal.Payments.DataObjects.Devices.Contactless">
             <summary>
-            Gets, Sets  MerchantCountryCode.
+            Gets, Sets Card Input Capability
             </summary>
             <remarks>
-            <para>Merchant's Numeric Country Code.  Example: USA = 840</para>
             <para>Maps to Payflow Parameter:</para>
-            <code>MERCHANTCOUNTRYCODE</code>
+            <code>CONTACTLESS</code>
             </remarks>
         </member>
-        <member name="P:PayPal.Payments.DataObjects.CustomerInfo.MerchantZip">
+        <member name="M:PayPal.Payments.DataObjects.Devices.#ctor">
             <summary>
-            Gets, Sets  MerchantZip.
+            Constructor
             </summary>
-            <remarks>
-            <para>Merchant's 5- to 9-digit ZIP (postal) code excluding
-            spaces, dashes, and non-numeric characters.</para>
-            <para>Maps to Payflow Parameter:</para>
-            <code>MERCHANTZIP</code>
-            </remarks>
+            <remarks>Items that reflect what type of device; either terminal or card is used or presented.</remarks>
+            <example>
+            <para>Following example shows how to use Devices.</para>
+            <code lang="C#" escaped="false">
+             .................
+             //Inv is the Invoice object.
+             .................
+            // Create a new Devices object.
+            Devices UsedDevices = new Devices();
+            UsedDevices.CatType = "3";
+            UsedDevices.Contactless = "RFD";
+            Inv.Devices = UsedDevices;
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+            .................
+            'Inv is the Invoice object.
+            .................
+            ' Set the device/card capabilities
+            Dim UsedDevices As Devices = New Devices
+            UsedDevices.CatType = "3"
+            UsedDevices.Contactless = "RFD"
+            Inv.Devices = UsedDevices
+            .................
+            </code>
+            </example>
         </member>
-        <member name="M:PayPal.Payments.DataObjects.CustomerInfo.GenerateRequest">
+        <member name="M:PayPal.Payments.DataObjects.Devices.GenerateRequest">
             <summary>
             Generates the transaction request.
             </summary>
@@ -10005,24 +10197,44 @@
             RecurringType
             </summary>
         </member>
-        <member name="F:PayPal.Payments.DataObjects.Invoice.mMerchDescr">
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mOrderId">
             <summary>
-            Merchant Description
+            Order Id
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mEchoData">
+            <summary>
+            Echo data
             </summary>
         </member>
-        <member name="F:PayPal.Payments.DataObjects.Invoice.mMerchSvc">
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mVatInvNum">
             <summary>
-            Merchant Telephone
+            VAT Invoice Number
             </summary>
         </member>
-        <member name="F:PayPal.Payments.DataObjects.Invoice.mOrderId">
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mVatTaxRate">
             <summary>
-            Order Id
+            VAT Tax Rate
             </summary>
         </member>
-        <member name="F:PayPal.Payments.DataObjects.Invoice.mEchoData">
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mReportGroup">
             <summary>
-            Echo data
+            Report Group
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mAdviceDetailList">
+            <summary>
+            AdviceDetailList
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mDevices">
+            <summary>
+            Devices
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.Invoice.mMiscData">
+            <summary>
+            Miscellaneous Data
             </summary>
         </member>
         <member name="M:PayPal.Payments.DataObjects.Invoice.#ctor">
@@ -10763,26 +10975,6 @@
             <code>RECURRINGTYPE</code>
             </remarks>
         </member>
-        <member name="P:PayPal.Payments.DataObjects.Invoice.MerchDescr">
-            <summary>
-            Gets, Sets  MerchDescr
-            </summary>
-            <remarks>
-            <para>Merchant's description.</para>
-            <para>Maps to Payflow Parameter:</para>
-            <code>MERCHDESCR</code>
-            </remarks>
-        </member>
-        <member name="P:PayPal.Payments.DataObjects.Invoice.MerchSvc">
-            <summary>
-            Gets, Sets  MerchSvc
-            </summary>
-            <remarks>
-            <para>Merchant's contact number.</para>
-            <para>Maps to Payflow Parameter:</para>
-            <code>MERCHSVC</code>
-            </remarks>
-        </member>
         <member name="P:PayPal.Payments.DataObjects.Invoice.OrderId">
             <summary>
             Gets, Sets  OrderId
@@ -10815,6 +11007,161 @@
             <para>Maps to Payflow Parameter:</para>
             <code>ECHODATA</code>
             </remarks>
+        </member>
+        <!-- Badly formed XML comment ignored for member "P:PayPal.Payments.DataObjects.Invoice.VatInvNum" -->
+        <member name="P:PayPal.Payments.DataObjects.Invoice.VatTaxRate">
+            <summary>
+            Gets, Sets  VAT Tax Rate.
+            </summary>
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>VATTAXRATE</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.Invoice.ReportGroup">
+            <summary>
+            Gets, Sets  Report Group.
+            </summary>
+            <remarks>
+            <para>Category that the transaction is in, for example: coffee mugs.</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>REPORTGROUP</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.Invoice.Devices">
+            <summary>
+            Gets, Sets Devices.
+            </summary>
+            <remarks>
+            <para>
+            Items that reflect what type of device; either termainal or card is used or presented.
+            </para>
+            </remarks>
+            <example>
+            <code lang="C#" escaped="false">
+            .................
+            // Inv is the Invoice object
+            .................
+            // Create a new Devices object.
+            Devices UsedDevices = new Devices();
+            UsedDevices.CatType = "3";
+            UsedDevices.Contactless = "RFD";
+            Inv.Devices = UsedDevices;
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+            .................
+            ' Inv is the Invoice object
+            .................
+            ' Set the device/card capabilities
+            Dim UsedDevices As Devices = New Devices
+            UsedDevices.CatType = "3"
+            UsedDevices.Contactless = "RFD"
+            Inv.Devices = UsedDevices
+            .................
+            </code>
+            </example>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.Invoice.MiscData">
+            <summary>
+            Gets, Sets  Miscellaneous Data.
+            </summary>
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>MISCDATA</code>
+            </remarks>
+        </member>
+        <member name="M:PayPal.Payments.DataObjects.Invoice.AddAdviceDetailItem(PayPal.Payments.DataObjects.AdviceDetail)">
+            <summary>
+            Used for advice detail items.
+            </summary>
+            <remarks>
+            This class holds the advice detail related information.
+            Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.
+            For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,
+            </remarks>
+            <example>
+            <para>Following example shows how to use AdviceDetail.</para>
+            <code lang="C#" escaped="false">
+             .................
+             //Inv is the Invoice object.
+             .................
+            // Set the Advice Detail items.
+            AdviceDetail AddDetail1 = new AdviceDetail();
+            AddDetail1.AddLAmt = "1";
+            AddDetail1.AddLAmtType = "1";
+            Inv.AddAdviceDetailItem(AddDetail1);
+            // To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+             .................
+             'Inv is the Invoice object.
+             .................
+             ' Set the Advice Detail items.
+             Dim AddDetail1 As AdviceDetail = New AdviceDetail
+             AddDetail1.AddLAmt = "1"
+             AddDetail1.AddLAmtType = "1"
+             Inv.AddAdviceDetailItem(AddDetail1)
+             ' To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
+            .................
+            </code>
+            </example>
+        </member>
+        <member name="M:PayPal.Payments.DataObjects.Invoice.RemoveAdviceDetailItem(System.Int32)">
+            <summary>
+            Removes a advice detail item from line item list.
+            </summary>
+            <param name="Index">Index of line item to be removed.</param>
+            <remarks>
+            <para>Use this method to remove an advice detail item at a particular 
+            index in the purchase order.</para>
+            </remarks>
+            <example>
+            <code lang="C#" escaped="false">
+            .................
+            // Inv is the Invoice object
+            .................
+            // Remove item at index 0
+            Inv.RemoveAdviceDetailItem(0);
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+            .................
+            ' Inv is the Invoice object
+            .................
+            ' Remove item at index 0;
+            Inv.RemoveAdviceDetailItem(0)
+            .................
+            </code>
+            </example>
+        </member>
+        <member name="M:PayPal.Payments.DataObjects.Invoice.RemoveAllAdviceDetailItems">
+            <summary>
+            Clears the advice detail item list.
+            </summary>
+            <remarks>
+            <para>Use this method to clear all the 
+            advice detail items added to the purchase order.</para>
+            </remarks>
+            <example>
+            <code lang="C#" escaped="false">
+            .................
+            // Inv is the Invoice object
+            .................
+            // Remove all advice detail items.
+            Inv.RemoveAllAdviceDetailItems();
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+            .................
+            ' Inv is the Invoice object
+            .................
+            ' Remove all advice detail items.
+            Inv.RemoveAllAdviceDetailItems()
+            .................
+            </code>
+            </example>
         </member>
         <member name="M:PayPal.Payments.DataObjects.Invoice.AddLineItem(PayPal.Payments.DataObjects.LineItem)">
             <summary>
@@ -10910,6 +11257,11 @@
             Generates transaction request for line items
             </summary>
         </member>
+        <member name="M:PayPal.Payments.DataObjects.Invoice.GenerateAdviceDetailRequest">
+            <summary>
+            Generates transaction request for advice detail items
+            </summary>
+        </member>
         <member name="M:PayPal.Payments.DataObjects.Invoice.GenerateRequest">
             <summary>
             Generates the transaction request.
@@ -10943,6 +11295,130 @@
             <remarks>When implemented in the derived class, this method 
             should be preferred to be made as an internal method.</remarks>
         </member>
+        <member name="T:PayPal.Payments.DataObjects.AdviceDetail">
+            <summary>
+            Used for advice detail items.
+            </summary>
+            <remarks>
+            This class holds the advice detail related information.
+            Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.
+            For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,
+            </remarks>
+            <example>
+            <para>Following example shows how to use AdviceDetail.</para>
+            <code lang="C#" escaped="false">
+             .................
+             //Inv is the Invoice object.
+             .................
+            // Set the Advice Detail items.
+            AdviceDetail AddDetail1 = new AdviceDetail();
+            AddDetail1.AddLAmt = "1";
+            AddDetail1.AddLAmtType = "1";
+            Inv.AddAdviceDetailItem(AddDetail1);
+            // To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+             .................
+             'Inv is the Invoice object.
+             .................
+             ' Set the Advice Detail items.
+             Dim AddDetail1 As AdviceDetail = New AdviceDetail
+             AddDetail1.AddLAmt = "1"
+             AddDetail1.AddLAmtType = "1"
+             Inv.AddAdviceDetailItem(AddDetail1)
+             ' To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
+            .................
+            </code>
+            </example>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.AdviceDetail.mAdviceDetailNumber">
+            <summary>
+            Advice Detail Number
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.AdviceDetail.mAddLAmt">
+            <summary>
+            Advice Detail Amount
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.AdviceDetail.mAddLAmtType">
+            <summary>
+            Advice Detail Amount Type
+            </summary>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmt">
+            <summary>
+            Gets, Sets advice detail amount
+            </summary>
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>ADDLAMTn</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmtType">
+            <summary>
+            Gets, Sets advice detail amount type
+            </summary>
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>ADDLAMTTYPEn</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.AdviceDetail.AdviceDetailNumber">
+            ------------------------------------------------------
+            <summary>
+            Gets, Sets advice detail line item number.
+            </summary>
+            <remarks>
+            <para></para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>ADDLxxxxn</code>
+            </remarks>
+        </member>
+        <member name="M:PayPal.Payments.DataObjects.AdviceDetail.#ctor">
+            <summary>
+            Used for advice detail items.
+            </summary>
+            <remarks>
+            This class holds the advice detail related information.
+            Detail of a charge where *n* is a value from 1 - 5. Use for additional breakdown of the amount.
+            For example ADDLAMT1=1 is the amount for the additional amount for advice detail item 1 and is equal to 1,
+            </remarks>
+            <example>
+            <para>Following example shows how to use AdviceDetail.</para>
+            <code lang="C#" escaped="false">
+             .................
+             //Inv is the Invoice object.
+             .................
+            // Set the Advice Detail items.
+            AdviceDetail AddDetail1 = new AdviceDetail();
+            AddDetail1.AddLAmt = "1";
+            AddDetail1.AddLAmtType = "1";
+            Inv.AddAdviceDetailItem(AddDetail1);
+            // To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
+            .................
+            </code>
+            <code lang="Visual Basic" escaped="false">
+             .................
+             'Inv is the Invoice object.
+             .................
+             ' Set the Advice Detail items.
+             Dim AddDetail1 As AdviceDetail = New AdviceDetail
+             AddDetail1.AddLAmt = "1"
+             AddDetail1.AddLAmtType = "1"
+             Inv.AddAdviceDetailItem(AddDetail1)
+             ' To add another item, just do the same as above but increment the value of AddDetail to 2: AddDetail2
+            .................
+            </code>
+            </example>
+        </member>
+        <member name="M:PayPal.Payments.DataObjects.AdviceDetail.GenerateRequest(System.Int32)">
+            <summary>
+            Generates advice detail item request
+            </summary>
+            <param name="Index">index number of advice detail item</param>
+        </member>
         <member name="T:PayPal.Payments.DataObjects.LineItem">
             <summary>
             This class holds the Invoice Line Item item related information.
@@ -11122,7 +11598,34 @@
             line item unspsc code
             </summary>
         </member>
+        <member name="F:PayPal.Payments.DataObjects.LineItem.mAltTaxAmt">
+            <summary>
+            line item alternate tax amount
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.LineItem.mAltTaxId">
+            <summary>
+            line item alternate tax Id
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.LineItem.mAltTaxRate">
+            <summary>
+            line item alternate tax rate
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.LineItem.mCarrierServiceLevelCode">
+            <summary>
+            line item carrier service level code
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.LineItem.mExtAmt">
+            <summary>
+            line item extra amount
+            </summary>
+        </member>
         <member name="F:PayPal.Payments.DataObjects.LineItem.mName">
+            --------------------------------------
+            
             <summary>
             line item name
             </summary>
@@ -11415,7 +11918,49 @@
             <code>L_UNSPSCCODEn</code>
             </remarks>
         </member>
+        <member name="P:PayPal.Payments.DataObjects.LineItem.AltTaxAmt">
+            <summary>
+            Gets, Sets line item alternate tax code.
+            </summary>
+            <remarks>
+            <para>Item AltTaxAmt.</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>L_ALTTAXAMT</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.LineItem.AltTaxId">
+            <summary>
+            Gets, Sets line item alternate tax Id.
+            </summary>
+            <remarks>
+            <para>Item AltTaxId.</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>L_ALTTAXID</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.LineItem.AltTaxRate">
+            <summary>
+            Gets, Sets line item alternate tax rate.
+            </summary>
+            <remarks>
+            <para>Item AltTaxRate.</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>L_ALTTAXRATE</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.LineItem.CarrierServiceLevelCode">
+            <summary>
+            Gets, Sets line item carrier service level code
+            </summary>
+            <remarks>
+            <para>Item CarrierServiceLevelCode.</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>L_CARRIERSERVICELEVELCODE</code>
+            </remarks>
+        </member>
+        <!-- Badly formed XML comment ignored for member "P:PayPal.Payments.DataObjects.LineItem.ExtAmt" -->
         <member name="P:PayPal.Payments.DataObjects.LineItem.Name">
+            ------------------------------------------------------
             <summary>
             Gets, Sets line item name.
             </summary>
@@ -11937,6 +12482,36 @@
             Holds Merchant Zip
             </summary>
         </member>
+        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantUrl">
+            <summary>
+            Holds Merchant Url
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantVatNum">
+            <summary>
+            Holds Merchant VAT Number
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantInvNum">
+            <summary>
+            Holds Merchant Invoice Number
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantLocationId">
+            <summary>
+            MerrchantLocationId
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantId">
+            <summary>
+            MerchantId
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.MerchantInfo.mMerchantContactInfo">
+            <summary>
+            MerchantContactInfo
+            </summary>
+        </member>
         <member name="M:PayPal.Payments.DataObjects.MerchantInfo.#ctor">
             <summary>
             Constructor
@@ -11985,7 +12560,7 @@
             Gets, Sets  Merchant Street
             </summary>
             <remarks>
-            <para>Merchant's Stree Address (Number and Street Name)</para>
+            <para>Merchant's Street Address (Number and Street Name)</para>
             <para>Maps to Payflow Parameter:</para>
             <code>MERCHANTSTREET</code>
             </remarks>
@@ -12031,6 +12606,66 @@
             <code>MERCHANTZIP</code>
             </remarks>
         </member>
+        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantUrl">
+            <summary>
+            Gets, Sets  Merchant Url
+            </summary>
+            <remarks>
+            <para>Merchant's website (URL)</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>MERCHANTURL</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantVatNum">
+            <summary>
+            Gets, Sets  Merchant VAT Number
+            </summary>
+            <remarks>
+            <para>Merchant's VAT Number</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>MERCHANTVATNUM</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantInvNum">
+            <summary>
+            Gets, Sets  Merchant Invoice Number
+            </summary>
+            <remarks>
+            <para>Merchant's Invoice Number</para>
+            <para>Maps to Payflow Parameter:</para>
+            <code>MERCHANTINVNUM</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantLocationId">
+            <summary>
+            Gets, Sets the Merchant Location Id.
+            </summary>
+            Merchant assigned store or location number.
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>MERCHANTLOCATIONID</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantId">
+            <summary>
+            Gets, Sets the Merchant Id.
+            </summary>
+            Processor assigned number.
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>MERCHANTID</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchantContactInfo">
+            <summary>
+            Gets, Sets the Merchant Contact Information.
+            </summary>
+            Merchants telephone, URl or email.
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>MERCHANTCONTACTINFO</code>
+            </remarks>
+        </member>
         <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchDescr">
             <summary>
             Gets, Sets  MerchDescr
@@ -12040,6 +12675,7 @@
             <para>Maps to Payflow Parameter:</para>
             <code>MERCHDESCR</code>
             </remarks>
+            
         </member>
         <member name="P:PayPal.Payments.DataObjects.MerchantInfo.MerchSvc">
             <summary>
@@ -12063,8 +12699,11 @@
             <item><term>ABA</term><description>BankAcct</description><description><see cref='P:PayPal.Payments.DataObjects.BankAcct.Aba'>Aba</see></description><description>String</description></item>
             <item><term>ACCT</term><description>BankAcct ,  CreditCard , PurchaseCard , SwipeCard , CheckPayment , RecurringResponse, TransactionResponse</description><description>Acct</description><description>String</description></item>
             <item><term>ACCTTYPE</term><description>BankAcct</description><description><see cref='P:PayPal.Payments.DataObjects.BankAcct.AcctType'>AcctType</see></description><description>String</description></item>
+            <item><term>ACI</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Aci'>Aci</see></description><description>String</description></item>
             <item><term>ACSURL</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.AcsUrl'>AcsUrl</see></description><description>String</description></item>
             <item><term>ACTION</term><description>Value is set based on Transaction object used:RecurringAddTransaction, RecurringModifyTransaction, RecurringCancelTransaction, RecurringInquiryTransaction, RecurringReActivateTransaction, RecurringPaymentTransaction</description><description>NA</description><description>String</description></item>
+            <item><term>ADDLAMTn</term><description>AdviceDetail</description><description><see cref='P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmt'>AddLAmt</see></description><description>String</description></item>
+            <item><term>ADDLAMTTYPEn</term><description>AdviceDetail</description><description><see cref='P:PayPal.Payments.DataObjects.AdviceDetail.AddLAmtType'>AddLAmtType</see></description><description>String</description></item>
             <item><term>ADDLMSGS</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.AddlMsgs'>AddlMsgs</see></description><description>String</description></item>
             <item><term>ADDROVERRIDE</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.AddrOverride'>AddrOverride</see></description><description>String</description></item>
             <item><term>ADDRSTATUS</term><description>ECGetResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECGetResponse.AddressStatus'>AddressStatus</see></description><description>String</description></item>
@@ -12111,7 +12750,10 @@
             <item><term>CARDSECURE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CardSecure'>CardSecure</see></description><description>String</description></item>
             <item><term>CARDSTART</term><description>PurchaseCard, CreditCard</description><description>CardStart</description><description>String</description></item>
             <item><term>CARDTYPE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CardType'>CardType</see></description><description>String</description></item>
+            <item><term>CATTYPE</term><description>Devices</description><description><see cref='P:PayPal.Payments.DataObjects.Devices.CatType'>CatType</see></description><description>String</description></item>
             <item><term>CAVV</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.CAVV'>CAVV</see></description><description>String</description></item>
+            <item><term>CCTRANSID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CCTransId'>CCTransId</see></description><description>String</description></item>
+            <item><term>CCTRANS_POSDATA</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.CCTrans_POSData'>CCTrans_POSData</see></description><description>String</description></item>
             <item><term>CHKNUM</term><description>ACHTender, CheckTender, CardTender</description><description>ChkNum</description><description>String</description></item>
             <item><term>CHKTYPE</term><description>ACHTender, CheckTender, CardTender</description><description>ChkType</description><description>String</description></item>
             <item><term>COMMCARD</term><description>PurchaseCard</description><description></description><description>String</description></item>
@@ -12119,13 +12761,17 @@
             <item><term>COMMENT1</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Comment1'>Comment1</see></description><description>String</description></item>
             <item><term>COMMENT2</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.Comment2'>Comment2</see></description><description>String</description></item>
             <item><term>COMPANYNAME</term><description>BillTo, RecurringResponse</description><description>CompanyName</description><description>String</description></item>
+            <item><term>CONTACTLESS</term><description>Devices</description><description><see cref='P:PayPal.Payments.DataObjects.Devices.Contactless'>Contactless</see></description><description>String</description></item>
             <item><term>COUNTRYCODE</term><description>BillTo,ECGetResponse</description><description>CountryCode</description><description>String</description></item>
             <item><term>COUNTRYCODE</term><description>ExpressCheckoutRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ExpressCheckoutRequest.CountryCode'>CountryCode</see></description><description>String</description></item>
             <item><term>CURRENCY</term><description>BuyerAuthVETransaction</description><description></description><description>Currency</description></item>
             <item><term>CUSTCODE</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustCode'>CustCode</see></description><description>String</description></item>
+            <item><term>CUSTDATA</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustData'>CustData</see></description><description>String</description></item>
             <item><term>CUSTID</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustId'>CustId</see></description><description>String</description></item>
             <item><term>CUSTIP</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustIP'>CustIP</see></description><description>String</description></item>
             <item><term>CUSTOM</term><description>BrowserInfo</description><description><see cref='P:PayPal.Payments.DataObjects.BrowserInfo.Custom'>Custom</see></description><description>String</description></item>
+            <item><term>CUSTOMERID</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustomerId'>CustomerId</see></description><description>String</description></item>
+            <item><term>CUSTOMERNUMBER</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustomerNumber'>CustomerNumber</see></description><description>String</description></item>
             <item><term>CUSTREF</term><description>Invoice, TransactionResponse</description><description>CustRef</description><description>String</description></item>
             <item><term>CUSTVATREGNUM</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.CustVatRegNum'>CustVatRegNum</see></description><description>String</description></item>
             <item><term>CVV2</term><description>PurchaseCard, CreditCard</description><description>CVV2</description><description>String</description></item>
@@ -12161,13 +12807,18 @@
             <item><term>IAVS</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.IAVS'>IAVS</see></description><description>String</description></item>
             <item><term>INVNUM</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.InvNum'>InvNum</see></description><description>String</description></item>
             <item><term>INVOICEDATE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.InvoiceDate'>InvoiceDate</see></description><description>Date</description></item>
+            <item><term>L_ALTTAXAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.AltTaxAmt'>AltTaxAmt</see></description><description>Currency</description></item>
+            <item><term>L_ALTTAXIDn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.AltTaxId'>AltTaxId</see></description><description>Currency</description></item>
+            <item><term>L_ALTTAXRATEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.AltTaxRate'>AltTaxRate</see></description><description>Currency</description></item>
             <item><term>L_AMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Amt'>Amt</see></description><description>Currency</description></item>
+            <item><term>L_CARRIERSERVICELEVELCODEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CarrierServiceLevelCode'>CarrierServiceLevelCode</see></description><description>Currency</description></item>
             <item><term>L_CATALOGNUMn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CatalogNum'>CatalogNum</see></description><description>String</description></item>
             <item><term>L_COMMCODEn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CommCode'>CommCode</see></description><description>String</description></item>
             <item><term>L_COSTCENTERNUMn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.CostCenterNum'>CostCenterNum</see></description><description>String</description></item>
             <item><term>L_COSTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Cost'>Cost</see></description><description>Currency</description></item>
             <item><term>L_DESCn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Desc'>Desc</see></description><description>String</description></item>
             <item><term>L_DISCOUNTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Discount'>Discount</see></description><description>Currency</description></item>
+            <item><term>L_EXTAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.ExtAmt'>ExtAmt</see></description><description>Currency</description></item>
             <item><term>L_FREIGHTAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.FreightAmt'>FreightAmt</see></description><description>Currency</description></item>
             <item><term>L_HANDLINGAMTn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.HandlingAmt'>HandlingAmt</see></description><description>Currency</description></item>
             <item><term>L_MANUFACTURERn</term><description>LineItem</description><description><see cref='P:PayPal.Payments.DataObjects.LineItem.Manufacturer'>Manufacturer</see></description><description>String</description></item>
@@ -12192,15 +12843,21 @@
             <item><term>MAXAMT</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.MaxAmt'>MaxAmt</see></description><description>String</description></item>
             <item><term>MAXFAILPAYMENTS</term><description>RecurringResponse, RecurringInfo</description><description>MaxFailPayments</description><description>String</description></item>
             <item><term>MD</term><description>BuyerAuthResponse</description><description><see cref='P:PayPal.Payments.DataObjects.BuyerAuthResponse.MD'>MD</see></description><description>String</description></item>
-            <item><term>MERCHDESCR</term><description>PurchaseCard, CreditCard</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.MerchDescr'>MerchDescr</see></description><description>String</description></item>
-            <item><term>MERCHSVC</term><description>PurchaseCard, CreditCard</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.MerchSvc'>MerchSvc</see></description><description>String</description></item>
-            <item><term>MERCHANTNAME</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.MerchantName'>MerchantName</see></description><description>String</description></item>
-            <item><term>MERCHANTSTREET</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.MerchantStreet'>MerchantStreet</see></description><description>String</description></item>
-            <item><term>MERCHANTCITY</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.MerchantCity'>MerchantCity</see></description><description>String</description></item> 
-            <item><term>MERCHANTSTATE</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.MerchantState'>MerchantState</see></description><description>String</description></item> 
-            <item><term>MERCHANTZIP</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.MerchantZip'>MerchantZip</see></description><description>String</description></item> 
-            <item><term>MERCHANTCOUNTRYCODE</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.MerchantCountryCode'>MerchantCountryCode</see></description><description>String</description></item> 
+            <item><term>MERCHDESCR</term><description>PurchaseCard, CreditCard</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchDescr'>MerchDescr</see></description><description>String</description></item>
+            <item><term>MERCHSVC</term><description>PurchaseCard, CreditCard</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchSvc'>MerchSvc</see></description><description>String</description></item>
+            <item><term>MERCHANTCITY</term><description>CMerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantCity'>MerchantCity</see></description><description>String</description></item>
+            <item><term>MERCHANTCONTACTINFO</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantContactInfo'>MerchantContactInfo</see></description><description>String</description></item>
+            <item><term>MERCHANTID</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantId'>MerchantId</see></description><description>String</description></item>
+            <item><term>MERCHANTINVNUM</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantInvNum'>>MerchantInvNum</see></description><description>String</description></item> 
+            <item><term>MERCHANTLOCATIONID</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantLocationId'>MerchantLocationId</see></description><description>String</description></item>
+            <item><term>MERCHANTNAME</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantName'>MerchantName</see></description><description>String</description></item>
+            <item><term>MERCHANTSTATE</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantState'>MerchantState</see></description><description>String</description></item> 
+            <item><term>MERCHANTSTREET</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantStreet'>MerchantStreet</see></description><description>String</description></item>
+            <item><term>MERCHANTURL</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantUrl'>MerchantUrl</see></description><description>String</description></item> 
+            <item><term>MERCHANTVATNUM</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantVatNum'>MerchantVatNum</see></description><description>String</description></item> 
+            <item><term>MERCHANTZIP</term><description>MerchantInfo</description><description><see cref='P:PayPal.Payments.DataObjects.MerchantInfo.MerchantZip'>MerchantZip</see></description><description>String</description></item> 
             <item><term>MICR</term><description>CheckPayment</description><description></description><description>String</description></item>
+            <item><term>MISCDATA</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.MiscData'>MiscData</see></description><description>Currency</description></item>
             <item><term>NAME</term><description>BankAcct, CreditCard, PurchaseCard, SwipeCard, CheckPayment, RecurringResponse</description><description>Name</description><description>String</description></item>
             <item><term>NATIONALTAXAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.NationalTaxAmt'>NationalTaxAmt</see></description><description>Currency</description></item>
             <item><term>NEXTPAYMENT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.NextPayment'>NextPayment</see></description><description>String</description></item>
@@ -12264,6 +12921,7 @@
             <item><term>PWD</term><description>UserInfo</description><description></description><description>String</description></item>
             <item><term>RECURRING</term><description>RecurringInfo, Invoice</description><description>Recurring</description><description>String</description></item>
             <item><term>RECURRINGTYPE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.RecurringType'>RecurringType</see></description><description>String</description></item>
+            <item><term>REPORTGROUP</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.ReportGroup'>ReportGroup</see></description><description>Currency</description></item>
             <item><term>REQCONFIRMSHIPPING</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.ReqConfirmShipping'>ReqConfirmShipping</see></description><description>String</description></item>
             <item><term>REQNAME</term><description>CustomerInfo</description><description><see cref='P:PayPal.Payments.DataObjects.CustomerInfo.ReqName'>ReqName</see></description><description>String</description></item>
             <item><term>RESPMSG</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.RespMsg'>RespMsg</see></description><description>String</description></item>
@@ -12272,6 +12930,7 @@
             <item><term>RETRYNUMDAYS</term><description>RecurringResponse, RecurringInfo</description><description>RetryNumDays</description><description>String</description></item>
             <item><term>RETURNURL</term><description>ECSetRequest</description><description><see cref='P:PayPal.Payments.DataObjects.ECSetRequest.ReturnURL'>ReturnURL</see></description><description>String</description></item>
             <item><term>RPREF</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.RPRef'>RPRef</see></description><description>String</description></item>
+            <item><term>RRN</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Rrn'>Rrn</see></description><description>String</description></item>
             <item><term>SECURETOKEN</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.SecureToken'>SecureToken</see></description><description>String</description></item>
             <item><term>SECURETOKENID</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.SecureTokenId'>SecureTokenId</see></description><description>String</description></item>
             <item><term>SETTLEAMT</term><description>ECDoResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ECDoResponse.SettleAmt'>SettleAmt</see></description><description>String</description></item>
@@ -12294,6 +12953,7 @@
             <item><term>SHIPTOSTREET2</term><description>ShipTo, ECGetResponse</description><description><see cref='P:PayPal.Payments.DataObjects.ShipTo.ShipToStreet2'>ShipToStreet2</see></description><description>String</description></item>
             <item><term>SHIPTOZIP</term><description>ShipTo, RecurringResponse,ECGetResponse</description><description>ShipToZip</description><description>String</description></item>
             <item><term>SS</term><description>CheckTender</description><description></description><description>String</description></item>
+            <item><term>STAN</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.Stan'>Stan</see></description><description>String</description></item>
             <item><term>START</term><description>RecurringResponse, RecurringInfo</description><description>Start</description><description>String</description></item>
             <item><term>STARTTIME</term><description>Invoice, TransactionResponse</description><description>StartTime</description><description>String</description></item>
             <item><term>STATUS</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.Status'>Status</see></description><description>String</description></item>
@@ -12312,6 +12972,7 @@
             <item><term>TRXRESPMSG</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.TrxRespMsg'>TrxRespMsg</see></description><description>String</description></item>
             <item><term>TRXRESULT</term><description>RecurringResponse</description><description><see cref='P:PayPal.Payments.DataObjects.RecurringResponse.TrxResult'>TrxResult</see></description><description>String</description></item>
             <item><term>TRXTYPE</term><description>Value is set based on the Transaction object used:SaleTransaction, CreditTransaction, VoidTransaction, CaptureTransaction etc.</description><description>TrxType</description><description>String</description></item>
+            <item><term>TXID</term><description>BuyerAuthResponse</description><description><see cref='!:BuyerAuthResponse.TxId'>TxId</see></description><description>String</description></item>
             <item><term>USER</term><description>UserInfo</description><description></description><description>String</description></item>
             <item><term>USER1</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem1'>UserItem1</see></description><description>String</description></item>
             <item><term>USER2</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem2'>UserItem2</see></description><description>String</description></item>
@@ -12323,9 +12984,12 @@
             <item><term>USER8</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem8'>UserItem8</see></description><description>String</description></item>
             <item><term>USER9</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem9'>UserItem9</see></description><description>String</description></item>
             <item><term>USER10</term><description>UserItem</description><description><see cref='P:PayPal.Payments.DataObjects.UserItem.UserItem10'>UserItem10</see></description><description>String</description></item>
+            <item><term>VALIDATRIONCODE</term><description>TransactionResponse</description><description><see cref='P:PayPal.Payments.DataObjects.TransactionResponse.ValidationCode'>ValidationCode</see></description><description>String</description></item>
+            <item><term>VATINVNUM</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatInvNum'>VatInvNum</see></description><description>String</description></item>
             <item><term>VATREGNUM</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatRegNum'>VatRegNum</see></description><description>String</description></item>
             <item><term>VATTAXAMT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatTaxAmt'>VatTaxAmt</see></description><description>Currency</description></item>
-            <item><term>VATTAXPERCENT</term><description>Invoice</description><description></description><description>String</description></item>
+            <item><term>VATTAXPERCENT</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatTaxPercent'>VatTaxPercent</see></description><description>String</description></item>
+            <item><term>VATTAXRATE</term><description>Invoice</description><description><see cref='P:PayPal.Payments.DataObjects.Invoice.VatTaxRate'>VatTaxRate</see></description><description>String</description></item>
             <item><term>VENDOR</term><description>UserInfo</description><description></description><description>String</description></item>
             <item><term>VERBOSITY</term><description>Value is set based on the Transaction object used:SaleTransaction, CreditTransaction, VoidTransaction, CaptureTransaction, AuthorizationTransaction, VoiceAuthTransaction, InquiryTransaction, FraudReviewTransaction, RecurringAddTransaction, RecurringModifyTransaction, RecurringCancelTransaction, RecurringInquiryTransaction, RecurringReActivateTransaction, RecurringPaymentTransaction</description><description>Verbosity</description><description>String</description></item>
             <item><term>VIT_INTGTYPE</term><description>Value is set from all the Transaction objects: SaleTransaction, CreditTransaction, VoidTransaction, CaptureTransaction etc.</description><description>Vit_IntgType</description><description>String</description></item>
@@ -15834,6 +16498,36 @@
         <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCCUpdated">
             <summary>
             CCUpdated
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mRrn">
+            <summary>
+            Rrn
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mStan">
+            <summary>
+            Stan
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mAci">
+            <summary>
+            Aci
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mValidationCode">
+            <summary>
+            ValidationCode
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCCTransId">
+            <summary>
+            CCTransId
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.DataObjects.TransactionResponse.mCCTrans_POSData">
+            <summary>
+            CCTrans_POSData
             </summary>
         </member>
         <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Result">
@@ -16541,6 +17235,63 @@
             
             <para>Maps to Payflow Parameter:</para>
             <code>CCUPDATED</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Rrn">
+            <summary>
+            Gets the Retrieve Reference transaction.
+            </summary>
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>RRN</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Stan">
+            <summary>
+            Gets the System Trace Audit number.
+            </summary>
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>STAN</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.Aci">
+            <summary>
+            Gets the Authorization Characteristics Indicator.
+            </summary>
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>Aci</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.ValidationCode">
+            <summary>
+            Gets the Transaction Identifier.
+            </summary>
+            The transaction identifier associated with the transaction being settled.
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>VALIDATIONCODE</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CCTransId">
+            <summary>
+            Gets the Credit Card Transaction Id.
+            </summary>
+            Unique transaction ID returned by some processors for all credit card transactions.
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>CCTRANSID</code>
+            </remarks>
+        </member>
+        <member name="P:PayPal.Payments.DataObjects.TransactionResponse.CCTrans_POSData">
+            <summary>
+            Gets the Credit Card Transaction POS Data
+            </summary>
+            Value returned by some processors for all credit card transactions.
+            <remarks>
+            <para>Maps to Payflow Parameter:</para>
+            <code>CCTRAN_POSDATA</code>
             </remarks>
         </member>
         <member name="M:PayPal.Payments.DataObjects.TransactionResponse.#ctor">
@@ -25936,20 +26687,24 @@
         </member>
         <member name="F:PayPal.Payments.Transactions.VoiceAuthTransaction.mAuthCode">
             <summary>
-            Holds Authcode , mandatory param for Voice Auth transaction.
+            Holds AuthCode, Authorization code obtain via another means; i.e. phone.
+            </summary>
+        </member>
+        <member name="F:PayPal.Payments.Transactions.VoiceAuthTransaction.mAuthDate">
+            <summary>
+            Holds AuthDate, Date the AuthCode was obtained.
             </summary>
         </member>
         <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.#ctor">
             <summary>
-            Private Constructor. This prevents
-            creation of an empty Transaction object. 
+            Private Constructor. This prevents creation of an empty Transaction object. 
             </summary>
         </member>
         <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.#ctor(System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
              <summary>
              Constructor
              </summary>
-             <param name="AuthCode">Authcode , mandatory for Voice auth transaction.</param>
+             <param name="AuthCode">Authorization code obtain via another means; i.e. phone.</param>
              <param name="UserInfo">User Info object populated with user credentials.</param>
              <param name="PayflowConnectionData">Connection credentials object.</param>
              <param name="Invoice">Invoice object.</param>
@@ -25970,7 +26725,7 @@
             	// Populate data objects
             	...............
             
-            	// Create a new Voice Auth Transaction.                                                           
+            	// Create a new Voice Authorization Transaction.                                                           
             	VoiceAuthTransaction Trans = new VoiceAuthTransaction("123PNI",                    
             		User, Connection, Inv, Card, PayflowUtility.RequestId);                                
             	                                                                                                                    
@@ -26003,10 +26758,96 @@
             	...............
             	' Populate data objects
             	...............
-            	 ' Create a new Voice Auth Transaction.                                                                
+            	 ' Create a new Voice Authorization Transaction.                                                                
             	 Dim Trans As VoiceAuthTransaction = New VoiceAuthTransaction("123PNI", User,    
             		Connection, Inv, Card, PayflowUtility.RequestId)                                          
             	                                                                                                                         
+            	 ' Submit the transaction.                                                                                     
+            	 Dim Resp As Response = Trans.SubmitTransaction()                                             
+            	                                                                                                                         
+            	 If Not Resp Is Nothing Then                                                                                 
+            	     ' Get the Transaction Response parameters.                                                     
+            	     Dim TrxnResponse As TransactionResponse = Resp.TransactionResponse           
+            	     If Not TrxnResponse Is Nothing Then                                                               
+            	         Console.WriteLine("RESULT = " + TrxnResponse.Result)                                
+            	         Console.WriteLine("PNREF = " + TrxnResponse.Pnref)                                   
+            	         Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg)                         
+            	         Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode)                      
+            	     End If                                                                                                            
+            	 End If                                                                                                                
+            	                                                                                                                         
+            	 ' Get the Context and check for any contained SDK specific errors.                         
+            	 Dim Ctx As Context = Resp.TransactionContext                                                    
+            	 If Not Ctx Is Nothing AndAlso Ctx.getErrorCount() > 0 Then                                  
+            	     Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString())             
+            	 End If                                                                                                                
+            
+            	</code>
+            	</example>
+        </member>
+        <member name="M:PayPal.Payments.Transactions.VoiceAuthTransaction.#ctor(System.String,System.String,PayPal.Payments.DataObjects.UserInfo,PayPal.Payments.DataObjects.PayflowConnectionData,PayPal.Payments.DataObjects.Invoice,PayPal.Payments.DataObjects.BaseTender,System.String)">
+             <summary>
+             Constructor
+             </summary>
+             <param name="AuthCode">Authorization code obtain via another means; i.e. phone.</param>
+             <param name="AuthDate">Date the AuthCode was obtained.</param>
+             <param name="UserInfo">User Info object populated with user credentials.</param>
+             <param name="PayflowConnectionData">Connection credentials object.</param>
+             <param name="Invoice">Invoice object.</param>
+             <param name="Tender">Tender object such as  Card Tender.</param>
+             <param name="RequestId">Request Id</param>
+             <remarks> 
+             Some transactions cannot be authorized over the Internet (for example, high dollar
+             amounts)—processing networks generate Referral (Result Code 13) transactions.
+             In these situations, contact the customer service department of the 
+             merchant bank and provide the payment information as requested. 
+             If the transaction is approved, the bank provides a voice authorization 
+             code (AUTHCODE) for the transaction. This must be included as AUTHCODE 
+             as part of a Voice Authorization transaction.
+             </remarks>
+            	<example>
+            	<code lang="C#" escaped="false">
+            	...............
+            	// Populate data objects
+            	...............
+            
+            	// Create a new Voice Authorization Transaction.                                                           
+            	VoiceAuthTransaction Trans = new VoiceAuthTransaction("123PNI", "08102020",                 
+            		User, Connection, Inv, Card, PayflowUtility.RequestId);                                
+            	                                                                                                                    
+            	// Submit the transaction.                                                                                
+            	Response Resp = Trans.SubmitTransaction();                                                   
+            	                                                                                                                    
+            	if (Resp != null)                                                                                              
+            	{                                                                                                                   
+            		// Get the Transaction Response parameters.                                            
+            		TransactionResponse TrxnResponse =  Resp.TransactionResponse;            
+            		if (TrxnResponse != null)                                                                         
+            		{                                                                                                           
+            			Console.WriteLine("RESULT = " + TrxnResponse.Result);                   
+            			Console.WriteLine("PNREF = " + TrxnResponse.Pnref);                      
+            			Console.WriteLine("RESPMSG = " + TrxnResponse.RespMsg);            
+            			Console.WriteLine("AUTHCODE = " + TrxnResponse.AuthCode);        
+            		}                                                                                                           
+            	}                                                                                                                   
+            	                                                                                                                    
+            	// Get the Context and check for any contained SDK specific errors.                   
+            	Context Ctx = Resp.TransactionContext;                                                          
+            	if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)                                                       
+            	{                                                                                                                   
+            		Console.WriteLine(Environment.NewLine + "Errors = " + Ctx.ToString());    
+            	}                                                                                                                   
+            
+            
+             </code>
+            	<code lang="Visual Basic" escaped="false">
+            	...............
+            	' Populate data objects
+            	...............
+            	 ' Create a new Voice Authorization Transaction.                                                                
+            	 Dim Trans As VoiceAuthTransaction = New VoiceAuthTransaction("123PNI", "08102020",
+            	 User, Connection, Inv, Card, PayflowUtility.RequestId)                                          
+            	                                                                                                                         
             	 ' Submit the transaction.                                                                                     
             	 Dim Resp As Response = Trans.SubmitTransaction()                                             
             	                                                                                                                         
@@ -26034,7 +26875,7 @@
              <summary>
              Constructor
              </summary>
-             <param name="AuthCode">Authcode , mandatory for Voice auth transaction.</param>
+             <param name="AuthCode">Authorization code obtain via another means; i.e. phone.</param>
              <param name="UserInfo">User Info object populated with user credentials.</param>
              <param name="Invoice">Invoice object.</param>
              <param name="Tender">Tender object such as  Card Tender.</param>
@@ -26054,7 +26895,7 @@
             	// Populate data objects
             	...............
             
-            	// Create a new Voice Auth Transaction.                                                           
+            	// Create a new Voice Authorization Transaction.                                                           
             	VoiceAuthTransaction Trans = new VoiceAuthTransaction("123PNI",                    
             		User, Inv, Card, PayflowUtility.RequestId);                                
             	                                                                                                                    
Index: ../dotNET/PFProSDK/Properties/AssemblyInfo.cs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>using System.Reflection;\r\nusing System.Runtime.CompilerServices;\r\nusing System.Runtime.InteropServices;\r\n\r\n// General Information about an assembly is controlled through the following \r\n// set of attributes. Change these attribute values to modify the information\r\n// associated with an assembly.\r\n[assembly: AssemblyTitle(\"Payflow.Properties\")]\r\n[assembly: AssemblyDescription(\"\")]\r\n[assembly: AssemblyConfiguration(\"\")]\r\n[assembly: AssemblyCompany(\"\")]\r\n[assembly: AssemblyProduct(\"Payflow.Properties\")]\r\n[assembly: AssemblyCopyright(\"Copyright ©  2020\")]\r\n[assembly: AssemblyTrademark(\"\")]\r\n[assembly: AssemblyCulture(\"\")]\r\n\r\n// Setting ComVisible to false makes the types in this assembly not visible \r\n// to COM components.  If you need to access a type in this assembly from \r\n// COM, set the ComVisible attribute to true on that type.\r\n[assembly: ComVisible(false)]\r\n\r\n// The following GUID is for the ID of the typelib if this project is exposed to COM\r\n[assembly: Guid(\"9bc0d802-8213-4664-9a3e-1d7446e94962\")]\r\n\r\n// Version information for an assembly consists of the following four values:\r\n//\r\n//      Major Version\r\n//      Minor Version \r\n//      Build Number\r\n//      Revision\r\n//\r\n[assembly: AssemblyVersion(\"1.0.0.0\")]\r\n[assembly: AssemblyFileVersion(\"1.0.0.0\")]\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../dotNET/PFProSDK/Properties/AssemblyInfo.cs	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ ../dotNET/PFProSDK/Properties/AssemblyInfo.cs	(date 1600051371938)
@@ -5,13 +5,13 @@
 // General Information about an assembly is controlled through the following 
 // set of attributes. Change these attribute values to modify the information
 // associated with an assembly.
-[assembly: AssemblyTitle("Payflow.Properties")]
-[assembly: AssemblyDescription("")]
+[assembly: AssemblyTitle("Payflow SDK for .NET")]
+[assembly: AssemblyDescription("PayPal Payment Services Payflow SDK")]
 [assembly: AssemblyConfiguration("")]
-[assembly: AssemblyCompany("")]
-[assembly: AssemblyProduct("Payflow.Properties")]
-[assembly: AssemblyCopyright("Copyright ©  2020")]
-[assembly: AssemblyTrademark("")]
+[assembly: AssemblyCompany("PayPal Inc.")]
+[assembly: AssemblyProduct("Payflow_dotNET.dll")]
+[assembly: AssemblyCopyright("Copyright 2020 PayPal Inc.")]
+[assembly: AssemblyTrademark("Payflow")]
 [assembly: AssemblyCulture("")]
 
 // Setting ComVisible to false makes the types in this assembly not visible 
@@ -29,5 +29,5 @@
 //      Build Number
 //      Revision
 //
-[assembly: AssemblyVersion("1.0.0.0")]
-[assembly: AssemblyFileVersion("1.0.0.0")]
+[assembly: AssemblyVersion("5.0.0.0")]
+[assembly: AssemblyFileVersion("5.0.0.0")]
Index: src/sdk/transactions/paypal/payflow/ReferenceTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used as base class for all reference transactions.\r\n * <p>This class can be derived to create a new reference transaction\r\n * or can be used as is to submit a new type of reference transaction.\r\n * <p>A reference transaction is a transaction which always takes\r\n * the PNRef of a previously submitted transaction.</p>\r\n * </p>\r\n */\r\npublic class ReferenceTransaction extends BaseTransaction {\r\n    private String origId;\r\n    private String origPPRef;\r\n\r\n    /**\r\n     * gets the OrigPPRef\r\n     *\r\n     * @return origPPRef\r\n     *  <p> maps to PayflowParameter ORIGPPREF</p>\r\n     */\r\n    public String getOrigPPRef() {\r\n        return origPPRef;\r\n    }\r\n\r\n    /**\r\n     * sets the OrigPPRef\r\n     *\r\n     * @param origPPRef String\r\n     *  <p> maps to PayflowParameter ORIGPPREF</p>\r\n     */\r\n    public void setOrigPPRef(String origPPRef) {\r\n        this.origPPRef = origPPRef;\r\n    }\r\n\r\n    protected ReferenceTransaction() {\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param trxType               String                - Transaction Type\r\n     * @param origId                String                - Original Transaction Id.\r\n     * @param userInfo              UserInfo             - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData         - Connection credentials object.\r\n     * @param requestId             String          - RequestId\r\n     *                              <p/>\r\n     *                              This class can be derived to create a new reference transaction\r\n     *                              or can be used as is to submit a new type of reference transaction.\r\n     *                              A reference transaction is a transaction which always takes\r\n     *                              the PNRef of a previously submitted transaction.\r\n     *                              </p>\r\n     */\r\n    public ReferenceTransaction(String trxType,\r\n                                String origId,\r\n                                UserInfo userInfo,\r\n                                PayflowConnectionData payflowConnectionData,\r\n                                String requestId) {\r\n        super(trxType, userInfo, payflowConnectionData, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param trxType   String   - Transaction Type\r\n     * @param origId    String   - Original Transaction Id.\r\n     * @param userInfo  UserInfo - User Info object populated with user credentials.\r\n     * @param requestId String   - RequestId\r\n     *                  <p/>\r\n     *                  This class can be derived to create a new reference transaction\r\n     *                  or can be used as is to submit a new type of reference transaction.\r\n     *                  A reference transaction is a transaction which always takes\r\n     *                  the PNRef of a previously submitted transaction.\r\n     *                  </p>\r\n     */\r\n    public ReferenceTransaction(String trxType,\r\n                                String origId,\r\n                                UserInfo userInfo,\r\n                                String requestId) {\r\n        super(trxType, userInfo, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param trxType               String                - Transaction Type\r\n     * @param origId                String                - Original Transaction Id.\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param invoice               Invoice               - Invoice object.\r\n     * @param requestId             String                - RequestId\r\n     *                              <p/>\r\n     *                              This class can be derived to create a new reference transaction\r\n     *                              or can be used as is to submit a new type of reference transaction.\r\n     *                              A reference transaction is a transaction which always takes\r\n     *                              the PNRef of a previously submitted transaction.\r\n     *                              </p>\r\n     */\r\n    public ReferenceTransaction(String trxType,\r\n                                String origId,\r\n                                UserInfo userInfo,\r\n                                PayflowConnectionData payflowConnectionData,\r\n                                Invoice invoice, String requestId) {\r\n        super(trxType, userInfo, payflowConnectionData, invoice, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param trxType   String   - Transaction Type\r\n     * @param origId    String   - Original Transaction Id.\r\n     * @param userInfo  UserInfo - User Info object populated with user credentials.\r\n     * @param invoice   Invoice  - Invoice object.\r\n     * @param requestId String   - RequestId\r\n     *                  <p/>\r\n     *                  This class can be derived to create a new reference transaction\r\n     *                  or can be used as is to submit a new type of reference transaction.\r\n     *                  A reference transaction is a transaction which always takes\r\n     *                  the PNRef of a previously submitted transaction.\r\n     *                  </p>\r\n     */\r\n    public ReferenceTransaction(String trxType, String origId, UserInfo userInfo, Invoice invoice, String requestId) {\r\n        this(trxType, origId, userInfo, null, invoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param trxType               String                - Transaction Type\r\n     * @param origId                String                - Original Transaction Id.\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param invoice               Invoice               - Invoice object.\r\n     * @param tender                Tender                - Tender object.\r\n     * @param requestId             String                - RequestId\r\n     *                              <p/>\r\n     *                              This class can be derived to create a new reference transaction\r\n     *                              or can be used as is to submit a new type of reference transaction.\r\n     *                              A reference transaction is a transaction which always takes\r\n     *                              the PNRef of a previously submitted transaction.\r\n     *                              </p>\r\n     */\r\n\r\n    public ReferenceTransaction(String trxType,\r\n                                String origId,\r\n                                UserInfo userInfo,\r\n                                PayflowConnectionData payflowConnectionData,\r\n                                Invoice invoice,\r\n                                BaseTender tender, String requestId) {\r\n        super(trxType, userInfo, payflowConnectionData, invoice, tender, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param trxType   String   - Transaction Type\r\n     * @param origId    String   - Original Transaction Id.\r\n     * @param userInfo  UserInfo - User Info object populated with user credentials.\r\n     * @param invoice   Invoice  - Invoice object.\r\n     * @param tender    Tender   - Tender object.\r\n     * @param requestId String   - RequestId\r\n     *                  <p/>\r\n     *                  This class can be derived to create a new reference transaction\r\n     *                  or can be used as is to submit a new type of reference transaction.\r\n     *                  A reference transaction is a transaction which always takes\r\n     *                  the PNRef of a previously submitted transaction.\r\n     *                  </p>\r\n     */\r\n\r\n    public ReferenceTransaction(String trxType, String origId, UserInfo userInfo, Invoice invoice, BaseTender tender, String requestId) {\r\n        this(trxType, origId, userInfo, null, invoice, tender, requestId);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGID, origId));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGPPREF, origPPRef));\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/ReferenceTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/ReferenceTransaction.java	(date 1600063286548)
@@ -2,11 +2,12 @@
 
 /**
  * This class is used as base class for all reference transactions.
- * <p>This class can be derived to create a new reference transaction
+ *
+ * This class can be derived to create a new reference transaction
  * or can be used as is to submit a new type of reference transaction.
  * <p>A reference transaction is a transaction which always takes
- * the PNRef of a previously submitted transaction.</p>
- * </p>
+ * the PNRef of a previously submitted transaction.
+ *
  */
 public class ReferenceTransaction extends BaseTransaction {
     private String origId;
@@ -43,7 +44,7 @@
      * @param userInfo              UserInfo             - User Info object populated with user credentials.
      * @param payflowConnectionData PayflowConnectionData         - Connection credentials object.
      * @param requestId             String          - RequestId
-     *                              <p/>
+     *                               * <p>
      *                              This class can be derived to create a new reference transaction
      *                              or can be used as is to submit a new type of reference transaction.
      *                              A reference transaction is a transaction which always takes
@@ -66,7 +67,7 @@
      * @param origId    String   - Original Transaction Id.
      * @param userInfo  UserInfo - User Info object populated with user credentials.
      * @param requestId String   - RequestId
-     *                  <p/>
+     *                   * <p>
      *                  This class can be derived to create a new reference transaction
      *                  or can be used as is to submit a new type of reference transaction.
      *                  A reference transaction is a transaction which always takes
@@ -90,7 +91,7 @@
      * @param payflowConnectionData PayflowConnectionData - Connection credentials object.
      * @param invoice               Invoice               - Invoice object.
      * @param requestId             String                - RequestId
-     *                              <p/>
+     *                               * <p>
      *                              This class can be derived to create a new reference transaction
      *                              or can be used as is to submit a new type of reference transaction.
      *                              A reference transaction is a transaction which always takes
@@ -114,7 +115,7 @@
      * @param userInfo  UserInfo - User Info object populated with user credentials.
      * @param invoice   Invoice  - Invoice object.
      * @param requestId String   - RequestId
-     *                  <p/>
+     *                   * <p>
      *                  This class can be derived to create a new reference transaction
      *                  or can be used as is to submit a new type of reference transaction.
      *                  A reference transaction is a transaction which always takes
@@ -135,7 +136,7 @@
      * @param invoice               Invoice               - Invoice object.
      * @param tender                Tender                - Tender object.
      * @param requestId             String                - RequestId
-     *                              <p/>
+     *                               * <p>
      *                              This class can be derived to create a new reference transaction
      *                              or can be used as is to submit a new type of reference transaction.
      *                              A reference transaction is a transaction which always takes
@@ -162,7 +163,7 @@
      * @param invoice   Invoice  - Invoice object.
      * @param tender    Tender   - Tender object.
      * @param requestId String   - RequestId
-     *                  <p/>
+     *                   * <p>
      *                  This class can be derived to create a new reference transaction
      *                  or can be used as is to submit a new type of reference transaction.
      *                  A reference transaction is a transaction which always takes
Index: src/sdk/transactions/paypal/payflow/RecurringModifyTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a recurring transaction with\r\n * modify action.\r\n * <p/>\r\n * RecurringModifyTransaction is used to modify any profile value by\r\n * sending any subset of the profile parameters, including an Optional Transaction.\r\n * The Modify action is useful, for example, when an inactive customer wishes to\r\n * restart payments using a new valid credit card. The Modify action changes a\r\n * profiles STATUS to active but does not change the START date.\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * //Set the Recurring related information.\r\n * RecurringInfo recurInfo = new RecurringInfo();\r\n * recurInfo.setOrigProfileId (\"RT0000001350\");\r\n * recurInfo.setProfileName (\"PayPal Inc.\");\r\n * ////////////////////////////////////\r\n * <p/>\r\n * // Create a new Recurring modify Transaction.\r\n * RecurringModifyTransaction trans = new RecurringModifyTransaction(\r\n * user, connection, recurInfo, PayflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"/n\" + \"Errors = \" + Ctx.ToString());\r\n * }\r\n */\r\n\r\n\r\npublic class RecurringModifyTransaction extends RecurringTransaction {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              UserInfo             - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param recurringInfo         RecurringInfo   - Recurring Info object.\r\n     * @param requestId             String              - Request Id\r\n     *                              <p/>\r\n     *                              RecurringModifyTransaction is used to modify any profile value by\r\n     *                              sending any subset of the profile parameters, including an Optional Transaction.\r\n     *                              The Modify action is useful, for example, when an inactive customer wishes to\r\n     *                              restart payments using a new valid credit card. The Modify action changes a\r\n     *                              profile's STATUS to active but does not change the START date.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringModifyTransaction.\r\n     * RecurringModifyTransaction trans = new RecurringModifyTransaction(user, connection, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n\r\n    public RecurringModifyTransaction(UserInfo userInfo,\r\n                                      PayflowConnectionData payflowConnectionData,\r\n                                      RecurringInfo recurringInfo, String requestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_MODIFY,\r\n                recurringInfo,\r\n                userInfo, payflowConnectionData, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo      UserInfo             - User Info object populated with user credentials.\r\n     * @param recurringInfo RecurringInfo   - Recurring Info object.\r\n     * @param requestId     String              - Request Id\r\n     *                      <p/>\r\n     *                      RecurringModifyTransaction is used to modify any profile value by\r\n     *                      sending any subset of the profile parameters, including an Optional Transaction.\r\n     *                      The Modify action is useful, for example, when an inactive customer wishes to\r\n     *                      restart payments using a new valid credit card. The Modify action changes a\r\n     *                      profile's STATUS to active but does not change the START date.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringModifyTransaction.\r\n     * RecurringModifyTransaction trans = new RecurringModifyTransaction(user,  recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n\r\n    public RecurringModifyTransaction(UserInfo userInfo,\r\n                                      RecurringInfo recurringInfo, String requestId) {\r\n        this(userInfo, null, recurringInfo, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              UserInfo             - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param recurringInfo         RecurringInfo   - Recurring Info object.\r\n     * @param invoice               Invoice               - Invoice object.\r\n     * @param tender                Tender                 - Tender object such as  Card Tender.\r\n     * @param requestId             String              - Request Id\r\n     *                              <p/>\r\n     *                              RecurringModifyTransaction is used to modify any profile value by\r\n     *                              sending any subset of the profile parameters, including an Optional Transaction.\r\n     *                              The Modify action is useful, for example, when an inactive customer wishes to\r\n     *                              restart payments using a new valid credit card. The Modify action changes a\r\n     *                              profile's STATUS to active but does not change the START date.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringModifyTransaction.\r\n     * RecurringModifyTransaction trans = new RecurringModifyTransaction(user, connection, recurInfo, inv, tender\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringModifyTransaction(UserInfo userInfo,\r\n                                      PayflowConnectionData payflowConnectionData,\r\n                                      RecurringInfo recurringInfo,\r\n                                      Invoice invoice,\r\n                                      BaseTender tender, String requestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_MODIFY,\r\n                recurringInfo,\r\n                userInfo, payflowConnectionData,\r\n                invoice,\r\n                tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo      UserInfo             - User Info object populated with user credentials.\r\n     * @param recurringInfo RecurringInfo   - Recurring Info object.\r\n     * @param invoice       Invoice               - Invoice object.\r\n     * @param tender        Tender                 - Tender object such as  Card Tender.\r\n     * @param requestId     String              - Request Id\r\n     *                      <p/>\r\n     *                      <p/>\r\n     *                      RecurringModifyTransaction is used to modify any profile value by\r\n     *                      sending any subset of the profile parameters, including an Optional Transaction.\r\n     *                      The Modify action is useful, for example, when an inactive customer wishes to\r\n     *                      restart payments using a new valid credit card. The Modify action changes a\r\n     *                      profile's STATUS to active but does not change the START date.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringModifyTransaction.\r\n     * RecurringModifyTransaction trans = new RecurringModifyTransaction(user, recurInfo, inv, tender\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    public RecurringModifyTransaction(UserInfo userInfo,\r\n                                      RecurringInfo recurringInfo,\r\n                                      Invoice invoice,\r\n                                      BaseTender tender, String requestId) {\r\n        this(userInfo, null, recurringInfo,\r\n                invoice,\r\n                tender, requestId);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/RecurringModifyTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/RecurringModifyTransaction.java	(date 1600063101933)
@@ -1,33 +1,33 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a recurring transaction with
  * modify action.
- * <p/>
+ *
  * RecurringModifyTransaction is used to modify any profile value by
  * sending any subset of the profile parameters, including an Optional Transaction.
  * The Modify action is useful, for example, when an inactive customer wishes to
  * restart payments using a new valid credit card. The Modify action changes a
  * profiles STATUS to active but does not change the START date.
- * </p>
  *
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *
  * //Set the Recurring related information.
  * RecurringInfo recurInfo = new RecurringInfo();
  * recurInfo.setOrigProfileId ("RT0000001350");
  * recurInfo.setProfileName ("PayPal Inc.");
  * ////////////////////////////////////
- * <p/>
+ *
  * // Create a new Recurring modify Transaction.
  * RecurringModifyTransaction trans = new RecurringModifyTransaction(
  * user, connection, recurInfo, PayflowUtility.getRequestId());
- * <p/>
+ *
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *
  * if (Resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -37,7 +37,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
+ *
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -48,12 +48,13 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("/n" + "Errors = " + Ctx.ToString());
  * }
+ * }
+ * </pre>
  */
-
 
 public class RecurringModifyTransaction extends RecurringTransaction {
 
@@ -64,7 +65,7 @@
      * @param payflowConnectionData PayflowConnectionData - Connection credentials object.
      * @param recurringInfo         RecurringInfo   - Recurring Info object.
      * @param requestId             String              - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              RecurringModifyTransaction is used to modify any profile value by
      *                              sending any subset of the profile parameters, including an Optional Transaction.
      *                              The Modify action is useful, for example, when an inactive customer wishes to
@@ -74,12 +75,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringModifyTransaction.
      * RecurringModifyTransaction trans = new RecurringModifyTransaction(user, connection, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -99,7 +99,7 @@
      * @param userInfo      UserInfo             - User Info object populated with user credentials.
      * @param recurringInfo RecurringInfo   - Recurring Info object.
      * @param requestId     String              - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      RecurringModifyTransaction is used to modify any profile value by
      *                      sending any subset of the profile parameters, including an Optional Transaction.
      *                      The Modify action is useful, for example, when an inactive customer wishes to
@@ -109,12 +109,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringModifyTransaction.
      * RecurringModifyTransaction trans = new RecurringModifyTransaction(user,  recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -134,7 +133,7 @@
      * @param invoice               Invoice               - Invoice object.
      * @param tender                Tender                 - Tender object such as  Card Tender.
      * @param requestId             String              - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              RecurringModifyTransaction is used to modify any profile value by
      *                              sending any subset of the profile parameters, including an Optional Transaction.
      *                              The Modify action is useful, for example, when an inactive customer wishes to
@@ -144,12 +143,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringModifyTransaction.
      * RecurringModifyTransaction trans = new RecurringModifyTransaction(user, connection, recurInfo, inv, tender
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -174,8 +172,7 @@
      * @param invoice       Invoice               - Invoice object.
      * @param tender        Tender                 - Tender object such as  Card Tender.
      * @param requestId     String              - Request Id
-     *                      <p/>
-     *                      <p/>
+     *                       * <p>
      *                      RecurringModifyTransaction is used to modify any profile value by
      *                      sending any subset of the profile parameters, including an Optional Transaction.
      *                      The Modify action is useful, for example, when an inactive customer wishes to
@@ -185,12 +182,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringModifyTransaction.
      * RecurringModifyTransaction trans = new RecurringModifyTransaction(user, recurInfo, inv, tender
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
Index: src/sdk/transactions/paypal/payflow/BuyerAuthVETransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n/**\r\n * This class is used to create and perform\r\n * a Verify Enrollment transaction.\r\n * Verify Enrollment is the first step of Buyer authentication process.\r\n * <p/>\r\n * After a successful Verify Enrollment Transaction,\r\n * you should redirect the user's browser to his/her banks\r\n * secure authentication server which will authenticate the user.\r\n * While redirecting to this secure authentication server,\r\n * you must pass the parameter PaReq obtained in the response of this transaction.\r\n * For more information, please refer to the Payflow Developers' Guide.\r\n * </p>\r\n *\r\n *  This example shows how to create and perform a Verify Enrollment transaction.\r\n * <p/>\r\n * ..........\r\n * ..........\r\n * //Populate required data objects.\r\n * <p/>\r\n * //Create the Card object.\r\n * CreditCard card = new CreditCard(\"XXXXXXXXXXXXXXXX\",\"XXXX\");\r\n * <p/>\r\n * //Create the currency object.\r\n * Currency amt = new Currency(new decimal(1.00),\"US\");\r\n * ..........\r\n * ..........\r\n * <p/>\r\n * //Create a new Verify Enrollment Transaction.\r\n * BuyerAuthVETransaction trans = new BuyerAuthVETransaction(\r\n * UserInfo,\r\n * PayflowConnectionData,\r\n * Card,\r\n * Amt,\r\n * RequestId);\r\n * //Submit the transaction.\r\n * trans.SubmitTransaction();\r\n * <p/>\r\n * // Get the Response.\r\n * Response resp = trans.getResponse();\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * <p/>\r\n * // Get the Buyer auth Response parameters.\r\n * BuyerAuthResponse bAResponse = resp.getBuyerAuthResponse();\r\n * if (bAResponse != null)\r\n * {\r\n * System.out.println(\"AUTHENTICATION_STATUS = \" + bAResponse.getAuthenticationStatus());\r\n * System.out.println(\"AUTHENTICATION_ID = \" + bAResponse.getAuthenticationId());\r\n * System.out.println(\"ACSURL = \" + bAResponse.getAcsUrl());\r\n * System.out.println(\"PAREQ = \" + bAResponse.getPaReq());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null ++ ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + Ctx.ToString());\r\n * }\r\n */\r\npublic final class BuyerAuthVETransaction extends BuyerAuthTransaction {\r\n    /**\r\n     * Holds the currency value, mandatory for VE.\r\n     */\r\n    private Currency currency;\r\n\r\n    /**\r\n     * Holds the Purchase Description.\r\n     */\r\n    private String purDesc;\r\n\r\n    private CreditCard creditcard;\r\n\r\n    /**\r\n     * Gets, Sets Purchase description.\r\n     * <para>Maps to Payflow Parameter - <code>PUR_DESC</code></para>\r\n     *\r\n     * @return purDesc\r\n     */\r\n    public String getPurDesc() {\r\n        return purDesc;\r\n    }\r\n\r\n    /**\r\n     * @param purDesc String\r\n     */\r\n    public void setPurDesc(String purDesc) {\r\n        this.purDesc = purDesc;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo              - User Info object populated with user credentials.\r\n     * @param creditCard            - Credit card information for the user.\r\n     * @param payflowConnectionData - Connection credentials object.\r\n     * @param currency              - Currency value\r\n     * @param requestId             - String\r\n     *                              <p>After a successful Verify Enrollment Transaction,\r\n     *                              you should redirect the user's browser to his/her banks\r\n     *                              secure authentication server which will authenticate the user.\r\n     *                              While redirecting to this secure authentication server,\r\n     *                              you must pass the parameter PaReq obtained in the response of this transaction.\r\n     *                              </p>\r\n     */\r\n    public BuyerAuthVETransaction(UserInfo userInfo, CreditCard creditCard, PayflowConnectionData payflowConnectionData, Currency currency, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_BUYERAUTH_VE, userInfo, payflowConnectionData, requestId);\r\n        this.currency = currency;\r\n        purDesc = getPurDesc();\r\n        creditcard = creditCard;\r\n\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo   UserInfo object populated with user credentials.\r\n     * @param creditCard Credit card information for the user.\r\n     * @param currency   Currency value\r\n     * @param requestId  String\r\n     *                   <p>After a successful Verify Enrollment Transaction,\r\n     *                   you should redirect the user's browser to his/her browser to the\r\n     *                   secure authentication server which will authenticate the user.\r\n     *                   While redirecting to this secure authentication server,\r\n     *                   you must pass the parameter PaReq obtained in the response of this transaction.\r\n     *                   </p>\r\n     */\r\n    public BuyerAuthVETransaction(UserInfo userInfo, CreditCard creditCard, Currency currency, String requestId) {\r\n        this(userInfo, creditCard, null, currency, requestId);\r\n    }\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n\r\n        super.generateRequest();\r\n        if (creditcard != null) {\r\n            creditcard.setRequestBuffer(getRequestBuffer());\r\n            creditcard.generateRequest();\r\n        }\r\n\r\n        if (currency != null) {\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CURRENCY, currency.getCurrencyCode()));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_AMT, currency));\r\n        }\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PUR_DESC, purDesc));\r\n\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/BuyerAuthVETransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/BuyerAuthVETransaction.java	(date 1600059185529)
@@ -5,7 +5,7 @@
  * This class is used to create and perform
  * a Verify Enrollment transaction.
  * Verify Enrollment is the first step of Buyer authentication process.
- * <p/>
+ *  * <p>
  * After a successful Verify Enrollment Transaction,
  * you should redirect the user's browser to his/her banks
  * secure authentication server which will authenticate the user.
@@ -15,19 +15,19 @@
  * </p>
  *
  *  This example shows how to create and perform a Verify Enrollment transaction.
- * <p/>
+ *  * <p>
  * ..........
  * ..........
  * //Populate required data objects.
- * <p/>
+ *  * <p>
  * //Create the Card object.
  * CreditCard card = new CreditCard("XXXXXXXXXXXXXXXX","XXXX");
- * <p/>
+ *  * <p>
  * //Create the currency object.
  * Currency amt = new Currency(new decimal(1.00),"US");
  * ..........
  * ..........
- * <p/>
+ *  * <p>
  * //Create a new Verify Enrollment Transaction.
  * BuyerAuthVETransaction trans = new BuyerAuthVETransaction(
  * UserInfo,
@@ -37,7 +37,7 @@
  * RequestId);
  * //Submit the transaction.
  * trans.SubmitTransaction();
- * <p/>
+ *  * <p>
  * // Get the Response.
  * Response resp = trans.getResponse();
  * if (Resp != null)
@@ -49,8 +49,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
- * <p/>
+ *  * <p>
  * // Get the Buyer auth Response parameters.
  * BuyerAuthResponse bAResponse = resp.getBuyerAuthResponse();
  * if (bAResponse != null)
@@ -63,7 +62,7 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null ++ ctx.getErrorCount() > 0)
+ * if (ctx != null ++ ctx.getErrorCount() %3E 0)
  * {
  * System.out.println("Errors = " + Ctx.ToString());
  * }
@@ -83,7 +82,7 @@
 
     /**
      * Gets, Sets Purchase description.
-     * <para>Maps to Payflow Parameter - <code>PUR_DESC</code></para>
+     * <p>Maps to Payflow Parameter - <code>PUR_DESC</code></p>
      *
      * @return purDesc
      */
Index: src/sdk/transactions/paypal/payflow/VoiceAuthTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a voice authorization transaction.\r\n * <p/>\r\n * Some transactions cannot be authorized over the Internet (for example, high dollar\r\n * amounts)'processing networks generate Referral (Result Code 13) transactions.\r\n * In these situations, contact the customer service department of the\r\n * merchant bank and provide the payment information as requested.\r\n * If the transaction is approved, the bank provides a voice authorization\r\n * code (AUTHCODE) for the transaction. This must be included as AUTHCODE\r\n * as part of a Voice Authorization transaction.\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * // Create a new Voice Auth Transaction.\r\n * VoiceAuthTransaction trans = new VoiceAuthTransaction(\"123PNI\",\r\n * user, connection, inv, card, PayflowUtility.RequestId);\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse = resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.toString());\r\n * }\r\n */\r\npublic final class VoiceAuthTransaction extends BaseTransaction {\r\n\r\n    private String mAuthCode;\r\n    private String mAuthDate;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param AuthCode              - Required for Voice Authorization.\r\n     * @param UserInfo              - User Info object populated with user credentials.\r\n     * @param PayflowConnectionData - Connection credentials object.\r\n     * @param Invoice               - Invoice Object.\r\n     * @param Tender                - Tender object such as  Card Tender.\r\n     * @param RequestId             - Request Id\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Void Transaction.\r\n     * VoiceAuthTransaction trans = new VoidTransaction(\"123PNI\",\r\n     * user, connection, inv, tender, payflowUtility.getRequestId());\r\n     */\r\n\r\n    public VoiceAuthTransaction(String AuthCode, UserInfo UserInfo,\r\n                                PayflowConnectionData PayflowConnectionData, Invoice Invoice,\r\n                                BaseTender Tender, String RequestId) {\r\n        super(PayflowConstants.TRXTYPE_VOICEAUTH, UserInfo,\r\n                PayflowConnectionData, Invoice,\r\n                Tender, RequestId);\r\n        mAuthCode = AuthCode;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param AuthCode              - Authorization code obtain via another means; i.e. phone.\r\n     * @param AuthDate              - Date the AuthCode was obtained.\r\n     * @param UserInfo              - User Info object populated with user credentials.\r\n     * @param PayflowConnectionData - Connection credentials object.\r\n     * @param Invoice               - Invoice Object.\r\n     * @param Tender                - Tender object such as  Card Tender.\r\n     * @param RequestId             - Request Id\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Void Transaction.\r\n     * VoiceAuthTransaction trans = new VoidTransaction(\"123PNI\", \"082120\", user,\r\n     *  connection, inv, tender, payflowUtility.getRequestId());\r\n     */\r\n\r\n    public VoiceAuthTransaction(String AuthCode, String AuthDate, UserInfo UserInfo,\r\n                                PayflowConnectionData PayflowConnectionData, Invoice Invoice,\r\n                                BaseTender Tender, String RequestId) {\r\n        super(PayflowConstants.TRXTYPE_VOICEAUTH, UserInfo,\r\n                PayflowConnectionData, Invoice,\r\n                Tender, RequestId);\r\n        mAuthCode = AuthCode;\r\n        mAuthDate = AuthDate;\r\n    }\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param AuthCode  - mandatory for Voice auth transaction.\r\n     * @param UserInfo  - User Info object populated with user credentials.\r\n     * @param Invoice   - Invoice Object.\r\n     * @param Tender    - Tender object such as  Card Tender.\r\n     * @param RequestId - Request Id\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Void Transaction.\r\n     * VoiceAuthTransaction trans = new VoidTransaction(\"123PNI\",\r\n     * user, inv, tender, payflowUtility.getRequestId());\r\n     */\r\n\r\n\r\n    public VoiceAuthTransaction(String AuthCode, UserInfo UserInfo,\r\n                                Invoice Invoice,\r\n                                BaseTender Tender, String RequestId) {\r\n        this(AuthCode, UserInfo,\r\n                null, Invoice,\r\n                Tender, RequestId);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_AUTHCODE, mAuthCode));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_AUTHDATE, mAuthDate));\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/VoiceAuthTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/VoiceAuthTransaction.java	(date 1600063807872)
@@ -1,21 +1,22 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a voice authorization transaction.
- * <p/>
+ *
  * Some transactions cannot be authorized over the Internet (for example, high dollar
  * amounts)'processing networks generate Referral (Result Code 13) transactions.
  * In these situations, contact the customer service department of the
  * merchant bank and provide the payment information as requested.
+ *
  * If the transaction is approved, the bank provides a voice authorization
  * code (AUTHCODE) for the transaction. This must be included as AUTHCODE
  * as part of a Voice Authorization transaction.
- * </p>
  *
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *
  * // Create a new Voice Auth Transaction.
  * VoiceAuthTransaction trans = new VoiceAuthTransaction("123PNI",
  * user, connection, inv, card, PayflowUtility.RequestId);
@@ -32,13 +33,15 @@
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
  * }
- * <p/>
+ *
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("Errors = " + ctx.toString());
  * }
+ * }
+ * </pre>
  */
 public final class VoiceAuthTransaction extends BaseTransaction {
 
@@ -57,7 +60,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Void Transaction.
      * VoiceAuthTransaction trans = new VoidTransaction("123PNI",
      * user, connection, inv, tender, payflowUtility.getRequestId());
@@ -85,7 +88,6 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
      * // Create a new Void Transaction.
      * VoiceAuthTransaction trans = new VoidTransaction("123PNI", "082120", user,
      *  connection, inv, tender, payflowUtility.getRequestId());
@@ -113,7 +115,6 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
      * // Create a new Void Transaction.
      * VoiceAuthTransaction trans = new VoidTransaction("123PNI",
      * user, inv, tender, payflowUtility.getRequestId());
Index: src/sdk/transactions/paypal/payflow/RecurringTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This is the base class of all different recurring action transactions.\r\n * <p/>\r\n * Each derived class of RecurringTransaction specifies a unique action\r\n * transaction. This class can also be directly used to perform a recurring\r\n * transaction. Alternatively, a new class can be extended from this to\r\n * create a specific recurring action transaction.\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * //Set the Recurring related information.\r\n * recurringInfo recurInfo = new recurringInfo();\r\n * // The date that the first payment will be processed.\r\n * // This will be of the format mmddyyyy.\r\n * recurInfo.setStart(\"01012009\");\r\n * recurInfo.setProfileName (\"PayPal\");\r\n * // Specifies how often the payment occurs. All PAYPERIOD values must use\r\n * // capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /\r\n * // QTER / SMYR / YEAR\r\n * recurInfo.setPayPeriod (\"WEEK\");\r\n * //////////////////////////////////////////////////\r\n * <p/>\r\n * // Create a new Recurring Transaction.\r\n * RecurringTransaction trans = new RecurringTransaction(\"A\", recurInfo,\r\n * user, connection, inv, tender, payflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.ToString());\r\n * }\r\n */\r\n\r\npublic class RecurringTransaction extends BaseTransaction {\r\n\r\n    private String action;\r\n\r\n    private RecurringInfo recurringInfo;\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param action                String                - action, type of recurring transaction\r\n     * @param recurringInfo         RecurringInfo         - Recurring Info object.\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param requestId             String             - Request Id\r\n     *                              <p/>\r\n     *                              Each derived class of RecurringTransaction specifies a unique action\r\n     *                              transaction. This class can also be directly used to perform a recurring\r\n     *                              transaction. Alternatively, a new class can be extended from this to\r\n     *                              create a specific recurring action transaction.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new Recurring Transaction.\r\n     * RecurringTransaction trans = new RecurringTransaction(\"A\", recurInfo,\r\n     * user, connection, payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    public RecurringTransaction(String action,\r\n                                RecurringInfo recurringInfo,\r\n                                UserInfo userInfo,\r\n                                PayflowConnectionData payflowConnectionData, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_RECURRING,\r\n                userInfo, payflowConnectionData, requestId);\r\n        if (recurringInfo != null) {\r\n            this.recurringInfo = recurringInfo;\r\n            this.recurringInfo.setContext(super.getContext());\r\n        }\r\n        this.action = action;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param action        String        - action, type of recurring transaction\r\n     * @param recurringInfo RecurringInfo - Recurring Info object.\r\n     * @param userInfo      UserInfo      - User Info object populated with user credentials.\r\n     * @param requestId     String     - Request Id\r\n     *                      <p/>\r\n     *                      Each derived class of RecurringTransaction specifies a unique action\r\n     *                      transaction. This class can also be directly used to perform a recurring\r\n     *                      transaction. Alternatively, a new class can be extended from this to\r\n     *                      create a specific recurring action transaction.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new Recurring Transaction.\r\n     * RecurringTransaction trans = new RecurringTransaction(\"A\", recurInfo,\r\n     * user,  payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    public RecurringTransaction(String action,\r\n                                RecurringInfo recurringInfo,\r\n                                UserInfo userInfo,\r\n                                String requestId) {\r\n        super(PayflowConstants.TRXTYPE_RECURRING,\r\n                userInfo, requestId);\r\n        if (recurringInfo != null) {\r\n            this.recurringInfo = recurringInfo;\r\n            this.recurringInfo.setContext(super.getContext());\r\n        }\r\n        this.action = action;\r\n    }\r\n\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param action                String                - action, type of recurring transaction\r\n     * @param recurringInfo         RecurringInfo         - Recurring Info object.\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param invoice               Invoice              - Invoice Object.\r\n     * @param requestId             String             - Request Id\r\n     *                              <p/>\r\n     *                              Each derived class of RecurringTransaction specifies a unique action\r\n     *                              transaction. This class can also be directly used to perform a recurring\r\n     *                              transaction. Alternatively, a new class can be extended from this to\r\n     *                              create a specific recurring action transaction.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new Recurring Transaction.\r\n     * RecurringTransaction trans = new RecurringTransaction(\"A\", recurInfo,\r\n     * user, connection, invoice, payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringTransaction(String action,\r\n                                RecurringInfo recurringInfo,\r\n                                UserInfo userInfo,\r\n                                PayflowConnectionData payflowConnectionData,\r\n                                Invoice invoice, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_RECURRING,\r\n                userInfo, payflowConnectionData, invoice, requestId);\r\n        if (recurringInfo != null) {\r\n            this.recurringInfo = recurringInfo;\r\n            this.recurringInfo.setContext(super.getContext());\r\n        }\r\n        this.action = action;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param action        String        - action, type of recurring transaction\r\n     * @param recurringInfo RecurringInfo - Recurring Info object.\r\n     * @param userInfo      UserInfo      - User Info object populated with user credentials.\r\n     * @param invoice       Invoice       - Invoice Object.\r\n     * @param requestId     String     - Request Id\r\n     *                      <p/>\r\n     *                      Each derived class of RecurringTransaction specifies a unique action\r\n     *                      transaction. This class can also be directly used to perform a recurring\r\n     *                      transaction. Alternatively, a new class can be extended from this to\r\n     *                      create a specific recurring action transaction.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new Recurring Transaction.\r\n     * RecurringTransaction trans = new RecurringTransaction(\"A\", recurInfo,\r\n     * user, invoice, payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringTransaction(String action,\r\n                                RecurringInfo recurringInfo,\r\n                                UserInfo userInfo,\r\n                                Invoice invoice, String requestId) {\r\n        this(action, recurringInfo, userInfo, null, invoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param action                String                - action, type of recurring transaction\r\n     * @param recurringInfo         RecurringInfo         - Recurring Info object.\r\n     * @param userInfo              UserInfo            - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param invoice               Invoice               - Invoice object.\r\n     * @param tender                Tender                - Tender\r\n     * @param RequestId             - Request Id\r\n     *                              <p/>\r\n     *                              Each derived class of RecurringTransaction specifies a unique action\r\n     *                              transaction. This class can also be directly used to perform a recurring\r\n     *                              transaction. Alternatively, a new class can be extended from this to\r\n     *                              create a specific recurring action transaction.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new Recurring Transaction.\r\n     * RecurringTransaction trans = new RecurringTransaction(\"A\", recurInfo,\r\n     * user, connection, invoice, tender, payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringTransaction(String action,\r\n                                RecurringInfo recurringInfo,\r\n                                UserInfo userInfo,\r\n                                PayflowConnectionData payflowConnectionData,\r\n                                Invoice invoice,\r\n                                BaseTender tender, String RequestId) {\r\n        super(PayflowConstants.TRXTYPE_RECURRING,\r\n                userInfo, payflowConnectionData, invoice,\r\n                tender, RequestId);\r\n        if (recurringInfo != null) {\r\n            this.recurringInfo = recurringInfo;\r\n            this.recurringInfo.setContext(super.getContext());\r\n        }\r\n        this.action = action;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param action        String        - action, type of recurring transaction\r\n     * @param recurringInfo RecurringInfo - Recurring Info object.\r\n     * @param userInfo      UserInfo      - User Info object populated with user credentials.\r\n     * @param invoice       Invoice       - Invoice object.\r\n     * @param tender        Tender        - Tender\r\n     * @param requestId     String     - Request Id\r\n     *                      <p/>\r\n     *                      Each derived class of RecurringTransaction specifies a unique action\r\n     *                      transaction. This class can also be directly used to perform a recurring\r\n     *                      transaction. Alternatively, a new class can be extended from this to\r\n     *                      create a specific recurring action transaction.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new Recurring Transaction.\r\n     * RecurringTransaction trans = new RecurringTransaction(\"A\", recurInfo,\r\n     * user, invoice, tender, payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringTransaction(String action,\r\n                                RecurringInfo recurringInfo,\r\n                                UserInfo userInfo,\r\n                                Invoice invoice,\r\n                                BaseTender tender, String requestId) {\r\n        this(action, recurringInfo,\r\n                userInfo, null, invoice,\r\n                tender, requestId);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ACTION, action));\r\n        if (recurringInfo != null) {\r\n            recurringInfo.setRequestBuffer(getRequestBuffer());\r\n            recurringInfo.generateRequest();\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/RecurringTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/RecurringTransaction.java	(date 1600063286391)
@@ -1,8 +1,9 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This is the base class of all different recurring action transactions.
- * <p/>
+ *
  * Each derived class of RecurringTransaction specifies a unique action
  * transaction. This class can also be directly used to perform a recurring
  * transaction. Alternatively, a new class can be extended from this to
@@ -12,7 +13,7 @@
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *
  * //Set the Recurring related information.
  * recurringInfo recurInfo = new recurringInfo();
  * // The date that the first payment will be processed.
@@ -24,14 +25,14 @@
  * // QTER / SMYR / YEAR
  * recurInfo.setPayPeriod ("WEEK");
  * //////////////////////////////////////////////////
- * <p/>
+ *
  * // Create a new Recurring Transaction.
  * RecurringTransaction trans = new RecurringTransaction("A", recurInfo,
  * user, connection, inv, tender, payflowUtility.getRequestId());
- * <p/>
+ *
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *
  * if (resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -41,7 +42,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
+ *
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -50,13 +51,15 @@
  * System.out.println("PROFILEID = " + recurResponse.getProfileId());
  * }
  * }
- * <p/>
+ *
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("Errors = " + ctx.ToString());
  * }
+ * }
+ * </pre>
  */
 
 public class RecurringTransaction extends BaseTransaction {
@@ -73,7 +76,7 @@
      * @param userInfo              UserInfo              - User Info object populated with user credentials.
      * @param payflowConnectionData PayflowConnectionData - Connection credentials object.
      * @param requestId             String             - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              Each derived class of RecurringTransaction specifies a unique action
      *                              transaction. This class can also be directly used to perform a recurring
      *                              transaction. Alternatively, a new class can be extended from this to
@@ -82,12 +85,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new Recurring Transaction.
      * RecurringTransaction trans = new RecurringTransaction("A", recurInfo,
      * user, connection, payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -111,7 +113,7 @@
      * @param recurringInfo RecurringInfo - Recurring Info object.
      * @param userInfo      UserInfo      - User Info object populated with user credentials.
      * @param requestId     String     - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      Each derived class of RecurringTransaction specifies a unique action
      *                      transaction. This class can also be directly used to perform a recurring
      *                      transaction. Alternatively, a new class can be extended from this to
@@ -120,12 +122,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new Recurring Transaction.
      * RecurringTransaction trans = new RecurringTransaction("A", recurInfo,
      * user,  payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -152,7 +153,7 @@
      * @param payflowConnectionData PayflowConnectionData - Connection credentials object.
      * @param invoice               Invoice              - Invoice Object.
      * @param requestId             String             - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              Each derived class of RecurringTransaction specifies a unique action
      *                              transaction. This class can also be directly used to perform a recurring
      *                              transaction. Alternatively, a new class can be extended from this to
@@ -161,12 +162,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new Recurring Transaction.
      * RecurringTransaction trans = new RecurringTransaction("A", recurInfo,
      * user, connection, invoice, payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -193,7 +193,7 @@
      * @param userInfo      UserInfo      - User Info object populated with user credentials.
      * @param invoice       Invoice       - Invoice Object.
      * @param requestId     String     - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      Each derived class of RecurringTransaction specifies a unique action
      *                      transaction. This class can also be directly used to perform a recurring
      *                      transaction. Alternatively, a new class can be extended from this to
@@ -202,12 +202,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new Recurring Transaction.
      * RecurringTransaction trans = new RecurringTransaction("A", recurInfo,
      * user, invoice, payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -229,7 +228,7 @@
      * @param invoice               Invoice               - Invoice object.
      * @param tender                Tender                - Tender
      * @param RequestId             - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              Each derived class of RecurringTransaction specifies a unique action
      *                              transaction. This class can also be directly used to perform a recurring
      *                              transaction. Alternatively, a new class can be extended from this to
@@ -238,12 +237,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new Recurring Transaction.
      * RecurringTransaction trans = new RecurringTransaction("A", recurInfo,
      * user, connection, invoice, tender, payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -273,7 +271,7 @@
      * @param invoice       Invoice       - Invoice object.
      * @param tender        Tender        - Tender
      * @param requestId     String     - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      Each derived class of RecurringTransaction specifies a unique action
      *                      transaction. This class can also be directly used to perform a recurring
      *                      transaction. Alternatively, a new class can be extended from this to
@@ -282,12 +280,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new Recurring Transaction.
      * RecurringTransaction trans = new RecurringTransaction("A", recurInfo,
      * user, invoice, tender, payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
Index: src/sdk/dataobjects/paypal/payflow/MagTekInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * Used for Magtek related information.\r\n * <p>\r\n * Use the MagtekInfo object for the Magtek\r\n * encrypted card reader related information.</remarks>\r\n * <p>\r\n * Following example shows how to use the MagtekInfo object.\r\n * <p>\r\n * // Swipe is the SwipeCard object\r\n */\r\npublic final class MagTekInfo extends BaseRequestDataObject {\r\n\r\n    private String encMP;\r\n    private String encryptionBlockType;\r\n    private String encTrack1;\r\n    private String encTrack2;\r\n    private String encTrack3;\r\n    private String ksn;\r\n    private String magtekCardType;\r\n    private String mpStatus;\r\n    private String registeredBy;\r\n    private String swipedECRHost;\r\n    private String deviceSN;\r\n    private String merchantId;\r\n    private String pan4;\r\n    private String pCode;\r\n    private String authValue1;\r\n    private String authValue2;\r\n    private String authValue3;\r\n    private String magtekUserName;\r\n    private String magtekPassword;\r\n\r\n    /**\r\n     * Constructor\r\n     * <p>Use this class to set the MagTek related information. Used for encrypted swipe.</p>\r\n     */\r\n\r\n    public MagTekInfo() {\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        try {\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_ENCMP, encMP));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_ENCRYPTIONBLOCKTYPE, encryptionBlockType));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_ENCTRACK1, encTrack1));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_ENCTRACK2, encTrack2));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_ENCTRACK3, encTrack3));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_KSN, ksn));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_MAGTEKCARDTYPE, magtekCardType));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_REGISTEREDBY, registeredBy));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_SWIPEDECRHOST, swipedECRHost));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_DEVICESN, deviceSN));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_MPSTATUS, mpStatus));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_PAN4, pan4));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_MERCHANTID, merchantId));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_PCODE, pCode));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_AUTHVALUE1, authValue1));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_AUTHVALUE2, authValue2));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_AUTHVALUE3, authValue3));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_MAGTEKUSERNAME, magtekUserName));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.MAGTEK_PARAM_MAGTEKPWD, magtekPassword));\r\n\r\n\r\n        } catch (Exception ex) {\r\n            ErrorObject err = new ErrorObject(PayflowConstants.SEVERITY_FATAL, \"\", ex.toString());\r\n            if (getContext() != null) {\r\n                getContext().addError(err);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the encrypted MagnePrint information.\r\n     *\r\n     * @return encMP String\r\n     * <p>Maps to Payflow Parameter: ENCMP</p>\r\n     */\r\n    public String getEncMP() {\r\n        return encMP;\r\n    }\r\n\r\n    /**\r\n     * Sets the encrypted MagnePrint information.\r\n     *\r\n     * @param encMP String\r\n     * <p>Maps to Payflow Parameter: ENCMP</p>\r\n     */\r\n    public void setEncMP(String encMP) {\r\n        this.encMP = encMP;\r\n    }\r\n\r\n    /**\r\n     * Gets the Encryption Block Type\r\n     *\r\n     * @return encryptionBlockType String\r\n     * <p>Maps to Payflow Parameter: ENCRYPTIONBLOCKTYPE</p>\r\n     */\r\n    public String getEncryptionBlockTyp() {\r\n        return encryptionBlockType;\r\n    }\r\n\r\n    /**\r\n     * Sets the Encryption Block Type\r\n     *\r\n     * @param encryptionBlockType String\r\n     * <p>Maps to Payflow Parameter: ENCRYPTIONBLOCKTYPE</p>\r\n     */\r\n    public void setEncryptionBlockType(String encryptionBlockType) {\r\n        this.encryptionBlockType = encryptionBlockType;\r\n    }\r\n\r\n    /**\r\n     * Gets the Encrypted Track 1\r\n     *\r\n     * @return encTrack1 String\r\n     * <p>Maps to Payflow Parameter: ENCTRACK1</p>\r\n     */\r\n    public String getEncTrack1() {\r\n        return encTrack1;\r\n    }\r\n\r\n    /**\r\n     * Sets the Encrypted Track 1\r\n     *\r\n     * @param encTrack1 String\r\n     * <p>Maps to Payflow Parameter: ENCTRACK1</p>\r\n     */\r\n    public void setEncTrack1(String encTrack1) {\r\n        this.encTrack1 = encTrack1;\r\n    }\r\n\r\n    /**\r\n     * Gets the Encrypted Track 2\r\n     *\r\n     * @return encTrack2 String\r\n     * <p>Maps to Payflow Parameter: ENCTRACK2</p>\r\n     */\r\n    public String getEncTrack2() {\r\n        return encTrack2;\r\n    }\r\n\r\n    /**\r\n     * Sets the Encrypted Track 2\r\n     *\r\n     * @param encTrack2 String\r\n     * <p>Maps to Payflow Parameter: ENCTRACK2</p>\r\n     */\r\n    public void setEncTrack2(String encTrack2) {\r\n        this.encTrack2 = encTrack2;\r\n    }\r\n\r\n    /**\r\n     * Gets the Encrypted Track 3\r\n     *\r\n     * @return encTrack3 String\r\n     * <p>Maps to Payflow Parameter: ENCTRACK3</p>\r\n     */\r\n    public String getEncTrack3() {\r\n        return encTrack3;\r\n    }\r\n\r\n    /**\r\n     * Sets the Encrypted Track 3\r\n     *\r\n     * @param encTrack3 String\r\n     * <p>Maps to Payflow Parameter: ENCTRACK3</p>\r\n     */\r\n    public void setEncTrack3(String encTrack3) {\r\n        this.encTrack3 = encTrack3;\r\n    }\r\n\r\n    /**\r\n     * Gets the KSN.\r\n     *\r\n     * @return ksn String\r\n     * <p>Maps to Payflow Parameter: KSN</p>\r\n     */\r\n    public String getKsn() {\r\n        return ksn;\r\n    }\r\n\r\n    /**\r\n     * Sets the KSN.\r\n     *\r\n     * @param ksn String\r\n     * <p>Maps to Payflow Parameter: KSN</p>\r\n     */\r\n    public void setKsn(String ksn) {\r\n        this.ksn = ksn;\r\n    }\r\n\r\n    /**\r\n     * Gets the MagTek Card Type\r\n     *\r\n     * @return magtekCardType String\r\n     * <p>Maps to Payflow Parameter: MAGTEKCARDTYPE</p>\r\n     */\r\n    public String getMagtekCardType() {\r\n        return magtekCardType;\r\n    }\r\n\r\n    /**\r\n     * Sets the MagTek Card Type.\r\n     *\r\n     * @param magtekCardType String\r\n     * <p>Maps to Payflow Parameter: MAGTEKCARDTYPE<</p>\r\n     */\r\n    public void setMagtekCardType(String magtekCardType) {\r\n        this.magtekCardType = magtekCardType;\r\n    }\r\n\r\n    /**\r\n     * Gets the MP Status.\r\n     *\r\n     * @return mpStatus String\r\n     * <p>Maps to Payflow Parameter: MPSTATUS</p>\r\n     */\r\n    public String getMpStatus() {\r\n        return mpStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets the MP Status.\r\n     *\r\n     * @param mpStatus String\r\n     * <p>Maps to Payflow Parameter: MPSTATUS</p>\r\n     */\r\n    public void setMpStatus(String mpStatus) {\r\n        this.mpStatus = mpStatus;\r\n    }\r\n\r\n    /**\r\n     * Gets the Registerd By.\r\n     *\r\n     * @return registeredBy String\r\n     * <p>Maps to Payflow Parameter: REGISTEREDBY</p>\r\n     */\r\n    public String getRegisteredBy() {\r\n        return registeredBy;\r\n    }\r\n\r\n    /**\r\n     * Sets the Registered By.\r\n     *\r\n     * @param registeredBy String\r\n     * <p>Maps to Payflow Parameter: REGISTEREDBY</p>\r\n     */\r\n    public void setRegisteredBy(String registeredBy) {\r\n        this.registeredBy = registeredBy;\r\n    }\r\n\r\n    /**\r\n     * Gets the Swiped ECR Host.\r\n     *\r\n     * @return swipedECRHost String\r\n     * <p>Maps to Payflow Parameter: SWIPEDECRHOST</p>\r\n     */\r\n    public String getSwipedECRHost() {\r\n        return swipedECRHost;\r\n    }\r\n\r\n    /**\r\n     * Sets the Swiped ECR Host.\r\n     *\r\n     * @param swipedECRHost String\r\n     * <p>Maps to Payflow Parameter: SWIPEDECRHOST</p>\r\n     */\r\n    public void setSwipedECRHost(String swipedECRHost) {\r\n        this.swipedECRHost = swipedECRHost;\r\n    }\r\n\r\n    /**\r\n     * Gets the Device Serial Number.\r\n     *\r\n     * @return deviceSN String\r\n     * <p>Maps to Payflow Parameter: DEVICESN</p>\r\n     */\r\n    public String getDeviceSN() {\r\n        return deviceSN;\r\n    }\r\n\r\n    /**\r\n     * Sets the Device Serial Number.\r\n     *\r\n     * @param deviceSN String\r\n     * <p>Maps to Payflow Parameter: DEVICESN</p>\r\n     */\r\n    public void setDeviceSN(String deviceSN) {\r\n        this.deviceSN = deviceSN;\r\n    }\r\n\r\n    /**\r\n     * Gets the Merchant's ID.\r\n     *\r\n     * @return merchantId String\r\n     * <p>Maps to Payflow Parameter: MERCHANTID</p>\r\n     */\r\n    public String getMerchantId() {\r\n        return merchantId;\r\n    }\r\n\r\n    /**\r\n     * Sets the Merchant's ID.\r\n     *\r\n     * @param merchantId String\r\n     * <p>Maps to Payflow Parameter: MERCHANTID</p>\r\n     */\r\n    public void setMerchantId(String merchantId) {\r\n        this.merchantId = merchantId;\r\n    }\r\n\r\n    /**\r\n     * Gets the last 4-digits of the PAN.\r\n     *\r\n     * @return pan4 String\r\n     * <p>Maps to Payflow Parameter: PAN4</p>\r\n     */\r\n    public String getPan4() {\r\n        return pan4;\r\n    }\r\n\r\n    /**\r\n     * Sets the last 4-digits of the PAN.\r\n     *\r\n     * @param pan4 String\r\n     * <p>Maps to Payflow Parameter: PAN4/p>\r\n     */\r\n    public void setPan4(String pan4) {\r\n        this.pan4 = pan4;\r\n    }\r\n\r\n    /**\r\n     * Gets the generated Protection Code.\r\n     *\r\n     * @return pCode String\r\n     * <p>Maps to Payflow Parameter: PCODE</p>\r\n     */\r\n    public String getpCode() {\r\n        return pCode;\r\n    }\r\n\r\n    /**\r\n     * Sets the generated Protection Code.\r\n     *\r\n     * @param pCode String\r\n     * <p>Maps to Payflow Parameter: PCODE</p>\r\n     */\r\n    public void setpCode(String pCode) {\r\n        this.pCode = pCode;\r\n    }\r\n\r\n    /**\r\n     * Gets the Authentication Value 1 generated with the PCode.\r\n     *\r\n     * @return authValue1; String\r\n     * <p>Maps to Payflow Parameter: AUTHVALUE1</p>\r\n     */\r\n    public String getAuthValue1() {\r\n        return authValue1;\r\n    }\r\n\r\n    /**\r\n     * Sets the Authentication Value 1 generated with the PCode.\r\n     *\r\n     * @param authValue1; String\r\n     * <p>Maps to Payflow Parameter: AUTHVALUE1</p>\r\n     */\r\n    public void setAuthValue1(String authValue1) {\r\n        this.authValue1 = authValue1;\r\n    }\r\n\r\n    /**\r\n     * Gets the Authentication Value 2 generated with the PCode.\r\n     *\r\n     * @return authValue2 String\r\n     * <p>Maps to Payflow Parameter: AUTHVALUE2</p>\r\n     */\r\n    public String getAuthValue2() {\r\n        return authValue2;\r\n    }\r\n\r\n    /**\r\n     * Sets the Authentication Value 2 generated with the PCode.\r\n     *\r\n     * @param authValue2 String\r\n     * <p>Maps to Payflow Parameter: AUTHVALUE2</p>\r\n     */\r\n    public void setAuthValue2(String authValue2) {\r\n        this.authValue2 = authValue2;\r\n    }\r\n\r\n    /**\r\n     * Gets the Authentication Value 3 generated with the PCode.\r\n     *\r\n     * @return authValue3 String\r\n     * <p>Maps to Payflow Parameter: AUTHVALUE3</p>\r\n     */\r\n    public String getAuthValue3() {\r\n        return authValue3;\r\n    }\r\n\r\n    /**\r\n     * Sets the Authentication Value 3 generated with the PCode.\r\n     *\r\n     * @param authValue3 String\r\n     * <p>Maps to Payflow Parameter: AUTHVALUE3</p>\r\n     */\r\n    public void setAuthValue3(String authValue3) {\r\n        this.authValue3 = authValue3;\r\n    }\r\n\r\n    /**\r\n     * Gets the MagTek User Name.\r\n     *\r\n     * @return magtekUserName String\r\n     * <p>Maps to Payflow Parameter: MAGTEKUSERNAME</p>\r\n     */\r\n    public String getMagtekUserName() {\r\n        return magtekUserName;\r\n    }\r\n\r\n    /**\r\n     * Sets the MagTek User Name.\r\n     *\r\n     * @param magtekUserName String\r\n     * <p>Maps to Payflow Parameter: MAGTEKUSERNAME</p>\r\n     */\r\n    public void setMagtekUserName(String magtekUserName) {\r\n        this.magtekUserName = magtekUserName;\r\n    }\r\n\r\n    /**\r\n     * Gets the MagTek Password.\r\n     *\r\n     * @return merchSvc String\r\n     * <p>Maps to Payflow Parameter: MAGTEKPASSWORD</p>\r\n     */\r\n    public String getMagtekPassword() {\r\n        return magtekPassword;\r\n    }\r\n\r\n    /**\r\n     * Sets the MagTek Password.\r\n     *\r\n     * @param magtekPassword String\r\n     * <p>Maps to Payflow Parameter: MAGTEKPASSWORD</p>\r\n     */\r\n    public void setMagtekPassword(String magtekPassword) {\r\n        this.magtekPassword = magtekPassword;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/dataobjects/paypal/payflow/MagTekInfo.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/dataobjects/paypal/payflow/MagTekInfo.java	(date 1600061902216)
@@ -4,7 +4,7 @@
  * Used for Magtek related information.
  * <p>
  * Use the MagtekInfo object for the Magtek
- * encrypted card reader related information.</remarks>
+ * encrypted card reader related information.
  * <p>
  * Following example shows how to use the MagtekInfo object.
  * <p>
@@ -205,7 +205,7 @@
      * Sets the MagTek Card Type.
      *
      * @param magtekCardType String
-     * <p>Maps to Payflow Parameter: MAGTEKCARDTYPE<</p>
+     * <p>Maps to Payflow Parameter: MAGTEKCARDTYPE</p>
      */
     public void setMagtekCardType(String magtekCardType) {
         this.magtekCardType = magtekCardType;
@@ -325,7 +325,7 @@
      * Sets the last 4-digits of the PAN.
      *
      * @param pan4 String
-     * <p>Maps to Payflow Parameter: PAN4/p>
+     * <p>Maps to Payflow Parameter: PAN4</p>
      */
     public void setPan4(String pan4) {
         this.pan4 = pan4;
Index: src/sdk/transactions/paypal/payflow/RecurringInquiryTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a recurring transaction with\r\n * Inquiry action.\r\n * <p/>\r\n * RecurringInquiryTransaction is used to request two different sets of information:\r\n * To view the full set of payment information for a profile, include the\r\n * PAYMENTHISTORY=Y name/value pair with the Inquiry action.\r\n * To view the status of a customer's profile, submit an Inquiry action that does\r\n * not include the PAYMENTHISTORY parameter (alternatively, submit\r\n * PAYMENTHISTORY=N).\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * //Set the Recurring related information.\r\n * RecurringInfo recurInfo = new RecurringInfo();\r\n * recurInfo.setOrigProfileId (\"RT0000001350\");\r\n * <p/>\r\n * // Create a new Recurring Inquiry Transaction.\r\n * RecurringInquiryTransaction trans = new RecurringInquiryTransaction(\r\n * user, connection, recurInfo, PayflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * System.out.println(\"STATUS = \" + recurResponse.getStatus());\r\n * System.out.println(\"PROFILENAME = \" + recurResponse.getProfileName());\r\n * System.out.println(\"START = \" + recurResponse.getStart());\r\n * System.out.println(\"TERM = \" + recurResponse.getTerm());\r\n * System.out.println(\"NEXTPAYMENT = \" + recurResponse.getNextPayment());\r\n * System.out.println(\"PAYPERIOD = \" + recurResponse.getPayPeriod());\r\n * System.out.println(\"NEXTPAYMENT = \" + recurResponse.getNextPayment());\r\n * System.out.println(\"TENDER = \" + recurResponse.getTender());\r\n * System.out.println(\"AMT = \" + recurResponse.getAmt());\r\n * System.out.println(\"ACCT = \" + recurResponse.getAcct());\r\n * System.out.println(\"EXPDATE = \" + recurResponse.getExpDate());\r\n * System.out.println(\"AGGREGATEAMT = \" + recurResponse.getAggregateAmt());\r\n * System.out.println(\"AGGREGATEOPTIONALAMT = \" + recurResponse.getAggregateOptionalAmt());\r\n * System.out.println(\"MAXFAILPAYMENTS = \" + recurResponse.getMaxFailPayments());\r\n * System.out.println(\"NUMFAILPAYMENTS = \" + recurResponse.getNumFailPayments());\r\n * System.out.println(\"RETRYNUMDAYS = \" + recurResponse.getRetryNumDays());\r\n * System.out.println(\"STREET = \" + recurResponse.getStreet());\r\n * System.out.println(\"ZIP = \" + recurResponse.getZip());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"/n\" + \"Errors = \" + Ctx.ToString());\r\n * }\r\n */\r\n\r\npublic class RecurringInquiryTransaction extends RecurringTransaction {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              UserInfo             - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param recurringInfo         RecurringInfo   - Recurring Info object.\r\n     * @param requestId             String              - Request Id\r\n     *                              <p/>\r\n     *                              <p/>\r\n     *                              RecurringInquiryTransaction is used to request two different sets of information:\r\n     *                              To view the full set of payment information for a profile, include the\r\n     *                              PAYMENTHISTORY=Y name/value pair with the Inquiry action.\r\n     *                              To view the status of a customer's profile, submit an Inquiry action that does\r\n     *                              not include the PAYMENTHISTORY parameter (alternatively, submit\r\n     *                              PAYMENTHISTORY=N).\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringInquiryTransaction.\r\n     * RecurringInquiryTransaction trans = new RecurringInquiryTransaction(user, connection, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    public RecurringInquiryTransaction(UserInfo userInfo,\r\n                                       PayflowConnectionData payflowConnectionData,\r\n                                       RecurringInfo recurringInfo, String requestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_INQUIRY,\r\n                recurringInfo,\r\n                userInfo, payflowConnectionData, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo      UserInfo             - User Info object populated with user credentials.\r\n     * @param recurringInfo RecurringInfo   - Recurring Info object.\r\n     * @param requestId     String              - Request Id\r\n     *                      <p/>\r\n     *                      <p/>\r\n     *                      RecurringInquiryTransaction is used to request two different sets of information:\r\n     *                      To view the full set of payment information for a profile, include the\r\n     *                      PAYMENTHISTORY=Y name/value pair with the Inquiry action.\r\n     *                      To view the status of a customer's profile, submit an Inquiry action that does\r\n     *                      not include the PAYMENTHISTORY parameter (alternatively, submit\r\n     *                      PAYMENTHISTORY=N).\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringInquiryTransaction.\r\n     * RecurringInquiryTransaction trans = new RecurringInquiryTransaction(user, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n\r\n    public RecurringInquiryTransaction(UserInfo userInfo,\r\n                                       RecurringInfo recurringInfo, String requestId) {\r\n        this(userInfo, null, recurringInfo, requestId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/RecurringInquiryTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/RecurringInquiryTransaction.java	(date 1600062451413)
@@ -1,9 +1,10 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a recurring transaction with
  * Inquiry action.
- * <p/>
+ *  * <p>
  * RecurringInquiryTransaction is used to request two different sets of information:
  * To view the full set of payment information for a profile, include the
  * PAYMENTHISTORY=Y name/value pair with the Inquiry action.
@@ -15,18 +16,18 @@
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *  * <p>
  * //Set the Recurring related information.
  * RecurringInfo recurInfo = new RecurringInfo();
  * recurInfo.setOrigProfileId ("RT0000001350");
- * <p/>
+ *  * <p>
  * // Create a new Recurring Inquiry Transaction.
  * RecurringInquiryTransaction trans = new RecurringInquiryTransaction(
  * user, connection, recurInfo, PayflowUtility.getRequestId());
- * <p/>
+ *  * <p>
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *  * <p>
  * if (Resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -36,7 +37,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
+ *  * <p>
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -65,10 +66,12 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("/n" + "Errors = " + Ctx.ToString());
  * }
+ * }
+ * </pre>
  */
 
 public class RecurringInquiryTransaction extends RecurringTransaction {
@@ -80,8 +83,7 @@
      * @param payflowConnectionData PayflowConnectionData - Connection credentials object.
      * @param recurringInfo         RecurringInfo   - Recurring Info object.
      * @param requestId             String              - Request Id
-     *                              <p/>
-     *                              <p/>
+     *                               * <p>
      *                              RecurringInquiryTransaction is used to request two different sets of information:
      *                              To view the full set of payment information for a profile, include the
      *                              PAYMENTHISTORY=Y name/value pair with the Inquiry action.
@@ -92,12 +94,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringInquiryTransaction.
      * RecurringInquiryTransaction trans = new RecurringInquiryTransaction(user, connection, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -115,8 +116,7 @@
      * @param userInfo      UserInfo             - User Info object populated with user credentials.
      * @param recurringInfo RecurringInfo   - Recurring Info object.
      * @param requestId     String              - Request Id
-     *                      <p/>
-     *                      <p/>
+     *                       * <p>
      *                      RecurringInquiryTransaction is used to request two different sets of information:
      *                      To view the full set of payment information for a profile, include the
      *                      PAYMENTHISTORY=Y name/value pair with the Inquiry action.
@@ -127,12 +127,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringInquiryTransaction.
      * RecurringInquiryTransaction trans = new RecurringInquiryTransaction(user, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
Index: src/sdk/transactions/paypal/payflow/CaptureTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a capture transaction.\r\n *\r\n *  <p>\r\n * Capture transaction needs to be performed on a successful\r\n * authorization transaction in order to capture the amount. Therefore, a\r\n * capture transaction always takes the PNRef of a authorization transaction.\r\n * </p>\r\n * ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * // Create a new Capture Transaction.\r\n * CaptureTransaction trans = new CaptureTransaction(\"PNRef of Authorization transaction\",\r\n * User, Connection, PayflowUtility.getrequestId();\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.SubmitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (TrxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println( \"Errors = \" + ctx.ToString());\r\n * }\r\n */\r\npublic final class CaptureTransaction extends ReferenceTransaction {\r\n\r\n    /**\r\n     * Complete type for a capture. Y or N.\r\n     */\r\n    public String captureComplete;\r\n\r\n    /**\r\n     * Gets the captureComplete for a capture. Possible values can be Y/N.\r\n     *\r\n     * @return captureComplete String\r\n     *         <p> Maps to Payflow Parameter: CAPTURECOMPLETE</p>\r\n     */\r\n    public String getcaptureComplete() {\r\n        return captureComplete;\r\n    }\r\n\r\n    /**\r\n     * Indicates if this Delayed Capture transaction is the last capture you intend to make.\r\n     * The values are: Y (default) / N\r\n     * NOTE: If CAPTURECOMPLETE is Y, any remaining amount of the original reauthorized transaction\r\n     * is automatically voided.\r\n     *\r\n     * @param captureComplete String\r\n     *                        <p> Maps to Payflow Parameter: CAPTURECOMPLETE</p>\r\n     */\r\n    public void setcaptureComplete(String captureComplete) {\r\n        this.captureComplete = captureComplete;\r\n    }\r\n\r\n    /**\r\n     * @param origId                String Original Transaction Id\r\n     * @param userInfo              UserInfo object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData Connection credentials object.\r\n     * @param Invoice               Invoice object.\r\n     * @param requestId             Request Id.\r\n     *  <p>\r\n     * Capture transaction needs to be performed on a successful\r\n     * authorization transaction in order to capture the amount. Therefore, a\r\n     * capture transaction always takes the PNRef of a authorization transaction.\r\n     * </p>\r\n     * <p/>\r\n     * ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Capture Transaction.\r\n     * CaptureTransaction trans = new CaptureTransaction(\"PNRef of Authorization transaction\",\r\n     * User, Connection, Inv, PayflowUtility.requestId);\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.SubmitTransaction();\r\n     * <p/>\r\n     * if (resp != null)\r\n     * {\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * }\r\n     * }\r\n     * <p/>\r\n     * Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n    public CaptureTransaction(String origId, UserInfo userInfo, PayflowConnectionData payflowConnectionData, Invoice Invoice, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CAPTURE, origId, userInfo, payflowConnectionData, Invoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * @param origId    Original Transaction Id.\r\n     * @param userInfo  UserInfo object populated with user credentials.\r\n     * @param invoice   Invoice object.\r\n     * @param requestId Request Id.\r\n     *  <p>\r\n     * Capture transaction needs to be performed on a successful\r\n     * authorization transaction in order to capture the amount. Therefore, a\r\n     * capture transaction always takes the PNRef of a authorization transaction.\r\n     * </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Capture Transaction.\r\n     * CaptureTransaction Trans = new CaptureTransaction(\"PNRef of Authorization transaction\",\r\n     * User, Inv, PayflowUtility.requestId);\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     * <p/>\r\n     * if (resp != null)\r\n     * {\r\n     * TransactionResponse trxnResponse =  Resp.TransactionResponse;\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * }\r\n     * }\r\n     * <p/>\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + Ctx.ToString());\r\n     * }\r\n     */\r\n    public CaptureTransaction(String origId, UserInfo userInfo, Invoice invoice, String requestId) {\r\n        this(origId, userInfo, null, invoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * @param origId                Original Transaction Id.\r\n     * @param userInfo              User Info object populated with user credentials.\r\n     * @param PayflowConnectionData Connection credentials object.\r\n     * @param invoice               Invoice object.\r\n     * @param tender                BaseTender object.\r\n     * @param requestId             Request Id.\r\n     *  <p>Capture transaction needs to be performed on a successful\r\n     * authorization transaction in order to capture the amount. Therefore, a\r\n     * capture transaction always takes the PNRef of a authorization transaction.\r\n     * </p>\r\n     * ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Capture Transaction.\r\n     * CaptureTransaction trans = new CaptureTransaction(\"PNRef of Authorization transaction\",\r\n     * User, Connection, Inv, tender, PayflowUtility.requestId);\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response Resp = Trans.submitTransaction();\r\n     * <p/>\r\n     * if (resp != null)\r\n     * {\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * }\r\n     * }\r\n     * <p/>\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n    public CaptureTransaction(String origId, UserInfo userInfo, PayflowConnectionData PayflowConnectionData, Invoice invoice, BaseTender tender, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CAPTURE, origId, userInfo, PayflowConnectionData, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * @param origId    Original Transaction Id.\r\n     * @param userInfo  User Info object populated with user credentials.\r\n     * @param invoice   Invoice object.\r\n     * @param tender    BaseTender object.\r\n     * @param requestId Request Id.\r\n     *  <p>Capture transaction needs to be performed on a successful\r\n     * authorization transaction in order to capture the amount. Therefore, a\r\n     * capture transaction always takes the PNRef of a authorization transaction.\r\n     * </p>\r\n     * ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Capture Transaction.\r\n     * CaptureTransaction trans = new CaptureTransaction(\"PNRef of Authorization transaction\",\r\n     * User,  Inv, tender, PayflowUtility.requestId);\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     * <p/>\r\n     * if (Resp != null)\r\n     * {\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse;\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * }\r\n     * }\r\n     * <p/>\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.toString());\r\n     * }\r\n     */\r\n    public CaptureTransaction(String origId, UserInfo userInfo, Invoice invoice, BaseTender tender, String requestId) {\r\n        this(origId, userInfo, null, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * @param origId                Original Transaction Id.\r\n     * @param userInfo              User Info object populated with user credentials.\r\n     * @param payflowConnectionData Connection credentials object.\r\n     * @param requestId             Request Id.\r\n     *  <p>Capture transaction needs to be performed on a successful\r\n     * authorization transaction in order to capture the amount. Therefore, a\r\n     * capture transaction always takes the PNRef of a authorization transaction.\r\n     * </p>\r\n     * ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Capture Transaction.\r\n     * CaptureTransaction trans = new CaptureTransaction(\"PNRef of Authorization transaction\",\r\n     * User, Connection, PayflowUtility.getrequestId());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     * <p/>\r\n     * if (Resp != null)\r\n     * {\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (TrxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * }\r\n     * }\r\n     * <p/>\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n    public CaptureTransaction(String origId, UserInfo userInfo, PayflowConnectionData payflowConnectionData, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CAPTURE, origId, userInfo, payflowConnectionData, requestId);\r\n    }\r\n\r\n    /**\r\n     * @param origId    Original Transaction Id.\r\n     * @param userInfo  UserInfo object populated with user credentials.\r\n     * @param requestId Request Id.\r\n     *  <p>Capture transaction needs to be performed on a successful\r\n     * authorization transaction in order to capture the amount. Therefore, a\r\n     * capture transaction always takes the PNRef of a authorization transaction.\r\n     * </p>\r\n     * ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Capture Transaction.\r\n     * CaptureTransaction trans = new CaptureTransaction(\"PNRef of Authorization transaction\",\r\n     * User, Connection, PayflowUtility.getrequestId());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response Resp = trans.submitTransaction();\r\n     * <p/>\r\n     * if (Resp != null)\r\n     * {\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * }\r\n     * }\r\n     * <p/>\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = Resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(Environment.NewLine + \"Errors = \" + ctx.toString());\r\n     * }\r\n     */\r\n    public CaptureTransaction(String origId,\r\n                              UserInfo userInfo,\r\n                              String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CAPTURE, origId, userInfo, requestId);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CAPTURECOMPLETE, captureComplete));\r\n\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/CaptureTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/CaptureTransaction.java	(date 1600060217355)
@@ -11,14 +11,14 @@
  * ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *  * <p>
  * // Create a new Capture Transaction.
  * CaptureTransaction trans = new CaptureTransaction("PNRef of Authorization transaction",
  * User, Connection, PayflowUtility.getrequestId();
- * <p/>
+ *  * <p>
  * // Submit the transaction.
  * Response resp = trans.SubmitTransaction();
- * <p/>
+ *  * <p>
  * if (Resp != null)
  * {
  * TransactionResponse trxnResponse =  resp.getTransactionResponse();
@@ -32,10 +32,10 @@
  * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
  * }
  * }
- * <p/>
+ *  * <p>
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
  * {
  * System.out.println( "Errors = " + ctx.ToString());
  * }
@@ -81,18 +81,18 @@
      * authorization transaction in order to capture the amount. Therefore, a
      * capture transaction always takes the PNRef of a authorization transaction.
      * </p>
-     * <p/>
+     *  * <p>
      * ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Capture Transaction.
      * CaptureTransaction trans = new CaptureTransaction("PNRef of Authorization transaction",
      * User, Connection, Inv, PayflowUtility.requestId);
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.SubmitTransaction();
-     * <p/>
+     *  * <p>
      * if (resp != null)
      * {
      * TransactionResponse trxnResponse =  resp.getTransactionResponse();
@@ -106,10 +106,10 @@
      * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
      * }
      * }
-     * <p/>
+     *  * <p>
      * Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.ToString());
      * }
@@ -131,14 +131,14 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Capture Transaction.
      * CaptureTransaction Trans = new CaptureTransaction("PNRef of Authorization transaction",
      * User, Inv, PayflowUtility.requestId);
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * if (resp != null)
      * {
      * TransactionResponse trxnResponse =  Resp.TransactionResponse;
@@ -152,10 +152,10 @@
      * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
      * }
      * }
-     * <p/>
+     *  * <p>
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + Ctx.ToString());
      * }
@@ -178,14 +178,14 @@
      * ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Capture Transaction.
      * CaptureTransaction trans = new CaptureTransaction("PNRef of Authorization transaction",
      * User, Connection, Inv, tender, PayflowUtility.requestId);
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response Resp = Trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * if (resp != null)
      * {
      * TransactionResponse trxnResponse =  resp.getTransactionResponse();
@@ -199,10 +199,10 @@
      * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
      * }
      * }
-     * <p/>
+     *  * <p>
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.ToString());
      * }
@@ -224,14 +224,14 @@
      * ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Capture Transaction.
      * CaptureTransaction trans = new CaptureTransaction("PNRef of Authorization transaction",
      * User,  Inv, tender, PayflowUtility.requestId);
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * if (Resp != null)
      * {
      * TransactionResponse trxnResponse =  resp.getTransactionResponse;
@@ -245,10 +245,10 @@
      * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
      * }
      * }
-     * <p/>
+     *  * <p>
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.toString());
      * }
@@ -269,14 +269,14 @@
      * ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Capture Transaction.
      * CaptureTransaction trans = new CaptureTransaction("PNRef of Authorization transaction",
      * User, Connection, PayflowUtility.getrequestId());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * if (Resp != null)
      * {
      * TransactionResponse trxnResponse =  resp.getTransactionResponse();
@@ -290,10 +290,10 @@
      * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
      * }
      * }
-     * <p/>
+     *  * <p>
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.ToString());
      * }
@@ -313,14 +313,14 @@
      * ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Capture Transaction.
      * CaptureTransaction trans = new CaptureTransaction("PNRef of Authorization transaction",
      * User, Connection, PayflowUtility.getrequestId());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response Resp = trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * if (Resp != null)
      * {
      * TransactionResponse trxnResponse =  resp.getTransactionResponse();
@@ -334,10 +334,10 @@
      * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
      * }
      * }
-     * <p/>
+     *  * <p>
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = Resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println(Environment.NewLine + "Errors = " + ctx.toString());
      * }
Index: src/sdk/transactions/paypal/payflow/CreditTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to create and perform an\r\n * Credit Transaction.\r\n * <p>Reference credit transaction can be performed on successful\r\n * transactions in order to credit the amount. Therefore, a\r\n * reference credit transaction takes the PNRef of a previous transaction.\r\n * </p>\r\n *\r\n *  ...............<br>\r\n * // Populate data objects<br>\r\n * ...............<br>\r\n * <br>\r\n * // Create a new Credit Transaction.<br>\r\n * // Following is an example of a reference credit type of transaction.<br>\r\n * CreditTransaction Trans = new CreditTransaction(\"PNRef of a previous<br>\r\n * // transaction.\",<br>\r\n * User, Connection, Inv, PayflowUtility.getRequestId());<br>\r\n * <br>\r\n * // Submit the transaction.<br>\r\n * Response resp = Trans.submitTransaction();<br>\r\n * <br>\r\n * if (resp != null)<br>\r\n * {<br>\r\n * // Get the Transaction Response parameters.<br>\r\n * TransactionResponse trxnResponse = resp.getTransactionResponse();<br>\r\n * if (trxnResponse != null)<br>\r\n * {<br>\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());<br>\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());<br>\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());<br>\r\n * }<br>\r\n * }<br>\r\n * <br>\r\n * // Get the Context and check for any contained SDK specific errors.<br>\r\n * Context ctx = resp.getTransactionContext();<br>\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>\r\n * {<br>\r\n * System.out.println(\"Errors = \" + ctx.toString());<br>\r\n * }<br>\r\n * <br>\r\n */\r\n\r\npublic final class CreditTransaction extends BaseTransaction {\r\n\r\n    /**\r\n     * Original transaction id.\r\n     */\r\n    private String origId;\r\n\r\n    private String origPPRef;\r\n\r\n    /**\r\n     * gets the OrigPPRef\r\n     *\r\n     * @return origPPRef\r\n     *  <p> maps to PayflowParameter ORIGPPREF</p>\r\n     */\r\n    public String getOrigPPRef() {\r\n        return origPPRef;\r\n    }\r\n\r\n    /**\r\n     * sets the OrigPPRef\r\n     *\r\n     * @param origPPRef String\r\n     *  <p> maps to PayflowParameter ORIGPPREF</p>\r\n     */\r\n    public void setOrigPPRef(String origPPRef) {\r\n        this.origPPRef = origPPRef;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param origId                Original Transaction Id.\r\n     * @param userInfo              User Info object populated with user credentials.\r\n     * @param payflowConnectionData Connection credentials object.\r\n     * @param invoice               Invoice object.\r\n     * @param requestId             Request Id.\r\n     *                              <p>Reference credit transaction can be performed on successful.\r\n     *                              transactions in order to credit the amount. Therefore, a\r\n     *                              reference credit transaction takes the PNRef of a previous\r\n     *                              // transaction.</p>\r\n     *  ...............<br>\r\n     * // Populate data objects<br>\r\n     * ...............<br>\r\n     * <br>\r\n     * // Create a new Credit Transaction.<br>\r\n     * // Following is an example of a reference credit type of<br>\r\n     * // transaction.<br>\r\n     * CreditTransaction trans = new CreditTransaction(\"PNRef of a<br>\r\n     * // previous transaction.\",<br>\r\n     * User, Connection, Inv, PayflowUtility.getRequestId());<br>\r\n     * <br>\r\n     * // Submit the transaction.<br>\r\n     * Response resp = trans.SubmitTransaction();<br>\r\n     * <br>\r\n     * if (resp != null)<br>\r\n     * {<br>\r\n     * // Get the Transaction Response parameters.<br>\r\n     * TransactionResponse trxnResponse = resp.getTransactionResponse();<br>\r\n     * if (trxnResponse != null)<br>\r\n     * {<br>\r\n     * System.out.println(\"RESULT = \" + TrxnResponse.Result);<br>\r\n     * System.out.println(\"PNREF = \" + TrxnResponse.Pnref);<br>\r\n     * System.out.println(\"RESPMSG = \" + TrxnResponse.RespMsg);<br>\r\n     * }<br>\r\n     * }<br>\r\n     * <br>\r\n     * // Get the Context and check for any contained SDK specific errors.<br>\r\n     * Context ctx = resp.getTransactionContext();<br>\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>\r\n     * {<br>\r\n     * System.out.println(\"Errors = \" + ctx.ToString());<br>\r\n     * }<br>\r\n     */\r\n    public CreditTransaction(String origId,\r\n                             UserInfo userInfo,\r\n                             PayflowConnectionData payflowConnectionData,\r\n                             Invoice invoice,\r\n                             String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CREDIT, userInfo, payflowConnectionData,\r\n                invoice, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param origId    Original Transaction Id.\r\n     * @param userInfo  UserInfo object populated with user credentials.\r\n     * @param invoice   Invoice object.\r\n     * @param requestId Request Id.\r\n     *                  <p>Reference credit transaction can be performed on successful\r\n     *                  transactions in order to credit the amount. Therefore, a\r\n     *                  reference credit transaction takes the PNRef of a previous transaction.\r\n     *                  </p>\r\n     *  ...............<br>\r\n     * // Populate data objects<br>\r\n     * ...............<br>\r\n     * <br>\r\n     * // Create a new Credit Transaction.<br>\r\n     * // Following is an example of a reference credit type of<br>\r\n     * // transaction.<br>\r\n     * CreditTransaction trans = new CreditTransaction(\"PNRef of a<br>\r\n     * // previous transaction.\",<br>\r\n     * User, Inv, PayflowUtility.getRequestId());<br>\r\n     * <br>\r\n     * // Submit the transaction.<br>\r\n     * Response resp = Trans.submitTransaction();<br>\r\n     * <br>\r\n     * if (resp != null)<br>\r\n     * {<br>\r\n     * // Get the Transaction Response parameters.<br>\r\n     * TransactionResponse trxnResponse = resp.getTransactionResponse();<br>\r\n     * if (trxnResponse != null)<br>\r\n     * {<br>\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());<br>\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());<br>\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());<br>\r\n     * }<br>\r\n     * }<br>\r\n     * <br>\r\n     * // Get the Context and check for any contained SDK specific errors.<br>\r\n     * Context ctx = Resp.getTransactionContext();<br>\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>\r\n     * {<br>\r\n     * System.out.println(\"Errors = \" + ctx.toString());<br>\r\n     * }<br>\r\n     * <br>\r\n     */\r\n    public CreditTransaction(String origId,\r\n                             UserInfo userInfo,\r\n                             Invoice invoice,\r\n                             String requestId) {\r\n        this(origId, userInfo, null, invoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param origId                Original Transaction Id.\r\n     * @param userInfo              UserInfo object populated with user credentials.\r\n     * @param payflowConnectionData Connection credentials object.\r\n     * @param invoice               Invoice object.\r\n     * @param tender                tender object.\r\n     * @param requestId             Request Id.\r\n     *                              <p>Reference credit transaction can be performed on successful\r\n     *                              transactions in order to credit the amount. Therefore, a\r\n     *                              reference credit transaction takes the PNRef of a previous transaction.\r\n     *                              </p>\r\n     *  ...............<br>\r\n     * // Populate data objects<br>\r\n     * ...............<br>\r\n     * <br>\r\n     * // Create a new Credit Transaction.<br>\r\n     * // Following is an example of a reference credit type of<br>\r\n     * transaction.<br>\r\n     * CreditTransaction trans = new CreditTransaction(\"PNRef of a<br>\r\n     * previous transaction.\",<br>\r\n     * User, Connection, Inv, tender, PayflowUtility.getRequestId());<br>\r\n     * <br>\r\n     * // Submit the transaction.<br>\r\n     * Response resp = trans.submitTransaction();<br>\r\n     * <br>\r\n     * if (resp != null)<br>\r\n     * {<br>\r\n     * // Get the Transaction Response parameters.<br>\r\n     * TransactionResponse trxnResponse = resp.getTransactionResponse();<br>\r\n     * if (trxnResponse != null)<br>\r\n     * {<br>\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());<br>\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());<br>\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());<br>\r\n     * }<br>\r\n     * }<br>\r\n     * <br>\r\n     * // Get the Context and check for any contained SDK specific errors.<br>\r\n     * Context ctx = resp.getTransactionContext();<br>\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>\r\n     * {<br>\r\n     * System.out.println(\"Errors = \" + ctx.toString());<br>\r\n     * }<br>\r\n     * <br>\r\n     */\r\n    public CreditTransaction(String origId,\r\n                             UserInfo userInfo,\r\n                             PayflowConnectionData payflowConnectionData,\r\n                             Invoice invoice,\r\n                             BaseTender tender,\r\n                             String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CREDIT, userInfo, payflowConnectionData,\r\n                invoice, tender, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param origId    Original Transaction Id\r\n     * @param userInfo  UserInfo object populated with user credentials.\r\n     * @param invoice   Invoice object.\r\n     * @param tender    tender object.\r\n     * @param requestId Request Id.\r\n     *                  <p>Reference credit transaction can be performed on successful\r\n     *                  transactions in order to credit the amount. Therefore, a\r\n     *                  reference credit transaction takes the PNRef of a previous transaction.\r\n     *                  </p>\r\n     *  ...............<br>\r\n     * // Populate data objects<br>\r\n     * ...............<br>\r\n     * <br>\r\n     * // Create a new Credit Transaction.<br>\r\n     * // Following is an example of a reference credit type of<br>\r\n     * // transaction.<br>\r\n     * CreditTransaction trans = new CreditTransaction(\"PNRef of a<br>\r\n     * // previous transaction.\",<br>\r\n     * User, Inv, tender, PayflowUtility.getRequestId());<br>\r\n     * <br>\r\n     * // Submit the transaction.<br>\r\n     * Response Resp = trans.submitTransaction();<br>\r\n     * <br>\r\n     * if (Resp != null)<br>\r\n     * {<br>\r\n     * // Get the Transaction Response parameters.<br>\r\n     * TransactionResponse trxnResponse = resp.getTransactionResponse();<br>\r\n     * if (TrxnResponse != null)<br>\r\n     * {<br>\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());<br>\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());<br>\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());<br>\r\n     * }<br>\r\n     * }<br>\r\n     * <br>\r\n     * // Get the Context and check for any contained SDK specific errors.<br>\r\n     * Context ctx = Resp.TransactionContext;<br>\r\n     * if (ctx != null &amp;&amp;ctx.getErrorCount() > 0)<br>\r\n     * {<br>\r\n     * System.out.println(\"Errors = \" + ctx.ToString());<br>\r\n     * }<br>\r\n     * <br>\r\n     * <br>\r\n     */\r\n    public CreditTransaction(String origId,\r\n                             UserInfo userInfo,\r\n                             Invoice invoice,\r\n                             BaseTender tender,\r\n                             String requestId) {\r\n        this(origId, userInfo, null, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param origId                Original Transaction Id\r\n     * @param userInfo              User Info object populated with user credentials.\r\n     * @param PayflowConnectionData Connection credentials object.\r\n     * @param requestId             Request Id.\r\n     *                              <p>Reference credit transaction can be performed on\r\n     *                              // successful\r\n     *                              transactions in order to credit the amount. Therefore, a\r\n     *                              reference credit transaction takes the PNRef of a previous\r\n     *                              // transaction.\r\n     *                              </p>\r\n     *  ...............<br>\r\n     * // Populate data objects<br>\r\n     * ...............<br>\r\n     * <br>\r\n     * // Create a new Credit Transaction.<br>\r\n     * // Following is an example of a reference credit type of<br>\r\n     * // transaction.<br>\r\n     * CreditTransaction Trans = new CreditTransaction(\"PNRef of a<br>\r\n     * // previous transaction.\",<br>\r\n     * User, Connection, PayflowUtility.getRequestId());<br>\r\n     * <br>\r\n     * // Submit the transaction.<br>\r\n     * Response resp = Trans.submitTransaction();<br>\r\n     * <br>\r\n     * if (resp != null)<br>\r\n     * {<br>\r\n     * // Get the Transaction Response parameters.<br>\r\n     * TransactionResponse trxnResponse = Resp.getTransactionResponse();<br>\r\n     * if (trxnResponse != null)<br>\r\n     * {<br>\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());<br>\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());<br>\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());<br>\r\n     * }<br>\r\n     * }<br>\r\n     * <br>\r\n     * // Get the Context and check for any contained SDK specific errors.<br>\r\n     * Context ctx = resp.getTransactionContext();<br>\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>\r\n     * {<br>\r\n     * System.out.println(\"Errors = \" + ctx.ToString());<br>\r\n     * }<br>\r\n     * <br>\r\n     */\r\n    public CreditTransaction(String origId,\r\n                             UserInfo userInfo,\r\n                             PayflowConnectionData PayflowConnectionData,\r\n                             String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CREDIT, userInfo, PayflowConnectionData,\r\n                null, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * </summary>\r\n     *\r\n     * @param origId    Original Transaction Id\r\n     * @param userInfo  User Info object populated with user credentials.\r\n     * @param requestId Request Id\r\n     *                  <p>Reference credit transaction can be performed on successful\r\n     *                  transactions in order to credit the amount. Therefore, a\r\n     *                  reference credit transaction takes the PNRef of a previous transaction.\r\n     *                  </p>\r\n     *  ...............<br>\r\n     * // Populate data objects<br>\r\n     * ...............<br>\r\n     * <br>\r\n     * // Create a new Credit Transaction.<br>\r\n     * // Following is an example of a reference credit type of<br>\r\n     * // transaction.<br>\r\n     * CreditTransaction Trans = new CreditTransaction(\"PNRef of a<br>\r\n     * // previous transaction.\", PayflowUtility.requestId);<br>\r\n     * <br>\r\n     * // Submit the transaction.<br>\r\n     * Response Resp = Trans.SubmitTransaction();<br>\r\n     * <br>\r\n     * if (Resp != null)<br>\r\n     * {<br>\r\n     * // Get the Transaction Response parameters.<br>\r\n     * TransactionResponse TrxnResponse = Resp.TransactionResponse;<br>\r\n     * if (TrxnResponse != null)<br>\r\n     * {<br>\r\n     * System.out.println(\"RESULT = \" + TrxnResponse.Result);<br>\r\n     * System.out.println(\"PNREF = \" + TrxnResponse.Pnref);<br>\r\n     * System.out.println(\"RESPMSG = \" + TrxnResponse.RespMsg);<br>\r\n     * }<br>\r\n     * }<br>\r\n     * <br>\r\n     * // Get the Context and check for any contained SDK specific errors.<br>\r\n     * Context Ctx = Resp.TransactionContext;<br>\r\n     * if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)<br>\r\n     * {<br>\r\n     * System.out.println(\"Errors = \" + ctx.ToString());<br>\r\n     * }<br>\r\n     * <br>\r\n     */\r\n    public CreditTransaction(String origId, UserInfo userInfo, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CREDIT, userInfo, requestId);\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo              User Info object populated with user credentials.\r\n     * @param PayflowConnectionData Connection credentials object.\r\n     * @param invoice               Invoice object.\r\n     * @param tender                tender object such as Card tender.\r\n     * @param requestId             Request Id.\r\n     *                              <p>This class is used for a stand alone credit transaction.\r\n     *                              </p>\r\n     *  ...............<br>\r\n     * // Populate data objects<br>\r\n     * ...............<br>\r\n     * <br>\r\n     * // Create a new Credit Transaction.<br>\r\n     * // Following is an example of a stand alone credit type of<br>\r\n     * // transaction.<br>\r\n     * CreditTransaction Trans = new CreditTransaction(User, Inv,<br>\r\n     * // Connection,<br>\r\n     * tender, PayflowUtility.requestId);<br>\r\n     * <br>\r\n     * // Submit the transaction.<br>\r\n     * Response Resp = Trans.SubmitTransaction();<br>\r\n     * <br>\r\n     * if (Resp != null)<br>\r\n     * {<br>\r\n     * // Get the Transaction Response parameters.<br>\r\n     * TransactionResponse TrxnResponse = Resp.TransactionResponse;<br>\r\n     * if (TrxnResponse != null)<br>\r\n     * {<br>\r\n     * System.out.println(\"RESULT = \" + TrxnResponse.Result);<br>\r\n     * System.out.println(\"PNREF = \" + TrxnResponse.Pnref);<br>\r\n     * System.out.println(\"RESPMSG = \" + TrxnResponse.RespMsg);<br>\r\n     * }<br>\r\n     * }<br>\r\n     * <br>\r\n     * // Get the Context and check for any contained SDK specific errors.<br>\r\n     * Context Ctx = Resp.TransactionContext;<br>\r\n     * if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)<br>\r\n     * {<br>\r\n     * Console.WriteLine(Environment.NewLine + \"Errors = \" +<br>\r\n     * // Ctx.ToString());<br>\r\n     * }<br>\r\n     * <br>\r\n     */\r\n    public CreditTransaction(UserInfo userInfo,\r\n                             PayflowConnectionData PayflowConnectionData,\r\n                             Invoice invoice,\r\n                             BaseTender tender,\r\n                             String requestId) {\r\n        super(PayflowConstants.TRXTYPE_CREDIT, userInfo, PayflowConnectionData,\r\n                invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     * </summary>\r\n     *\r\n     * @param userInfo  User Info object populated with user credentials.\r\n     * @param invoice   Invoice object.\r\n     * @param tender    tender object such as Card tender.\r\n     * @param requestId Request Id.\r\n     *                  <p>This class is used for a stand alone credit transaction.\r\n     *                  </p>\r\n     *                  ...............<br>\r\n     *                  // Populate data objects<br>\r\n     *                  ...............<br>\r\n     *                  <br>\r\n     *                  // Create a new Credit Transaction.<br>\r\n     *                  // Following is an example of a stand alone type of transaction.<br>\r\n     *                  CreditTransaction trans = new CreditTransaction(User, Inv,<br>\r\n     *                  tender, PayflowUtility.getRequestId());<br>\r\n     *                  <br>\r\n     *                  // Submit the transaction.<br>\r\n     *                  Response resp = trans.submitTransaction();<br>\r\n     *                  <br>\r\n     *                  if (resp != null)<br>\r\n     *                  {<br>\r\n     *                  // Get the Transaction Response parameters.<br>\r\n     *                  TransactionResponse trxnResponse = resp.TransactionResponse;<br>\r\n     *                  if (trxnResponse != null)<br>\r\n     *                  {<br>\r\n     *                  System.out.println(\"RESULT = \" + trxnResponse.getResult());<br>\r\n     *                  System.out.println(\"PNREF = \" + trxnResponse.getPnref());<br>\r\n     *                  System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());<br>\r\n     *                  }<br>\r\n     *                  }<br>\r\n     *                  <br>\r\n     *                  // Get the Context and check for any contained SDK specific errors.<br>\r\n     *                  Context ctx = resp.getTransactionContext();<br>\r\n     *                  if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>\r\n     *                  {<br>\r\n     *                  System.out.println(\"Errors = \" + ctx.ToString());<br>\r\n     *                  }<br>\r\n     *                  <p/>\r\n     *                  <br>\r\n     */\r\n    public CreditTransaction(UserInfo userInfo,\r\n                             Invoice invoice,\r\n                             BaseTender tender,\r\n                             String requestId) {\r\n        this(userInfo, null, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGID, origId));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGPPREF, origPPRef));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/CreditTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/CreditTransaction.java	(date 1600060218014)
@@ -35,7 +35,7 @@
  * <br>
  * // Get the Context and check for any contained SDK specific errors.<br>
  * Context ctx = resp.getTransactionContext();<br>
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>
+ * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
  * {<br>
  * System.out.println("Errors = " + ctx.toString());<br>
  * }<br>
@@ -111,7 +111,7 @@
      * <br>
      * // Get the Context and check for any contained SDK specific errors.<br>
      * Context ctx = resp.getTransactionContext();<br>
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
      * {<br>
      * System.out.println("Errors = " + ctx.ToString());<br>
      * }<br>
@@ -165,7 +165,7 @@
      * <br>
      * // Get the Context and check for any contained SDK specific errors.<br>
      * Context ctx = Resp.getTransactionContext();<br>
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
      * {<br>
      * System.out.println("Errors = " + ctx.toString());<br>
      * }<br>
@@ -219,7 +219,7 @@
      * <br>
      * // Get the Context and check for any contained SDK specific errors.<br>
      * Context ctx = resp.getTransactionContext();<br>
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
      * {<br>
      * System.out.println("Errors = " + ctx.toString());<br>
      * }<br>
@@ -276,7 +276,7 @@
      * <br>
      * // Get the Context and check for any contained SDK specific errors.<br>
      * Context ctx = Resp.TransactionContext;<br>
-     * if (ctx != null &amp;&amp;ctx.getErrorCount() > 0)<br>
+     * if (ctx != null &amp;&amp;ctx.getErrorCount() %3E 0)<br>
      * {<br>
      * System.out.println("Errors = " + ctx.ToString());<br>
      * }<br>
@@ -332,7 +332,7 @@
      * <br>
      * // Get the Context and check for any contained SDK specific errors.<br>
      * Context ctx = resp.getTransactionContext();<br>
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
      * {<br>
      * System.out.println("Errors = " + ctx.ToString());<br>
      * }<br>
@@ -348,8 +348,8 @@
     }
 
     /**
+     *
      * Constructor.
-     * </summary>
      *
      * @param origId    Original Transaction Id
      * @param userInfo  User Info object populated with user credentials.
@@ -385,7 +385,7 @@
      * <br>
      * // Get the Context and check for any contained SDK specific errors.<br>
      * Context Ctx = Resp.TransactionContext;<br>
-     * if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)<br>
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
      * {<br>
      * System.out.println("Errors = " + ctx.ToString());<br>
      * }<br>
@@ -434,7 +434,7 @@
      * <br>
      * // Get the Context and check for any contained SDK specific errors.<br>
      * Context Ctx = Resp.TransactionContext;<br>
-     * if (Ctx != null &amp;&amp; Ctx.getErrorCount() > 0)<br>
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
      * {<br>
      * Console.WriteLine(Environment.NewLine + "Errors = " +<br>
      * // Ctx.ToString());<br>
@@ -451,8 +451,8 @@
     }
 
     /**
+     *
      * Constructor.
-     * </summary>
      *
      * @param userInfo  User Info object populated with user credentials.
      * @param invoice   Invoice object.
@@ -486,11 +486,11 @@
      *                  <br>
      *                  // Get the Context and check for any contained SDK specific errors.<br>
      *                  Context ctx = resp.getTransactionContext();<br>
-     *                  if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)<br>
+     *                  if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)<br>
      *                  {<br>
      *                  System.out.println("Errors = " + ctx.ToString());<br>
      *                  }<br>
-     *                  <p/>
+     *                   * <p>
      *                  <br>
      */
     public CreditTransaction(UserInfo userInfo,
Index: src/sdk/transactions/paypal/payflow/SaleTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a voice authorization transaction.\r\n * <p/>\r\n * * This class is used to create and perform a\r\n * Sale Transaction.\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * // Create a new SaleTransaction.\r\n * SaleTransaction trans = new SaleTransaction(user,\r\n * connection, inv, tender, PayflowUtility.RequestId);\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse = resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n * }\r\n * // Get the Fraud Response parameters.\r\n * FraudResponse fraudResp =  resp.getFraudResponse();\r\n * if (fraudResp != null)\r\n * {\r\n * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.toString());\r\n * }\r\n */\r\n\r\n\r\npublic final class SaleTransaction extends BaseTransaction {\r\n\r\n    private String origId;\r\n\r\n    /**\r\n     * Gets OrigId. This property is used to perform a\r\n     * reference Sale Transaction.\r\n     * <p>A reference Sale transaction is a sale transaction which copies the transaction data,\r\n     * except the Account Number, Expiration Date and Swipe data from a previous transaction.\r\n     * PNRef of this previous transaction needs to be set in this OrigId property.</p>\r\n     * <p>A successful Sale needs to be captured using a capture transaction.</p>\r\n     *\r\n     * @return return\r\n     */\r\n    public String getOrigId() {\r\n        return origId;\r\n    }\r\n\r\n    /**\r\n     * Sets OrigId. This property is used to perform a\r\n     * reference Sale Transaction.\r\n     * <p>A reference Sale transaction is a sale transaction which copies the transaction data,\r\n     * except the Account Number, Expiration Date and Swipe data from a previous transaction.\r\n     * PNRef of this previous transaction needs to be set in this OrigId property.</p>\r\n     * <p>A successful Sale needs to be captured using a capture transaction.</p>\r\n     *\r\n     * @param origId String\r\n     */\r\n    public void setOrigId(String origId) {\r\n        this.origId = origId;\r\n    }\r\n\r\n    private String createSecureToken;\r\n    private String secureTokenId;\r\n\r\n    /**\r\n     * Gets, Sets CreateSecureToken, SecureTokenId. This property is used to create a SecureToken and SecureTokenId.\r\n     * <p/>\r\n     * Use a secure token to send non-credit card transaction data to the Payflow server for storage in\r\n     * a way that can't be intercepted and manipulated maliciously.The secure token must be used with the hosted\r\n     * checkout pages. The token is good for a one-time transaction and is valid for 30 minutes.\r\n     * <p/>\r\n     * NOTE: Without using a secure token, Payflow Pro merchants can host their own payment page and Payflow Link merchants\r\n     * can use a form post to send transaction data to the hosted checkout pages. However, by not using the secure token,\r\n     * these Payflow gateway users are responsible for the secure handling of data.  To obtain a secure token, pass a unique,\r\n     * 36-character token ID and set CREATESECURETOKEN=Y in a request to the Payflow server. The Payflow server associates your\r\n     * ID with a secure token and returns the token as a string of up to 32 alphanumeric characters.  To pass the transaction\r\n     * data to the hosted checkout page, you pass the secure token and token ID in an HTTP form post. The token and ID trigger\r\n     * the Payflow server to retrieve your data and display it for buyer approval.\r\n     * <p/>\r\n     *\r\n     * @return secureToken String\r\n     *  This example shows how to set the flag to create a secure token.\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * // Since we are using the hosted payment pages, you will not be sending the credit card data with the\r\n     * // Secure Token Request.  You just send all other 'sensitive' data within this request and when you\r\n     * // call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned\r\n     * // and the SECURETOKENID that was created and used in the request.\r\n     * <p/>\r\n     * // Create a new Secure Token Sale Transaction.  Even though this example is performing\r\n     * // an authorization, you can create a secure token using SaleTransaction too.  Only Authorization and Sale\r\n     * // type transactions are permitted.\r\n     * SaleTransaction Trans = new SaleTransaction(User, Connection, Inv, null, PayflowUtility.RequestId);\r\n     * <p/>\r\n     * // Set the flag to create a Secure Token.\r\n     * Trans.CreateSecureToken = \"Y\";\r\n     * // The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to\r\n     * // generate a random id, but any means to create an id can be used.\r\n     * Trans.SecureTokenId = PayflowUtility.RequestId;\r\n     * <p/>\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"SECURETOKEN = \" + trxnResponse.getSecureToken());\r\n     * System.out.println(\"SECURETOKENID = \" + trxnResponse.getSecureTokenId());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null ++ ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(Environment.NewLine + \"Errors = \" + ctx.toString());\r\n     * }\r\n     */\r\n    public String getCreateSecureToken() {\r\n        return createSecureToken;\r\n    }\r\n\r\n    public String getSecureTokenId() {\r\n        return secureTokenId;\r\n    }\r\n\r\n    /**\r\n     * the createSecureToken is set.\r\n     *\r\n     * @param createSecureToken String\r\n     */\r\n    public void setCreateSecureToken(String createSecureToken) {\r\n        this.createSecureToken = createSecureToken;\r\n    }\r\n\r\n    /**\r\n     * the secureTokenId is set.\r\n     *\r\n     * @param secureTokenId String\r\n     */\r\n    public void setSecureTokenId(String secureTokenId) {\r\n        this.secureTokenId = secureTokenId;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              UserInfo     - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param invoice               Invoice               - Invoice Object.\r\n     * @param tender                Tender                - Tender object such as  Card Tender.\r\n     * @param requestId             Strung             - Request Id\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new SaleTransaction.\r\n     * SaleTransaction trans = new SaleTransaction(user,\r\n     * connection, inv, tender, payflowUtility.getRequestId());\r\n     */\r\n\r\n    public SaleTransaction(UserInfo userInfo,\r\n                           PayflowConnectionData payflowConnectionData, Invoice invoice,\r\n                           BaseTender tender, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_SALE, userInfo,\r\n                payflowConnectionData, invoice,\r\n                tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo  UserInfo  - User Info object populated with user credentials.\r\n     * @param invoice   Invoice   - Invoice Object.\r\n     * @param tender    Tender    - Tender object such as  Card Tender.\r\n     * @param requestId String  - Request Id\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new SaleTransaction.\r\n     * SaleTransaction trans = new SaleTransaction(user,\r\n     * connection, inv, tender, payflowUtility.getRequestId());\r\n     */\r\n\r\n    public SaleTransaction(UserInfo userInfo,\r\n                           Invoice invoice,\r\n                           BaseTender tender, String requestId) {\r\n        this(userInfo,\r\n                null, invoice,\r\n                tender, requestId);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGID, origId));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CREATESECURETOKEN, createSecureToken));\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SECURETOKENID, secureTokenId));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/SaleTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/SaleTransaction.java	(date 1600062885341)
@@ -1,16 +1,15 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a voice authorization transaction.
- * <p/>
- * * This class is used to create and perform a
- * Sale Transaction.
- * </p>
+ *
+ * * This class is used to create and perform a Sale Transaction.
  *
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *
  * // Create a new SaleTransaction.
  * SaleTransaction trans = new SaleTransaction(user,
  * connection, inv, tender, PayflowUtility.RequestId);
@@ -38,13 +37,15 @@
  * System.out.println("POSTFPSMSG = " + fraudResp.getPostFpsMsg());
  * }
  * }
- * <p/>
+ *
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("Errors = " + ctx.toString());
  * }
+ * }
+ * </pre>
  */
 
 
@@ -85,11 +86,11 @@
 
     /**
      * Gets, Sets CreateSecureToken, SecureTokenId. This property is used to create a SecureToken and SecureTokenId.
-     * <p/>
+     *  * <p>
      * Use a secure token to send non-credit card transaction data to the Payflow server for storage in
      * a way that can't be intercepted and manipulated maliciously.The secure token must be used with the hosted
      * checkout pages. The token is good for a one-time transaction and is valid for 30 minutes.
-     * <p/>
+     *  * <p>
      * NOTE: Without using a secure token, Payflow Pro merchants can host their own payment page and Payflow Link merchants
      * can use a form post to send transaction data to the hosted checkout pages. However, by not using the secure token,
      * these Payflow gateway users are responsible for the secure handling of data.  To obtain a secure token, pass a unique,
@@ -97,7 +98,7 @@
      * ID with a secure token and returns the token as a string of up to 32 alphanumeric characters.  To pass the transaction
      * data to the hosted checkout page, you pass the secure token and token ID in an HTTP form post. The token and ID trigger
      * the Payflow server to retrieve your data and display it for buyer approval.
-     * <p/>
+     *  * <p>
      *
      * @return secureToken String
      *  This example shows how to set the flag to create a secure token.
@@ -106,26 +107,26 @@
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * // Since we are using the hosted payment pages, you will not be sending the credit card data with the
      * // Secure Token Request.  You just send all other 'sensitive' data within this request and when you
      * // call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned
      * // and the SECURETOKENID that was created and used in the request.
-     * <p/>
+     *  * <p>
      * // Create a new Secure Token Sale Transaction.  Even though this example is performing
      * // an authorization, you can create a secure token using SaleTransaction too.  Only Authorization and Sale
      * // type transactions are permitted.
      * SaleTransaction Trans = new SaleTransaction(User, Connection, Inv, null, PayflowUtility.RequestId);
-     * <p/>
+     *  * <p>
      * // Set the flag to create a Secure Token.
      * Trans.CreateSecureToken = "Y";
      * // The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to
      * // generate a random id, but any means to create an id can be used.
      * Trans.SecureTokenId = PayflowUtility.RequestId;
-     * <p/>
+     *  * <p>
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (resp != null)
@@ -142,7 +143,7 @@
      * }
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null ++ ctx.getErrorCount() > 0)
+     * if (ctx != null ++ Ctx.getErrorCount() %3E 0)
      * {
      * System.out.println(Environment.NewLine + "Errors = " + ctx.toString());
      * }
@@ -184,7 +185,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new SaleTransaction.
      * SaleTransaction trans = new SaleTransaction(user,
      * connection, inv, tender, payflowUtility.getRequestId());
@@ -208,7 +209,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new SaleTransaction.
      * SaleTransaction trans = new SaleTransaction(user,
      * connection, inv, tender, payflowUtility.getRequestId());
Index: src/sdk/transactions/paypal/payflow/VoidTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a void transaction.\r\n * <p/>\r\n * The Void transaction prevents a transaction from being settled, but does\r\n * not release the authorization (hold on funds) on the cardholder's account.\r\n * Delayed Capture, Sale, Credit, Authorization, and Voice\r\n * Authorization transactions can be voided. A Void transaction cannot be voided.\r\n * The Void must occur prior to settlement.\r\n * </p>\r\n *\r\n * @\r\n *  ................\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * // Create a new Void Transaction.\r\n * // The ORIGID is the PNREF no. for a previous transaction.\r\n * VoidTransaction trans = new VoidTransaction(\"V63A0A07BE5A\",\r\n * user, connection, payflowUtility.getRequestId());\r\n * // Submit the transaction.\r\n * Response resp = Trans.submitTransaction();\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse = resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.toString());\r\n * }\r\n */\r\n\r\npublic class VoidTransaction extends ReferenceTransaction {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param OrigId                -  Original Transaction Id.\r\n     * @param UserInfo              - User Info object populated with user credentials.\r\n     * @param PayflowConnectionData - Connection credentials object.\r\n     * @param RequestId             - Request Id\r\n     *                              <p/>\r\n     *                              ...............\r\n     *                              // Populate data objects\r\n     *                              ...............\r\n     *                              <p/>\r\n     *                              // Create a new Void Transaction.\r\n     *                              // The ORIGID is the PNREF no. for a previous transaction.\r\n     *                              VoidTransaction trans = new VoidTransaction(\"V63A0A07BE5A\",\r\n     *                              user, connection, payflowUtility.getRequestId());\r\n     */\r\n\r\n    public VoidTransaction(String OrigId, UserInfo UserInfo, PayflowConnectionData PayflowConnectionData, String RequestId) {\r\n        super(PayflowConstants.TRXTYPE_VOID, OrigId, UserInfo, PayflowConnectionData, RequestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param OrigId    - Original Transaction Id.\r\n     * @param UserInfo  - User Info object populated with user credentials.\r\n     * @param RequestId - Request Id\r\n     *                  <p/>\r\n     *                  ...............\r\n     *                  // Populate data objects\r\n     *                  ...............\r\n     *                  <p/>\r\n     *                  // Create a new Void Transaction.\r\n     *                  // The ORIGID is the PNREF no. for a previous transaction.\r\n     *                  VoidTransaction trans = new VoidTransaction(\"V63A0A07BE5A\",\r\n     *                  user, payflowUtility.getRequestId());\r\n     */\r\n    public VoidTransaction(String OrigId, UserInfo UserInfo, String RequestId) {\r\n        super(PayflowConstants.TRXTYPE_VOID, OrigId, UserInfo, RequestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param OrigId                String         - OrigId Original Transaction Id.\r\n     * @param UserInfo              - User Info object populated with user credentials.\r\n     * @param PayflowConnectionData - Connection credentials object.\r\n     * @param Invoice               - Invoice object.\r\n     * @param RequestId             - Request Id\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Void Transaction.\r\n     * // The ORIGID is the PNREF no. for a previous transaction.\r\n     * VoidTransaction trans = new VoidTransaction(\"V63A0A07BE5A\",\r\n     * user, connection, inv ,payflowUtility.getRequestId());\r\n     */\r\n    public VoidTransaction(String OrigId, UserInfo UserInfo, PayflowConnectionData PayflowConnectionData, Invoice Invoice, String RequestId) {\r\n        super(PayflowConstants.TRXTYPE_VOID, OrigId, UserInfo, PayflowConnectionData, Invoice, RequestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param origId    String    - OrigId Original Transaction Id.\r\n     * @param userInfo  UserInfo        - User Info object populated with user credentials.\r\n     * @param invoice   Invoice        - Invoice object.\r\n     * @param requestId String     - Request Id\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Void Transaction.\r\n     * // The ORIGID is the PNREF no. for a previous transaction.\r\n     * VoidTransaction trans = new VoidTransaction(\"V63A0A07BE5A\",\r\n     * user, inv, payflowUtility.getRequestId());\r\n     */\r\n    public VoidTransaction(String origId, UserInfo userInfo, Invoice invoice, String requestId) {\r\n        this(origId, userInfo, null, invoice, requestId);\r\n    }\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/VoidTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/VoidTransaction.java	(date 1600063871635)
@@ -1,20 +1,19 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a void transaction.
- * <p/>
+ *
  * The Void transaction prevents a transaction from being settled, but does
  * not release the authorization (hold on funds) on the cardholder's account.
  * Delayed Capture, Sale, Credit, Authorization, and Voice
  * Authorization transactions can be voided. A Void transaction cannot be voided.
  * The Void must occur prior to settlement.
- * </p>
  *
- * @
  *  ................
  * // Populate data objects
  * ...............
- * <p/>
+ *
  * // Create a new Void Transaction.
  * // The ORIGID is the PNREF no. for a previous transaction.
  * VoidTransaction trans = new VoidTransaction("V63A0A07BE5A",
@@ -32,13 +31,15 @@
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
  * }
- * <p/>
+ *
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("Errors = " + ctx.toString());
  * }
+ * }
+ * </pre>
  */
 
 public class VoidTransaction extends ReferenceTransaction {
@@ -50,11 +51,11 @@
      * @param UserInfo              - User Info object populated with user credentials.
      * @param PayflowConnectionData - Connection credentials object.
      * @param RequestId             - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              ...............
      *                              // Populate data objects
      *                              ...............
-     *                              <p/>
+     *                               * <p>
      *                              // Create a new Void Transaction.
      *                              // The ORIGID is the PNREF no. for a previous transaction.
      *                              VoidTransaction trans = new VoidTransaction("V63A0A07BE5A",
@@ -71,11 +72,11 @@
      * @param OrigId    - Original Transaction Id.
      * @param UserInfo  - User Info object populated with user credentials.
      * @param RequestId - Request Id
-     *                  <p/>
+     *                   * <p>
      *                  ...............
      *                  // Populate data objects
      *                  ...............
-     *                  <p/>
+     *                   * <p>
      *                  // Create a new Void Transaction.
      *                  // The ORIGID is the PNREF no. for a previous transaction.
      *                  VoidTransaction trans = new VoidTransaction("V63A0A07BE5A",
@@ -96,7 +97,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Void Transaction.
      * // The ORIGID is the PNREF no. for a previous transaction.
      * VoidTransaction trans = new VoidTransaction("V63A0A07BE5A",
@@ -116,7 +117,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Void Transaction.
      * // The ORIGID is the PNREF no. for a previous transaction.
      * VoidTransaction trans = new VoidTransaction("V63A0A07BE5A",
Index: src/sdk/transactions/paypal/payflow/RecurringAddTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a recurring transaction with\r\n * add action.\r\n * <p/>\r\n * RecurringAddTransaction is used to add a new recurring profile\r\n * either by submitting the data that defines the profile or by converting an\r\n * existing transaction into a profile. Upon successful creation of a profile,\r\n * PayPal activates the profile, performs the Optional Transaction if specified,\r\n * initiates the payment cycle, and returns a Profile ID (a 12-character string that\r\n * uniquely identifies the profile for searching and reporting). Upon failure, PayPal\r\n * does not generate the profile and returns an error message.\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * //Set the Recurring related information.\r\n * RecurringInfo recurInfo = new RecurringInfo();\r\n * // The date that the first payment will be processed.\r\n * // This will be of the format mmddyyyy.\r\n * recurInfo.setStart(\"01012009\");\r\n * recurInfo.setProfileName (\"PayPal\");\r\n * <p/>\r\n * <p/>\r\n * // Specifies how often the payment occurs. All PAYPERIOD values must use\r\n * // capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /\r\n * // QTER / SMYR / YEAR\r\n * recurInfo.setPayPeriod (\"WEEK\");\r\n * <p/>\r\n * // Create a new RecurringAddTransaction\r\n * RecurringAddTransaction trans = new RecurringAddTransaction(\r\n * user, connection, inv, card, recurInfo, PayflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"/n\" + \"Errors = \" + Ctx.ToString());\r\n * }\r\n */\r\n\r\npublic class RecurringAddTransaction extends RecurringTransaction {\r\n\r\n\r\n    private String origId;\r\n\r\n    /**\r\n     * Gets the OrigId.\r\n     *\r\n     * @return String\r\n     */\r\n    public String getOrigId() {\r\n        return origId;\r\n    }\r\n\r\n    /**\r\n     * Sets the orig Id.\r\n     *\r\n     * @param origId String\r\n     */\r\n    public void setOrigId(String origId) {\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param UserInfo              - User Info object populated with user credentials.\r\n     * @param PayflowConnectionData - Connection credentials object.\r\n     * @param Invoice               - Invoice object.\r\n     * @param Tender                - Tender object such as  Card Tender object.\r\n     * @param RecurringInfo         - Recurring Info object.\r\n     * @param RequestId             - Request Id\r\n     *                              <p/>\r\n     *                              RecurringAddTransaction is used to add a new recurring profile\r\n     *                              either by submitting the data that defines the profile or by converting an\r\n     *                              existing transaction into a profile. Upon successful creation of a profile,\r\n     *                              PayPal activates the profile, performs the Optional Transaction if specified,\r\n     *                              initiates the payment cycle, and returns a Profile ID (a 12-character string that\r\n     *                              uniquely identifies the profile for searching and reporting). Upon failure, PayPal\r\n     *                              does not generate the profile and returns an error message.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringCancelTransaction.\r\n     * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, connection, inv, tender, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringAddTransaction(UserInfo UserInfo,\r\n                                   PayflowConnectionData PayflowConnectionData,\r\n                                   Invoice Invoice,\r\n                                   BaseTender Tender,\r\n                                   RecurringInfo RecurringInfo,\r\n                                   String RequestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_ADD,\r\n                RecurringInfo,\r\n                UserInfo, PayflowConnectionData, Invoice, Tender, RequestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param UserInfo      - User Info object populated with user credentials.\r\n     * @param Invoice       - Invoice object.\r\n     * @param Tender        - Tender object such as  Card Tender object.\r\n     * @param RecurringInfo - Recurring Info object.\r\n     * @param RequestId     - Request Id\r\n     *                      <p/>\r\n     *                      RecurringAddTransaction is used to add a new recurring profile\r\n     *                      either by submitting the data that defines the profile or by converting an\r\n     *                      existing transaction into a profile. Upon successful creation of a profile,\r\n     *                      PayPal activates the profile, performs the Optional Transaction if specified,\r\n     *                      initiates the payment cycle, and returns a Profile ID (a 12-character string that\r\n     *                      uniquely identifies the profile for searching and reporting). Upon failure, PayPal\r\n     *                      does not generate the profile and returns an error message.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringCancelTransaction.\r\n     * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, inv, tender, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringAddTransaction(UserInfo UserInfo,\r\n                                   Invoice Invoice,\r\n                                   BaseTender Tender,\r\n                                   RecurringInfo RecurringInfo,\r\n                                   String RequestId) {\r\n        this(UserInfo, null, Invoice, Tender, RecurringInfo, RequestId);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGID, origId));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/RecurringAddTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/RecurringAddTransaction.java	(date 1600063729869)
@@ -1,9 +1,10 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a recurring transaction with
  * add action.
- * <p/>
+ *
  * RecurringAddTransaction is used to add a new recurring profile
  * either by submitting the data that defines the profile or by converting an
  * existing transaction into a profile. Upon successful creation of a profile,
@@ -11,32 +12,29 @@
  * initiates the payment cycle, and returns a Profile ID (a 12-character string that
  * uniquely identifies the profile for searching and reporting). Upon failure, PayPal
  * does not generate the profile and returns an error message.
- * </p>
  *
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
  * //Set the Recurring related information.
  * RecurringInfo recurInfo = new RecurringInfo();
  * // The date that the first payment will be processed.
  * // This will be of the format mmddyyyy.
  * recurInfo.setStart("01012009");
  * recurInfo.setProfileName ("PayPal");
- * <p/>
- * <p/>
+ *
  * // Specifies how often the payment occurs. All PAYPERIOD values must use
  * // capital letters and can be any of WEEK / BIWK / SMMO / FRWK / MONT /
  * // QTER / SMYR / YEAR
  * recurInfo.setPayPeriod ("WEEK");
- * <p/>
+ *
  * // Create a new RecurringAddTransaction
  * RecurringAddTransaction trans = new RecurringAddTransaction(
  * user, connection, inv, card, recurInfo, PayflowUtility.getRequestId());
- * <p/>
+ *
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *
  * if (Resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -46,7 +44,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
+ *
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -57,10 +55,12 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("/n" + "Errors = " + Ctx.ToString());
  * }
+ * }
+ * </pre>
  */
 
 public class RecurringAddTransaction extends RecurringTransaction {
@@ -95,7 +95,7 @@
      * @param Tender                - Tender object such as  Card Tender object.
      * @param RecurringInfo         - Recurring Info object.
      * @param RequestId             - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              RecurringAddTransaction is used to add a new recurring profile
      *                              either by submitting the data that defines the profile or by converting an
      *                              existing transaction into a profile. Upon successful creation of a profile,
@@ -107,12 +107,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringCancelTransaction.
      * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, connection, inv, tender, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -136,7 +135,7 @@
      * @param Tender        - Tender object such as  Card Tender object.
      * @param RecurringInfo - Recurring Info object.
      * @param RequestId     - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      RecurringAddTransaction is used to add a new recurring profile
      *                      either by submitting the data that defines the profile or by converting an
      *                      existing transaction into a profile. Upon successful creation of a profile,
@@ -148,12 +147,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringCancelTransaction.
      * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, inv, tender, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
Index: src/sdk/transactions/paypal/payflow/FraudReviewTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a fraud review transaction.\r\n * <p>Fraud Review can be used as alternative to manually\r\n * approving transactions under fraud on PayPal manager.</p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * // Ensure that Purchase price ceiling filter is set to $50.\r\n * // Create a new Sale Transaction with purchase price ceiling amount filter set to $50.\r\n * // Submit the sale transaction and get the PNRef number from this.\r\n * FraudReviewTransaction trans = new FraudReviewTransaction(\"PNRef of Fraud Sale\", \"RMS_APPROVE\",\r\n * user, connection, PayflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors (optional code).\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"/n\" + \"Errors = \" + ctx.toString());\r\n * }\r\n */\r\n\r\npublic final class FraudReviewTransaction extends ReferenceTransaction {\r\n\r\n    private String updateAction;\r\n\r\n    protected String getUpdateAction() {\r\n        return updateAction;\r\n    }\r\n\r\n    protected void setUpdateAction(String updateAction) {\r\n        this.updateAction = updateAction;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param origId                String                - Original Transaction Id.\r\n     * @param updateAction          String                - Update Action RMS_APPROVE or RMS_MERCHANT_DECLINE.\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param requestId             String                - Request Id.\r\n     *                              <p/>\r\n     *                              <p/>\r\n     *                              Fraud Review can be used as alternative to manually\r\n     *                              approving transactions under fraud.\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Ensure that Purchase price ceiling filter is set to $50.\r\n     * // Create a new Sale Transaction with purchase price ceiling amount filter set to $50.\r\n     * // Submit the sale transaction and get the PNRef number from this.\r\n     * FraudReviewTransaction trans = new FraudReviewTransaction(\"PNRef of Fraud Sale\", \"RMS_APPROVE\",\r\n     * user, connection, PayflowUtility.getRequestId());\r\n     */\r\n\r\n\r\n    public FraudReviewTransaction(String origId,\r\n                                  String updateAction,\r\n                                  UserInfo userInfo,\r\n                                  PayflowConnectionData payflowConnectionData,\r\n                                  String requestId) {\r\n        super(PayflowConstants.TRXTYPE_FRAUDAPPROVE, origId, userInfo,\r\n                payflowConnectionData, requestId);\r\n        this.updateAction = updateAction;\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param origId       String   - Original Transaction Id.\r\n     * @param updateAction String   - Update Action RMS_APPROVE or RMS_MERCHANT_DECLINE.\r\n     * @param userInfo     UserInfo - User Info object populated with user credentials.\r\n     * @param requestId    String   - Request Id.\r\n     *                     <p/>\r\n     *                     <p/>\r\n     *                     Fraud Review can be used as alternative to manually\r\n     *                     approving transactions under fraud.\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Ensure that Purchase price ceiling filter is set to $50.\r\n     * // Create a new Sale Transaction with purchase price ceiling amount filter set to $50.\r\n     * // Submit the sale transaction and get the PNRef number from this.\r\n     * FraudReviewTransaction trans = new FraudReviewTransaction(\"PNRef of Fraud Sale\", \"RMS_APPROVE\",\r\n     * user,  PayflowUtility.getRequestId());\r\n     */\r\n\r\n    public FraudReviewTransaction(String origId,\r\n                                  String updateAction,\r\n                                  UserInfo userInfo,\r\n                                  String requestId) {\r\n        this(origId, updateAction, userInfo, null, requestId);\r\n    }\r\n\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        //Add UPDATEACTION\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_UPDATEACTION,\r\n                updateAction));\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/FraudReviewTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/FraudReviewTransaction.java	(date 1600060217536)
@@ -8,16 +8,16 @@
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *  * <p>
  * // Ensure that Purchase price ceiling filter is set to $50.
  * // Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
  * // Submit the sale transaction and get the PNRef number from this.
  * FraudReviewTransaction trans = new FraudReviewTransaction("PNRef of Fraud Sale", "RMS_APPROVE",
  * user, connection, PayflowUtility.getRequestId());
- * <p/>
+ *  * <p>
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *  * <p>
  * if (resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -27,10 +27,10 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * }
  * }
- * <p/>
+ *  * <p>
  * // Get the Context and check for any contained SDK specific errors (optional code).
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
  * {
  * System.out.println("/n" + "Errors = " + ctx.toString());
  * }
@@ -56,14 +56,13 @@
      * @param userInfo              UserInfo              - User Info object populated with user credentials.
      * @param payflowConnectionData PayflowConnectionData - Connection credentials object.
      * @param requestId             String                - Request Id.
-     *                              <p/>
-     *                              <p/>
+     *                               * <p>
      *                              Fraud Review can be used as alternative to manually
      *                              approving transactions under fraud.
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Ensure that Purchase price ceiling filter is set to $50.
      * // Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
      * // Submit the sale transaction and get the PNRef number from this.
@@ -89,14 +88,13 @@
      * @param updateAction String   - Update Action RMS_APPROVE or RMS_MERCHANT_DECLINE.
      * @param userInfo     UserInfo - User Info object populated with user credentials.
      * @param requestId    String   - Request Id.
-     *                     <p/>
-     *                     <p/>
+     *                      * <p>
      *                     Fraud Review can be used as alternative to manually
      *                     approving transactions under fraud.
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Ensure that Purchase price ceiling filter is set to $50.
      * // Create a new Sale Transaction with purchase price ceiling amount filter set to $50.
      * // Submit the sale transaction and get the PNRef number from this.
Index: src/sdk/transactions/paypal/payflow/RecurringPaymentTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a recurring transaction with\r\n * Payment action.\r\n * <p/>\r\n * RecurringPaymentTransaction action performs a real-time retry on\r\n * a transaction that is in the retry state. The response string is similar\r\n * to the string for Optional transactions, except that, upon approval,\r\n * the profile is updated to reflect the successful retry.\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * //Set the Recurring related information.\r\n * RecurringInfo recurInfo = new RecurringInfo();\r\n * recurInfo.setOrigProfileId (\"RT0000001350\");\r\n * // The date that the first payment will be processed.\r\n * // This will be of the format mmddyyyy.\r\n * <p/>\r\n * RecurInfo.setPaymentNum (\"01012009\");\r\n * <p/>\r\n * <p/>\r\n * <p/>\r\n * // Create a new Invoice data object with the Amount, Billing Address etc. details.\r\n * Invoice inv = new Invoice();\r\n * <p/>\r\n * // Set Amount.\r\n * Currency amt = new Currency(new Double(25.12));\r\n * inv.setAmt (amt);\r\n * inv.setPoNum (\"PO12345\");\r\n * inv.setInvNum (\"INV12345\");\r\n * <p/>\r\n * // Set the Billing Address details.\r\n * BillTo bill = new BillTo();\r\n * bill.setBillToStreet (\"123 Main St.\");\r\n * bill.setBillToZip (\"12345\");\r\n * inv.setBillTo (bill);\r\n * <p/>\r\n * // Create a new RecurringPaymentTransaction.\r\n * RecurringPaymentTransaction trans = new RecurringPaymentTransaction(\r\n * user, connection, recurInfo, inv, PayflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"/n\" + \"Errors = \" + Ctx.ToString());\r\n * }\r\n */\r\npublic class RecurringPaymentTransaction extends RecurringTransaction {\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData - Connection credentials object.\r\n     * @param recurringInfo         - Recurring Info object.\r\n     * @param invoice               - Invoice object.\r\n     * @param requestId             - Request Id\r\n     *                              <p/>\r\n     *                              RecurringPaymentTransaction action performs a real-time retry on\r\n     *                              a transaction that is in the retry state. The response string is similar\r\n     *                              to the string for Optional transactions, except that, upon approval,\r\n     *                              the profile is updated to reflect the successful retry.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringPaymentTransaction.\r\n     * RecurringPaymentTransaction trans = new RecurringPaymentTransaction(user, connection, recurInfo, inv\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    public RecurringPaymentTransaction(UserInfo userInfo,\r\n                                       PayflowConnectionData payflowConnectionData,\r\n                                       RecurringInfo recurringInfo,\r\n                                       Invoice invoice, String requestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_PAYMENT,\r\n                recurringInfo,\r\n                userInfo, payflowConnectionData, invoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo      - User Info object populated with user credentials.\r\n     * @param recurringInfo - Recurring Info object.\r\n     * @param invoice       - Invoice object.\r\n     * @param requestId     - Request Id\r\n     *                      <p/>\r\n     *                      RecurringPaymentTransaction action performs a real-time retry on\r\n     *                      a transaction that is in the retry state. The response string is similar\r\n     *                      to the string for Optional transactions, except that, upon approval,\r\n     *                      the profile is updated to reflect the successful retry.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringPaymentTransaction.\r\n     * RecurringPaymentTransaction trans = new RecurringPaymentTransaction(user, recurInfo, inv\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    public RecurringPaymentTransaction(UserInfo userInfo,\r\n                                       RecurringInfo recurringInfo,\r\n                                       Invoice invoice, String requestId) {\r\n        this(userInfo, null, recurringInfo, invoice, requestId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/RecurringPaymentTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/RecurringPaymentTransaction.java	(date 1600062634954)
@@ -1,51 +1,50 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a recurring transaction with
  * Payment action.
- * <p/>
+ *
  * RecurringPaymentTransaction action performs a real-time retry on
  * a transaction that is in the retry state. The response string is similar
  * to the string for Optional transactions, except that, upon approval,
  * the profile is updated to reflect the successful retry.
  * </p>
  *
- *  ...............
+ * ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *
  * //Set the Recurring related information.
  * RecurringInfo recurInfo = new RecurringInfo();
  * recurInfo.setOrigProfileId ("RT0000001350");
  * // The date that the first payment will be processed.
  * // This will be of the format mmddyyyy.
- * <p/>
+ *
  * RecurInfo.setPaymentNum ("01012009");
- * <p/>
- * <p/>
- * <p/>
+ *
  * // Create a new Invoice data object with the Amount, Billing Address etc. details.
  * Invoice inv = new Invoice();
- * <p/>
+ *
  * // Set Amount.
  * Currency amt = new Currency(new Double(25.12));
  * inv.setAmt (amt);
  * inv.setPoNum ("PO12345");
  * inv.setInvNum ("INV12345");
- * <p/>
+ *
  * // Set the Billing Address details.
  * BillTo bill = new BillTo();
  * bill.setBillToStreet ("123 Main St.");
  * bill.setBillToZip ("12345");
  * inv.setBillTo (bill);
- * <p/>
+ *
  * // Create a new RecurringPaymentTransaction.
  * RecurringPaymentTransaction trans = new RecurringPaymentTransaction(
  * user, connection, recurInfo, inv, PayflowUtility.getRequestId());
- * <p/>
+ *
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *
  * if (Resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -55,7 +54,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
+ *
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -66,10 +65,12 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("/n" + "Errors = " + Ctx.ToString());
  * }
+ * }
+ * </pre>
  */
 public class RecurringPaymentTransaction extends RecurringTransaction {
     /**
@@ -80,7 +81,7 @@
      * @param recurringInfo         - Recurring Info object.
      * @param invoice               - Invoice object.
      * @param requestId             - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              RecurringPaymentTransaction action performs a real-time retry on
      *                              a transaction that is in the retry state. The response string is similar
      *                              to the string for Optional transactions, except that, upon approval,
@@ -89,12 +90,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringPaymentTransaction.
      * RecurringPaymentTransaction trans = new RecurringPaymentTransaction(user, connection, recurInfo, inv
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -114,7 +114,7 @@
      * @param recurringInfo - Recurring Info object.
      * @param invoice       - Invoice object.
      * @param requestId     - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      RecurringPaymentTransaction action performs a real-time retry on
      *                      a transaction that is in the retry state. The response string is similar
      *                      to the string for Optional transactions, except that, upon approval,
@@ -123,12 +123,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringPaymentTransaction.
      * RecurringPaymentTransaction trans = new RecurringPaymentTransaction(user, recurInfo, inv
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
Index: src/sdk/transactions/paypal/payflow/RecurringCancelTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a recurring transaction with\r\n * Cancel action.\r\n * <p/>\r\n * RecurringCancelTransaction is used to cancel  the recurring profile\r\n * to deactivate the profile from performing further transactions. The profile is\r\n * marked as cancelled and the customer is no longer billed. PayPal records the\r\n * cancellation date.\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * //Set the Recurring related information.\r\n * RecurringInfo recurInfo = new RecurringInfo();\r\n * recurInfo.setOrigProfileId (\"RT0000001350\");\r\n * <p/>\r\n * // Create a new RecurringCancelTransaction\r\n * RecurringCancelTransaction trans = new RecurringCancelTransaction(\r\n * user, connection, recurInfo, PayflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"/n\" + \"Errors = \" + Ctx.ToString());\r\n * }\r\n */\r\n\r\n\r\npublic class RecurringCancelTransaction extends RecurringTransaction {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              UserInfo             - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param recurringInfo         RecurringInfo   - Recurring Info object.\r\n     * @param requestId             String              - Request Id\r\n     *                              <p/>\r\n     *                              <p/>\r\n     *                              RecurringCancelTransaction is used to cancel  the recurring profile\r\n     *                              to deactivate the profile from performing further transactions. The profile is\r\n     *                              marked as cancelled and the customer is no longer billed. PayPal records the\r\n     *                              cancellation date.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringCancelTransaction.\r\n     * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, connection, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    //\r\n    public RecurringCancelTransaction(UserInfo userInfo,\r\n                                      PayflowConnectionData payflowConnectionData,\r\n                                      RecurringInfo recurringInfo, String requestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_CANCEL,\r\n                recurringInfo,\r\n                userInfo, payflowConnectionData, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo      UserInfo             - User Info object populated with user credentials.\r\n     * @param recurringInfo RecurringInfo   - Recurring Info object.\r\n     * @param requestId     String              - Request Id\r\n     *                      <p/>\r\n     *                      <p/>\r\n     *                      RecurringCancelTransaction is used to cancel  the recurring profile\r\n     *                      to deactivate the profile from performing further transactions. The profile is\r\n     *                      marked as cancelled and the customer is no longer billed. PayPal records the\r\n     *                      cancellation date.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringCancelTransaction.\r\n     * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringCancelTransaction(UserInfo userInfo,\r\n                                      RecurringInfo recurringInfo, String requestId) {\r\n        this(userInfo, null, recurringInfo, requestId);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/RecurringCancelTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/RecurringCancelTransaction.java	(date 1600062095203)
@@ -1,9 +1,10 @@
 package paypal.payflow;
 
 /**
+ * <pre> {@code
  * This class is used to perform a recurring transaction with
  * Cancel action.
- * <p/>
+ *  * <p>
  * RecurringCancelTransaction is used to cancel  the recurring profile
  * to deactivate the profile from performing further transactions. The profile is
  * marked as cancelled and the customer is no longer billed. PayPal records the
@@ -13,18 +14,18 @@
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *  * <p>
  * //Set the Recurring related information.
  * RecurringInfo recurInfo = new RecurringInfo();
  * recurInfo.setOrigProfileId ("RT0000001350");
- * <p/>
+ *  * <p>
  * // Create a new RecurringCancelTransaction
  * RecurringCancelTransaction trans = new RecurringCancelTransaction(
  * user, connection, recurInfo, PayflowUtility.getRequestId());
- * <p/>
+ *  * <p>
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *  * <p>
  * if (Resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -34,7 +35,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
+ *  * <p>
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -45,10 +46,12 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("/n" + "Errors = " + Ctx.ToString());
  * }
+ * }
+ * </pre>
  */
 
 
@@ -61,8 +64,7 @@
      * @param payflowConnectionData PayflowConnectionData - Connection credentials object.
      * @param recurringInfo         RecurringInfo   - Recurring Info object.
      * @param requestId             String              - Request Id
-     *                              <p/>
-     *                              <p/>
+     *                               * <p>
      *                              RecurringCancelTransaction is used to cancel  the recurring profile
      *                              to deactivate the profile from performing further transactions. The profile is
      *                              marked as cancelled and the customer is no longer billed. PayPal records the
@@ -71,12 +73,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringCancelTransaction.
      * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, connection, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -95,8 +96,7 @@
      * @param userInfo      UserInfo             - User Info object populated with user credentials.
      * @param recurringInfo RecurringInfo   - Recurring Info object.
      * @param requestId     String              - Request Id
-     *                      <p/>
-     *                      <p/>
+     *                       * <p>
      *                      RecurringCancelTransaction is used to cancel  the recurring profile
      *                      to deactivate the profile from performing further transactions. The profile is
      *                      marked as cancelled and the customer is no longer billed. PayPal records the
@@ -105,12 +105,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringCancelTransaction.
      * RecurringCancelTransaction trans = new RecurringCancelTransaction(user, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
Index: src/sdk/transactions/paypal/payflow/BaseTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\nimport java.util.ArrayList;\r\n\r\n\r\n/**\r\n * This class is the base class for all transaction objects. It has methods for generating the transaction request,\r\n * sending it to the server and obtaining the response.\r\n * <p/>\r\n * <p>This class can be extended to create a new transaction type.</p>\r\n *\r\n *  This example shows how to create and perform an Sale transaction using a Basetransaction Object.\r\n * <p/>\r\n * ..........\r\n * ..........\r\n * //Populate required data objects.\r\n * ..........\r\n * ..........\r\n * <p/>\r\n * //Create a new Base Transaction.\r\n * BaseTransaction trans = new BaseTransaction(\"S\",User, Connection, Inv, Card, PayflowUtility.RequestId);\r\n * <p/>\r\n * //Submit the transaction.\r\n * trans.submitTransaction();\r\n * // Get the Response\r\n * Response resp = trans.getResponse();\r\n * <p/>\r\n * // Display the transaction response parameters.\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * <p/>\r\n * if (TrxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n * }\r\n * <p/>\r\n * <p/>\r\n * // Get the Fraud Response parameters.\r\n * FraudResponse fraudResp =  resp.getFraudResponse();\r\n * if (fraudResp != null)\r\n * {\r\n * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n * }\r\n * <p/>\r\n * // Display the response.\r\n * System.out.println(PayflowUtility.getStatus(Resp));\r\n * <p/>\r\n * <p/>\r\n * // Get the Transaction Context and check for any contained SDK specific errors (optional code).\r\n * Context transCtx = resp.getTransactionContext();\r\n * if (transCtx != null &amp;&amp; transCtx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(+ \"Transaction Errors = \" + transCtx.toString());\r\n * }\r\n * <p/>\r\n * }\r\n */\r\npublic class BaseTransaction {\r\n    /**\r\n     * Arraylist of Extend Data objects. The arraylist contains objects of type ExtendData.\r\n     * ExtendData has a parameter name and value and is used for sending any additional parameter currently not\r\n     * supported by the SDK.\r\n     */\r\n    private ArrayList extData;\r\n\r\n    /**\r\n     * Type of transaction to perform, indicated by a single character.\r\n     */\r\n    private String trxType;\r\n\r\n    /**\r\n     * Connection parameters to connect to the PayPal Payment Server.\r\n     */\r\n    private PayflowConnectionData payflowConnectionData;\r\n\r\n    /**\r\n     * Transaction request in Name-Value Pair format.\r\n     */\r\n    private String request;\r\n\r\n    /**\r\n     * Tender object for ACH, Credit Card, PINless Debit & eCheck\r\n     */\r\n    private BaseTender tender;\r\n\r\n    /**\r\n     * Transaction invoice object. Has parameters like Amt, InvNum, BillTo,\r\n     * ShipTo etc.\r\n     */\r\n    private Invoice invoice;\r\n\r\n    /**\r\n     * Response object for the Transaction. Has objects like Transaction Response,\r\n     * Fraud Response, Recurring Response etc.\r\n     */\r\n    private Response response;\r\n\r\n    /**\r\n     * Payflow user credentials. Has parameters like User, Vendor, Partner, Password etc.\r\n     */\r\n    private UserInfo userInfo;\r\n\r\n    /**\r\n     * Value (LOW, MEDIUM or HIGH) that controls the detail level and format of transaction results.\r\n     * LOW (default) returns normalized values. MEDIUM or HIGH return the processor's raw response values.\r\n     * <p>Maps to Payflow Parameter - VERBOSITY</p>\r\n     */\r\n    private String verbosity;\r\n\r\n    /**\r\n     * Context object containing the Error Objects. The context object is available to all the classes in the\r\n     * SDK. The individual classes add their messages in form of Error Objects to the Context object.\r\n     *\r\n     * @see UserInfo\r\n     */\r\n    private Context context;\r\n\r\n    /**\r\n     * Unique request id for the transaction.\r\n     * <p>Maps to Payflow Parameter in header - PAYFLOW-REQUEST-ID</p>\r\n     */\r\n    public String requestId;   // removed \"static\" 02/22/2016 - wasn't thread safe\r\n\r\n    /**\r\n     * Request Buffer. This is used to build the request string in Name-Value pair format from Data Objects.\r\n     */\r\n    private StringBuffer requestBuffer;\r\n\r\n    /**\r\n     * Client Header Information\r\n     */\r\n    private ClientInfo clientInfo;\r\n\r\n    /**\r\n     * Buyer auth status information\r\n     */\r\n    private BuyerAuthStatus buyerAuthStatus;\r\n\r\n    /**\r\n     * @return Buyer auth status object\r\n     */\r\n    public BuyerAuthStatus getBuyerAuthStatus() {\r\n        return this.buyerAuthStatus;\r\n    }\r\n\r\n    /**\r\n     * Sets buyer\r\n     *\r\n     * @param buyerAuthStatus buyer auth status object\r\n     */\r\n    public void setBuyerAuthStatus(BuyerAuthStatus buyerAuthStatus) {\r\n        this.buyerAuthStatus = buyerAuthStatus;\r\n    }\r\n\r\n\r\n    public ClientInfo getClientInfo() {\r\n        return clientInfo;\r\n    }\r\n\r\n\r\n    public void setClientInfo(ClientInfo clientInfo) {\r\n        this.clientInfo = clientInfo;\r\n    }\r\n\r\n    /**\r\n     * Gets the extend data list.\r\n     *\r\n     * @return extData ArrayList\r\n     *  ............\r\n     * //Trans is the transaction object.\r\n     * ............\r\n     * ArrayList extDataList = trans.getExtendData();\r\n     */\r\n    public ArrayList getExtData() {\r\n        return extData;\r\n    }\r\n\r\n    /**\r\n     * sets extData ArrayList\r\n     *\r\n     * @param extData ArrayList\r\n     */\r\n    public void setExtData(ExtendData extData) {\r\n\r\n        if (this.extData == null) {\r\n            this.extData = new ArrayList();\r\n        }\r\n        if (extData != null) {\r\n            extData.setContext(context);\r\n            extData.setRequestBuffer(requestBuffer);\r\n            this.extData.add(extData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Transaction request in Name-Value Pair format.\r\n     *\r\n     * @return request String\r\n     *  TRXTYPE[1]=S&amp;ACCT[16]=5105105105105100&amp;EXPDATE[4]=0109&amp;TENDER[1]=C&amp;INVNUM[8]=INV12345&amp;AMT[5]=25.12\r\n     * USER=user&amp;VENDOR=vendor&amp;PARTNER=partner&amp;PWD=password\r\n     */\r\n    public String getRequest() {\r\n        return request;\r\n    }\r\n\r\n    public String getRequestId() {\r\n        return requestId;\r\n    }\r\n\r\n    /**\r\n     * @param requestId String\r\n     *                  ............\r\n     *                  //Trans is the transaction object.\r\n     *                  //A unique RequestId can be generated\r\n     *                  //using the PayflowUtility.getRequestId() property.\r\n     *                  ............\r\n     *                  trans.setRequestId(PayflowUtility.getRequestId();\r\n     *                  System.out.println(\"Transaction RequestId = \" + trans.getRequestId());\r\n     */\r\n    public void setRequestId(String requestId) {\r\n            this.requestId = requestId;\r\n        }\r\n\r\n    /**\r\n     * Gets the transaction response object.\r\n     *\r\n     * @return response Response\r\n     *  ............\r\n     * //Trans is the transaction object.\r\n     * ............\r\n     * <p/>\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n     * }\r\n     * // Get the Fraud Response parameters.\r\n     * FraudResponse fraudResp = resp.getFraudResponse();\r\n     * if (fraudResp != null)\r\n     * {\r\n     * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n     * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null ++ Ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(Environment.NewLine + \"Errors = \" + Ctx.ToString());\r\n     * }\r\n     */\r\n    public Response getResponse() {\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * gets the tender object\r\n     *\r\n     * @return tender BaseTender\r\n     */\r\n    public BaseTender getTender() {\r\n        return tender;\r\n    }\r\n\r\n    /**\r\n     * Tender object for ACH, Credit Card, PINless Debit &amp; eCheck.\r\n     *\r\n     * @param tender BaseTender\r\n     *               <p/>\r\n     *               Allowed Tender Types are:\r\n     *               </p>\r\n     *               {@paypal.listtable}\r\n     *               {@paypal.ltr}\r\n     *               {@paypal.lth}Tender Type{@paypal.elth}\r\n     *               {@paypal.lth}Tender Name<@paypal.elth}\r\n     *               {@paypal.eltr}\r\n     *               {@paypal.ltr}\r\n     *               {@paypal.ltd}A{@paypal.eltd}\r\n     *               {@paypal.ltd}ACH ( Automatic Clearing House )<@paypal.eltd}\r\n     *               {@paypal.eltr}\r\n     *               {@paypal.ltr}\r\n     *               {@paypal.ltd}C{@paypal.eltd}\r\n     *               {@paypal.ltd}Credit Card{@paypal.eltd}\r\n     *               {@paypal.eltr}\r\n     *               {@paypal.ltr}\r\n     *               {@paypal.ltd}D{@paypal.eltd}\r\n     *               {@paypal.ltd}PINLess Debit{@paypal.eltd}\r\n     *               {@paypal.eltr}\r\n     *               {@paypal.ltr}\r\n     *               {@paypal.ltd}K{@paypal.eltd}\r\n     *               {@paypal.ltd}e-Check ( TeleCheck ){@paypal.eltd}\r\n     *               {@paypal.eltr}\r\n     *               {@paypal.endlisttable}\r\n     *               <p>Each Tender type Maps to Payflow Parameter - TENDER</p>\r\n     * @see ACHTender\r\n     * @see CardTender\r\n     * @see CheckTender\r\n     */\r\n    public void setTender(BaseTender tender) {\r\n        this.tender = tender;\r\n    }\r\n\r\n    /**\r\n     * Type of transaction to perform, indicated by a single character.\r\n     * Credit payments require an ORIGID referring to an earlier Debit/Sale payment,\r\n     * and the AMT must be empty or the exact amount of the original Debit/Sale payment.\r\n     *\r\n     * @return trxType String\r\n     *         <p>Maps to Payflow Parameter - TRXTYPE</p>\r\n     *         Allowed TrxType values are:\r\n     *         {@paypal.listtable}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.lth}Transaction Type{@paypal.elth}\r\n     *         {@paypal.lth}Transaction Name{@paypal.elth}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}S{@paypal.eltd}\r\n     *         {@paypal.ltd}Sale/Debit{@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}A{@paypal.eltd}\r\n     *         {@paypal.ltd}Voice Authorization/Force{@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}C{@paypal.eltd}\r\n     *         {@paypal.ltd}Credit{@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}V{@paypal.eltd}\r\n     *         {@paypal.ltd}Void{@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}D{@paypal.eltd}\r\n     *         {@paypal.ltd}Delayed Capture{@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}F{@paypal.eltd}\r\n     *         {@paypal.ltd}Force/Voice Authorization{@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}I{@paypal.eltd}\r\n     *         {@paypal.ltd}Inquiry{@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.ltr}\r\n     *         {@paypal.ltd}R{@paypal.eltd}\r\n     *         {@paypal.ltd}Recurring billing<@paypal.eltd}\r\n     *         {@paypal.eltr}\r\n     *         {@paypal.endlisttable}\r\n     */\r\n    public String getTrxType() {\r\n        return trxType;\r\n    }\r\n\r\n\r\n    /**\r\n     * Value (LOW, MEDIUM or HIGH) that controls the detail level and format of transaction results.\r\n     * LOW (default) returns normalized values. MEDIUM or HIGH return the processor's raw response values.\r\n     * <p>Maps to Payflow Parameter - VERBOSITY</p>\r\n     *\r\n     * @return verbosity String\r\n     *  ............\r\n     * //Trans is the transaction object.\r\n     * ............\r\n     * trans.setVerbosity( \"HIGH\");\r\n     * System.out.println(\"Transaction Type = \" + Trans.getTrxType())\r\n     */\r\n    public String getVerbosity() {\r\n        return verbosity;\r\n    }\r\n\r\n    /**\r\n     * Value (LOW, MEDIUM or HIGH) that controls the detail level and format of transaction results.\r\n     * LOW (default) returns normalized values. MEDIUM or HIGH return the processor's raw response values.\r\n     * <p>Maps to Payflow Parameter - VERBOSITY</p>\r\n     *\r\n     * @param verbosity String\r\n     *  ............\r\n     * //Trans is the transaction object.\r\n     * ............\r\n     * trans.setVerbosity( \"HIGH\");\r\n     * System.out.println(\"Transaction Type = \" + Trans.getTrxType())\r\n     */\r\n    public void setVerbosity(String verbosity) {\r\n        this.verbosity = verbosity;\r\n    }\r\n\r\n    /**\r\n     * Gets the context object\r\n     * of the current transaction.\r\n     *\r\n     * @return context Context\r\n     */\r\n    protected Context getContext() {\r\n        return context;\r\n    }\r\n\r\n\r\n    protected void setContext(Context context) {\r\n        this.context = context;\r\n    }\r\n\r\n    /**\r\n     * Gets the StringBuffer object for RequestBuffer.\r\n     *\r\n     * @return requestBuffer StringBuffer\r\n     */\r\n    protected StringBuffer getRequestBuffer() {\r\n        return requestBuffer;\r\n    }\r\n\r\n    /**\r\n     * protected Constructor. This prevents\r\n     * creation of an empty Transaction object.\r\n     */\r\n    protected BaseTransaction() {\r\n        requestBuffer = new StringBuffer();\r\n        context = new Context();\r\n        context.setLoadLoggerErrs(true);\r\n    }\r\n\r\n    /**\r\n     * @param strTrxType               String transaction type\r\n     * @param objUserInfo              UserInfo : UserInfo object populated with user credentials\r\n     * @param objpayflowConnectionData PayflowConnectionData\r\n     * @param requestId                String\r\n     */\r\n    public BaseTransaction(String strTrxType,\r\n                           UserInfo objUserInfo,\r\n                           PayflowConnectionData objpayflowConnectionData,\r\n                           String requestId) {\r\n        this();\r\n        trxType = strTrxType;\r\n        userInfo = objUserInfo;\r\n        payflowConnectionData = objpayflowConnectionData;\r\n        this.requestId = requestId;\r\n        if (userInfo != null) {\r\n            userInfo.setContext(context);\r\n\r\n        }\r\n        if (payflowConnectionData != null) {\r\n            if (payflowConnectionData.getContext() != null && payflowConnectionData.getContext().isErrorContained()) {\r\n                context.addErrors(payflowConnectionData.getContext().getErrors());\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param strTrxType  String\r\n     * @param objUserInfo UserInfo : UserInfo object populated with user credentials\r\n     * @param requestId   String\r\n     */\r\n    public BaseTransaction(String strTrxType,\r\n                           UserInfo objUserInfo,\r\n                           String requestId) {\r\n        this();\r\n        trxType = strTrxType;\r\n        userInfo = objUserInfo;\r\n        //payflowConnectionData = PayflowConnectionData;\r\n        this.requestId = requestId;\r\n        if (userInfo != null) {\r\n            userInfo.setContext(context);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @param strTrxType               String\r\n     * @param objUserInfo              UserInfo : UserInfo object populated with user credentials\r\n     * @param objpayflowConnectionData PayflowConnectionData : Connection credentials object\r\n     * @param objInvoice               Invoice : Invoice object\r\n     * @param requestId                String\r\n     */\r\n    public BaseTransaction(String strTrxType,\r\n                           UserInfo objUserInfo,\r\n                           PayflowConnectionData objpayflowConnectionData,\r\n                           Invoice objInvoice,\r\n                           String requestId) {\r\n        this(strTrxType, objUserInfo, objpayflowConnectionData, requestId);\r\n        invoice = objInvoice;\r\n        if (invoice != null) {\r\n            invoice.setContext(context);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @param strTrxType  String : transaction type\r\n     * @param objUserInfo UserInfo : UserInfo object populated with user credentials\r\n     * @param objInvoice  Invoice : Invoice Object\r\n     * @param requestId   String\r\n     */\r\n    public BaseTransaction(String strTrxType,\r\n                           UserInfo objUserInfo,\r\n                           Invoice objInvoice,\r\n                           String requestId) {\r\n        this(strTrxType, objUserInfo, null, objInvoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * @param strTrxType               String : Transaction type\r\n     * @param objUserInfo              UserInfo : UserInfo object populated with user credentials\r\n     * @param objpayflowConnectionData PayflowConnectionData : Connection credentials object\r\n     * @param objInvoice               Invoice : Invoice object\r\n     * @param objTender                BaseTender : Tender object such as CardTender\r\n     * @param requestId                String\r\n     */\r\n    public BaseTransaction(String strTrxType, UserInfo objUserInfo,\r\n                           PayflowConnectionData objpayflowConnectionData, Invoice objInvoice,\r\n                           BaseTender objTender, String requestId) {\r\n        this(strTrxType, objUserInfo, objpayflowConnectionData, objInvoice, requestId);\r\n        tender = objTender;\r\n        if (tender != null) {\r\n            tender.setContext(context);\r\n            tender.setRequestBuffer(requestBuffer);\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * @param strTrxType  String : Transaction type\r\n     * @param objUserInfo UserInfo : UserInfo object populated with user credentials\r\n     * @param objInvoice  : Invoice object\r\n     * @param objTender   BaseTender : Tender object such as CardTender\r\n     * @param requestId   String\r\n     */\r\n    public BaseTransaction(String strTrxType, UserInfo objUserInfo,\r\n                           Invoice objInvoice,\r\n                           BaseTender objTender, String requestId) {\r\n        this(strTrxType, objUserInfo, null, objInvoice, objTender, requestId);\r\n    }\r\n\r\n\r\n    /**\r\n     * This method submits the transaction\r\n     * to the PayPal Payment Gateway.\r\n     * The response is obtained from the gateway\r\n     * and response object is populated with the\r\n     * response values along with the sdk specific\r\n     * errors in context, if any.\r\n     *\r\n     * @return response String\r\n     *  ............\r\n     * //Trans is the transaction object.\r\n     * ............\r\n     * <p/>\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (Resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.transactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n     * }\r\n     * // Get the Fraud Response parameters.\r\n     * FraudResponse fraudResp =  resp.getFraudResponse();\r\n     * if (FraudResp != null)\r\n     * {\r\n     * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n     * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n    public Response submitTransaction() {\r\n\r\n        PayflowAPI objPayflowApi = null;\r\n        String responseValue = null;\r\n        boolean fatal = false;\r\n        //Logger.getInstance().log(\"########### BEGIN TRANSACTION ###########\", PayflowConstants.SEVERITY_INFO);\r\n        Logger.getInstance().log(\"paypal.payflow.BaseTransaction.SubmitTransaction(): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        try {\r\n            if (clientInfo == null) {\r\n                clientInfo = new ClientInfo();\r\n            }\r\n            //Check for the errors in the context now.\r\n            ArrayList errors = PayflowUtility.alignContext(context, false);\r\n            context.setLoadLoggerErrs(false);\r\n            context.clearErrors();\r\n            context.addErrors(errors);\r\n            generateRequest();\r\n            if (context.getHighestErrorLvl()\r\n                    == PayflowConstants.SEVERITY_FATAL) {\r\n                Logger.getInstance().log(\"paypal.payflow.BaseTransaction.SubmitTransaction(): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n                fatal = true;\r\n            }\r\n            if (!fatal) {\r\n                generateRequest();\r\n                request = requestBuffer.toString();\r\n                //Remove the trailing PayflowConstants.DELIMITER_NVP;\r\n                int parmListLen = request.length();\r\n                if (parmListLen > 0 && request.charAt(parmListLen - 1) == '&') {\r\n                    request = request.substring(0, parmListLen - 1);\r\n                }\r\n                //Call the api from here and submit transaction\r\n\r\n                if (payflowConnectionData != null) {\r\n                    objPayflowApi = new PayflowAPI(payflowConnectionData.getHostAddress(),\r\n                            payflowConnectionData.getHostPort(),\r\n                            payflowConnectionData.getTimeOut(),\r\n                            payflowConnectionData.getProxyAddress(),\r\n                            payflowConnectionData.getProxyPort(),\r\n                            payflowConnectionData.getProxyLogon(),\r\n                            payflowConnectionData.getProxyPassword());\r\n                } else {\r\n                    objPayflowApi = new PayflowAPI();\r\n                }\r\n\r\n                objPayflowApi.isStrongAssemblyTransaction = true;\r\n                objPayflowApi.setClientInfo(clientInfo);\r\n                responseValue = objPayflowApi.submitTransaction(request, requestId);\r\n\r\n                Logger.getInstance().log(\"paypal.payflow.BaseTransaction.SubmitTransaction(): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n            }\r\n        }\r\n        catch (Exception ex) {\r\n            ErrorObject Error = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, ex, PayflowConstants.SEVERITY_FATAL, false, null);\r\n            context.addError(Error);\r\n        }\r\n        finally {\r\n            if (objPayflowApi != null) {\r\n                request = objPayflowApi.getTransactionRequest();\r\n                context.addErrors(objPayflowApi.getTransactionContext().getErrors());\r\n                requestId = objPayflowApi.getRequestId();\r\n                clientInfo = objPayflowApi.getClientInfo();\r\n            } else {\r\n                //There is some error due to which the return\r\n                //is called even before payflownetapi object is\r\n                //created.\r\n                //Check the first fatal error in context and\r\n                //put its response value to string.\r\n                if (request != null && request.length() > 0) {\r\n                    request = PayflowUtility.maskSensitiveFields(request);\r\n                }\r\n                ArrayList errorList = context.getErrors(PayflowConstants.SEVERITY_FATAL);\r\n                ErrorObject firstFatalError = (ErrorObject) errorList.get(0);\r\n                responseValue = firstFatalError.toString();\r\n            }\r\n\r\n            response = new Response(requestId, context);\r\n\r\n            //If the response string is populated from the\r\n            //context and if response id is not obtained, then\r\n            //response string ends with RESPONSE_ID=.\r\n            //We don't require this. so if we find response\r\n            //ending with RESPONSE_ID= we will remove the same.\r\n            if (responseValue != null && responseValue.endsWith(\"&RESPONSE_ID=\")) {\r\n                responseValue = responseValue.substring(0, responseValue.length() - 13);\r\n            }\r\n\r\n            response.setRequestString(request);\r\n            response.setParams(responseValue);\r\n\r\n            //Log the context\r\n            if (context.isErrorContained()) {\r\n                context.logErrors();\r\n            }\r\n        }\r\n        //Logger.getInstance().log(\"########### END TRANSACTION ###########\", PayflowConstants.SEVERITY_INFO);\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n\r\n        Logger.getInstance().log(\"paypal.payflow.BaseTransaction.generateRequest(): Entered\", PayflowConstants.SEVERITY_DEBUG);\r\n        requestBuffer = new StringBuffer();\r\n        requestBuffer.append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_TRXTYPE, trxType));\r\n        requestBuffer.append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_VERBOSITY, verbosity));\r\n\r\n        if (extData != null && extData.size() > 0) {\r\n            ExtendData objExtendData;\r\n            for (int i = 0; i < extData.size(); i++) {\r\n                if (extData.get(i) != null) {\r\n                    objExtendData = (ExtendData) extData.get(i);\r\n                    objExtendData.setRequestBuffer(getRequestBuffer());\r\n                    objExtendData.generateRequest();\r\n                }\r\n            }\r\n        }\r\n\r\n        if (tender != null) {\r\n            tender.setRequestBuffer(requestBuffer);\r\n            tender.generateRequest();\r\n        }\r\n        if (invoice != null) {\r\n            invoice.setRequestBuffer(requestBuffer);\r\n            invoice.generateRequest();\r\n        }\r\n        if (userInfo != null) {\r\n            userInfo.setRequestBuffer(requestBuffer);\r\n            userInfo.generateRequest();\r\n        }\r\n        if (buyerAuthStatus != null) {\r\n            buyerAuthStatus.setRequestBuffer(requestBuffer);\r\n            buyerAuthStatus.generateRequest();\r\n        }\r\n        Logger.getInstance().log(\"paypal.payflow.BaseTransaction.generateRequest(): Exiting\", PayflowConstants.SEVERITY_DEBUG);\r\n    }\r\n\r\n    /**\r\n     * Clears the Extend Data list held by\r\n     * transaction object.\r\n     */\r\n    public void clearExtendData() {\r\n\r\n        if (extData != null) {\r\n            extData.clear();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * @param headerName  String\r\n     * @param headerValue String\r\n     */\r\n    public void addHeader(String headerName, String headerValue) {\r\n        if (clientInfo == null) {\r\n            clientInfo = new ClientInfo();\r\n        }\r\n        clientInfo.addHeaderToHash(headerName, headerValue);\r\n    }\r\n\r\n\r\n    /**\r\n     * @param headerName String\r\n     */\r\n    public void RemoveTransHeader(String headerName) {\r\n        RemoveHeader(headerName);\r\n    }\r\n\r\n    /**\r\n     * @param headerName String\r\n     */\r\n    private void RemoveHeader(String headerName) {\r\n\r\n        if (clientInfo != null) {\r\n            if (clientInfo.getClientInfoHash().containsKey(headerName)) {\r\n                clientInfo.getClientInfoHash().remove(headerName);\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/BaseTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/BaseTransaction.java	(date 1600060042276)
@@ -6,31 +6,30 @@
 /**
  * This class is the base class for all transaction objects. It has methods for generating the transaction request,
  * sending it to the server and obtaining the response.
- * <p/>
  * <p>This class can be extended to create a new transaction type.</p>
  *
  *  This example shows how to create and perform an Sale transaction using a Basetransaction Object.
- * <p/>
+ *  * <p>
  * ..........
  * ..........
  * //Populate required data objects.
  * ..........
  * ..........
- * <p/>
+ *  * <p>
  * //Create a new Base Transaction.
  * BaseTransaction trans = new BaseTransaction("S",User, Connection, Inv, Card, PayflowUtility.RequestId);
- * <p/>
+ *  * <p>
  * //Submit the transaction.
  * trans.submitTransaction();
  * // Get the Response
  * Response resp = trans.getResponse();
- * <p/>
+ *  * <p>
  * // Display the transaction response parameters.
  * if (resp != null)
  * {
  * // Get the Transaction Response parameters.
  * TransactionResponse trxnResponse =  resp.getTransactionResponse();
- * <p/>
+ *  * <p>
  * if (TrxnResponse != null)
  * {
  * System.out.println("RESULT = " + trxnResponse.getResult());
@@ -41,8 +40,6 @@
  * System.out.println("AVSZIP = " + trxnResponse.getAVSZip());
  * System.out.println("IAVS = " + trxnResponse.getIAVS());
  * }
- * <p/>
- * <p/>
  * // Get the Fraud Response parameters.
  * FraudResponse fraudResp =  resp.getFraudResponse();
  * if (fraudResp != null)
@@ -50,18 +47,16 @@
  * System.out.println("PREFPSMSG = " + fraudResp.getPreFpsMsg());
  * System.out.println("POSTFPSMSG = " + fraudResp.getPostFpsMsg());
  * }
- * <p/>
+ *  * <p>
  * // Display the response.
  * System.out.println(PayflowUtility.getStatus(Resp));
- * <p/>
- * <p/>
+ *  * <p>
  * // Get the Transaction Context and check for any contained SDK specific errors (optional code).
  * Context transCtx = resp.getTransactionContext();
- * if (transCtx != null &amp;&amp; transCtx.getErrorCount() > 0)
+ * if (transCtx != null &amp;&amp; transCtx.getErrorCount() %3E 0)
  * {
  * System.out.println(+ "Transaction Errors = " + transCtx.toString());
  * }
- * <p/>
  * }
  */
 public class BaseTransaction {
@@ -237,10 +232,10 @@
      *  ............
      * //Trans is the transaction object.
      * ............
-     * <p/>
+     *  * <p>
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (resp != null)
@@ -267,7 +262,7 @@
      * }
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null ++ Ctx.getErrorCount() > 0)
+     * if (ctx != null ++ Ctx.getErrorCount() %3E 0)
      * {
      * System.out.println(Environment.NewLine + "Errors = " + Ctx.ToString());
      * }
@@ -289,32 +284,17 @@
      * Tender object for ACH, Credit Card, PINless Debit &amp; eCheck.
      *
      * @param tender BaseTender
-     *               <p/>
-     *               Allowed Tender Types are:
-     *               </p>
-     *               {@paypal.listtable}
-     *               {@paypal.ltr}
-     *               {@paypal.lth}Tender Type{@paypal.elth}
-     *               {@paypal.lth}Tender Name<@paypal.elth}
-     *               {@paypal.eltr}
-     *               {@paypal.ltr}
-     *               {@paypal.ltd}A{@paypal.eltd}
-     *               {@paypal.ltd}ACH ( Automatic Clearing House )<@paypal.eltd}
-     *               {@paypal.eltr}
-     *               {@paypal.ltr}
-     *               {@paypal.ltd}C{@paypal.eltd}
-     *               {@paypal.ltd}Credit Card{@paypal.eltd}
-     *               {@paypal.eltr}
-     *               {@paypal.ltr}
-     *               {@paypal.ltd}D{@paypal.eltd}
-     *               {@paypal.ltd}PINLess Debit{@paypal.eltd}
-     *               {@paypal.eltr}
-     *               {@paypal.ltr}
-     *               {@paypal.ltd}K{@paypal.eltd}
-     *               {@paypal.ltd}e-Check ( TeleCheck ){@paypal.eltd}
-     *               {@paypal.eltr}
-     *               {@paypal.endlisttable}
-     *               <p>Each Tender type Maps to Payflow Parameter - TENDER</p>
+     *
+     * Allowed Tender Types are:
+     *
+     * Tender Type : Tender Name
+     *               
+     * A - ACH (Automatic Clearing House)
+     * C - Credit Card
+     * D - PINLess Debit
+     * K - e-Check (TeleCheck)
+     *
+     * <p>Each Tender type Maps to Payflow Parameter - TENDER</p>
      * @see ACHTender
      * @see CardTender
      * @see CheckTender
@@ -329,46 +309,20 @@
      * and the AMT must be empty or the exact amount of the original Debit/Sale payment.
      *
      * @return trxType String
-     *         <p>Maps to Payflow Parameter - TRXTYPE</p>
-     *         Allowed TrxType values are:
-     *         {@paypal.listtable}
-     *         {@paypal.ltr}
-     *         {@paypal.lth}Transaction Type{@paypal.elth}
-     *         {@paypal.lth}Transaction Name{@paypal.elth}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}S{@paypal.eltd}
-     *         {@paypal.ltd}Sale/Debit{@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}A{@paypal.eltd}
-     *         {@paypal.ltd}Voice Authorization/Force{@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}C{@paypal.eltd}
-     *         {@paypal.ltd}Credit{@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}V{@paypal.eltd}
-     *         {@paypal.ltd}Void{@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}D{@paypal.eltd}
-     *         {@paypal.ltd}Delayed Capture{@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}F{@paypal.eltd}
-     *         {@paypal.ltd}Force/Voice Authorization{@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}I{@paypal.eltd}
-     *         {@paypal.ltd}Inquiry{@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.ltr}
-     *         {@paypal.ltd}R{@paypal.eltd}
-     *         {@paypal.ltd}Recurring billing<@paypal.eltd}
-     *         {@paypal.eltr}
-     *         {@paypal.endlisttable}
+     * <p>Maps to Payflow Parameter - TRXTYPE</p>
+     * Allowed TrxType values are:
+     *         
+     * Transaction Type - Transaction Name
+     *         
+     * S - Sale/Debit
+     * A - Voice Authorization/Force
+     * C - Credit
+     * V - Void
+     * D - Delayed Capture
+     * F - Force/Voice Authorization
+     * I - Inquiry
+     * R - Recurring billing
+     *
      */
     public String getTrxType() {
         return trxType;
@@ -565,10 +519,10 @@
      *  ............
      * //Trans is the transaction object.
      * ............
-     * <p/>
+     *  * <p>
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (Resp != null)
@@ -595,7 +549,7 @@
      * }
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.ToString());
      * }
Index: src/sdk/transactions/paypal/payflow/AuthorizationTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to create and perform an\r\n * Authorization Transaction.\r\n * <p/>\r\n * A successful authorization needs to be captured using a capture transaction.\r\n * </p>\r\n *\r\n *  This example shows how to create and perform an authorization transaction.\r\n * <p/>\r\n * ..........\r\n * ..........\r\n * //Populate required data objects.\r\n * ..........\r\n * ..........\r\n * <p/>\r\n * //Create a new Authorization Transaction.\r\n * AuthorizationTransaction trans = new AuthorizationTransaction(\r\n * userInfo,\r\n * PayflowConnectionData,\r\n * invoice,\r\n * Tender,\r\n * RequestId);\r\n * //Submit the transaction.\r\n * trans.submitTransaction();\r\n * <p/>\r\n * // Get the Response.\r\n * Response resp = trans.getResponse();\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  Resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n * }\r\n * // Get the Fraud Response parameters.\r\n * FraudResponse fraudResp =  resp.getFraudResponse();\r\n * if (fraudResp != null)\r\n * {\r\n * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null ++ ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.toString());\r\n * }\r\n */\r\npublic class AuthorizationTransaction extends BaseTransaction {\r\n\r\n    /**\r\n     * Original transaction id.\r\n     * The ORIGID is the PNREF no. for a previous transaction.\r\n     * OrigId is used in case Authorization transaction is a Follow-On transaction.\r\n     */\r\n    private String origId;\r\n\r\n    public String getOrigId() {\r\n        return origId;\r\n    }\r\n\r\n    /**\r\n     * the origId to set.\r\n     *\r\n     * @param origId String\r\n     */\r\n    public void setOrigId(String origId) {\r\n        this.origId = origId;\r\n    }\r\n\r\n    /**\r\n     * Gets, Sets OrigId. This property is used to perform a\r\n     * reference Authorization Transaction.\r\n     * <p/>\r\n     * A reference Authorization transaction is an authorization transaction which copies the transaction data,\r\n     * except the Account Number, Expiration Date and Swipe data from a previous trasnaction.\r\n     * PNRef of this previous trasnaction needs to be set in this OrigId property.\r\n     * <p/>\r\n     * A successful authorization needs to be captured using a capture transaction.</p>\r\n     *\r\n     * @return origId String\r\n     *  This example shows how to create and perform a reference authorization transaction.\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * //Create a new Authorization Transaction.\r\n     * AuthorizationTransaction trans = new AuthorizationTransaction(\r\n     * userInfo,\r\n     * PayflowConnectionData,\r\n     * invoice,\r\n     * Tender,\r\n     * RequestId);\r\n     * // Set the OrigId to refer to a previous transaction.\r\n     * trans.setOrigId(\"V64A0A07BD24);\r\n     * // Flag the transactions to allow partial authorizations\r\n     * // of pre-paid credit cards.\r\n     * trans.setPartialAuth(\"Y\");\r\n     * <p/>\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n     * }\r\n     * // Get the Fraud Response parameters.\r\n     * FraudResponse fraudResp =  resp.getFraudResponse();\r\n     * if (fraudResp != null)\r\n     * {\r\n     * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n     * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null ++ ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(Environment.NewLine + \"Errors = \" + ctx.toString());\r\n     * }\r\n     */\r\n\r\n    /**\r\n     * Partial Authorization flag.\r\n     * Used to notify banks that merchant supports partial authorizations on pre-paid\r\n     * credit cards and to return the partially approved amount.\r\n     */\r\n    private String partialAuth;\r\n\r\n    /**\r\n     * Gets, Sets partialAuth. This property is used to notify banks that a partial authorization\r\n     * can be performed for a pre-paid debit/gift card.\r\n     * <p/>\r\n     * Partial Approval is supported for Visa, MasterCard, American Express and Discover (JCB (US Domestic only),\r\n     * and Diners) Prepaid card products such as gift, Flexible Spending Account (FSA) or Healthcare Reimbursement\r\n     * Account (HRA) cards. In addition Discover (JCB (US Domestic only), and Diners) supports partial Approval\r\n     * on their consumer credit card. It is often difficult for the consumer to spend the exact amount available\r\n     * on the prepaid account, as the purchase can be for amounts greater than the value available. This can result\r\n     * in unnecessary declines. Visa, MasterCard, American Express and Discover (JCB (US Domestic only), and Diners)\r\n     * recognize that the prepaid products represent unique opportunities for both merchants and consumers. With\r\n     * Partial Approval issuers may approve a portion of the amount requested. This will enable the residual\r\n     * transaction amount to be paid by other means. The introduction of the partial approval capability will reduce\r\n     * decline frequency and enhance the consumer and merchant experience at the point of sale. Merchants will now\r\n     * have the ability to accept partial approval rather than having the sale declined.\r\n     * <p/>\r\n     *\r\n     * @return partialAuth String\r\n     *  This example shows how to set the flag to support partial authorizations.\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * //Create a new Authorization Transaction.\r\n     * AuthorizationTransaction trans = new AuthorizationTransaction(userInfo, PayflowConnectionData,\r\n     * invoice, Tender, RequestId);\r\n     * // Flag the transactions to allow partial authorizations\r\n     * // of pre-paid credit cards.\r\n     * trans.setPartialAuth(\"Y\");\r\n     * <p/>\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n     * }\r\n     * // Get the Fraud Response parameters.\r\n     * FraudResponse fraudResp =  resp.getFraudResponse();\r\n     * if (fraudResp != null)\r\n     * {\r\n     * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n     * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null ++ ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(Environment.NewLine + \"Errors = \" + ctx.toString());\r\n     * }\r\n     */\r\n    public String getPartialAuth() {\r\n        return partialAuth;\r\n    }\r\n\r\n    /**\r\n     * the partialAuth to set.\r\n     *\r\n     * @param partialAuth String\r\n     */\r\n    public void setPartialAuth(String partialAuth) {\r\n        this.partialAuth = partialAuth;\r\n    }\r\n\r\n    private String createSecureToken;\r\n    private String secureTokenId;\r\n\r\n    /**\r\n     * Gets, Sets CreateSecureToken, SecureTokenId. This property is used to create a SecureToken and SecureTokenId.\r\n     * <p/>\r\n     * Use a secure token to send non-credit card transaction data to the Payflow server for storage in\r\n     * a way that can't be intercepted and manipulated maliciously.The secure token must be used with the hosted\r\n     * checkout pages. The token is good for a one-time transaction and is valid for 30 minutes.\r\n     * <p/>\r\n     * NOTE: Without using a secure token, Payflow Pro merchants can host their own payment page and Payflow Link merchants\r\n     * can use a form post to send transaction data to the hosted checkout pages. However, by not using the secure token,\r\n     * these Payflow gateway users are responsible for the secure handling of data.  To obtain a secure token, pass a unique,\r\n     * 36-character token ID and set CREATESECURETOKEN=Y in a request to the Payflow server. The Payflow server associates your\r\n     * ID with a secure token and returns the token as a string of up to 32 alphanumeric characters.  To pass the transaction\r\n     * data to the hosted checkout page, you pass the secure token and token ID in an HTTP form post. The token and ID trigger\r\n     * the Payflow server to retrieve your data and display it for buyer approval.\r\n     * <p/>\r\n     *\r\n     * @return secureToken String\r\n     *  This example shows how to set the flag to create a secure token.\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * // Since we are using the hosted payment pages, you will not be sending the credit card data with the\r\n     * // Secure Token Request.  You just send all other 'sensitive' data within this request and when you\r\n     * // call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned\r\n     * // and the SECURETOKENID that was created and used in the request.\r\n     * <p/>\r\n     * // Create a new Secure Token Authorization Transaction.  Even though this example is performing\r\n     * // an authorization, you can create a secure token using SaleTransaction too.  Only Authorization and Sale\r\n     * // type transactions are permitted.\r\n     * AuthorizationTransaction Trans = new AuthorizationTransaction(User, Connection, Inv, PayflowUtility.RequestId);\r\n     * <p/>\r\n     * // Set the flag to create a Secure Token.\r\n     * Trans.CreateSecureToken = \"Y\";\r\n     * // The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to\r\n     * // generate a random id, but any means to create an id can be used.\r\n     * Trans.SecureTokenId = PayflowUtility.RequestId;\r\n     * <p/>\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"SECURETOKEN = \" + trxnResponse.getSecureToken());\r\n     * System.out.println(\"SECURETOKENID = \" + trxnResponse.getSecureTokenId());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null ++ ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(Environment.NewLine + \"Errors = \" + ctx.toString());\r\n     * }\r\n     */\r\n    public String getCreateSecureToken() {\r\n        return createSecureToken;\r\n    }\r\n\r\n    public String getSecureTokenId() {\r\n        return secureTokenId;\r\n    }\r\n\r\n    /**\r\n     * the createSecureToken is set.\r\n     *\r\n     * @param createSecureToken String\r\n     */\r\n    public void setCreateSecureToken(String createSecureToken) {\r\n        this.createSecureToken = createSecureToken;\r\n    }\r\n\r\n    /**\r\n     * the secureTokenId is set.\r\n     *\r\n     * @param secureTokenId String\r\n     */\r\n    public void setSecureTokenId(String secureTokenId) {\r\n        this.secureTokenId = secureTokenId;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo              User Info object populated with user credentials.\r\n     * @param payflowConnectionData Connection credentials object.\r\n     * @param invoice               Invoice object.\r\n     * @param tender                Tender object.\r\n     * @param requestId             Request Id.\r\n     *  This example shows how to create and perform a authorization transaction.\r\n     * <p/>\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * //Create a new Authorization Transaction.\r\n     * AuthorizationTransaction Trans = new AuthorizationTransaction(\r\n     * userInfo,\r\n     * PayflowConnectionData,\r\n     * invoice,\r\n     * Tender,\r\n     * RequestId);\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (Resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.transactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n     * }\r\n     * // Get the Fraud Response parameters.\r\n     * FraudResponse fraudResp =  resp.getFraudResponse();\r\n     * if (FraudResp != null)\r\n     * {\r\n     * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n     * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n    public AuthorizationTransaction(UserInfo userInfo, PayflowConnectionData payflowConnectionData,\r\n                                    Invoice invoice,\r\n                                    BaseTender tender, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_AUTH, userInfo, payflowConnectionData, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo  User Info object populated with user credentials.</param>\r\n     * @param invoice   Invoice object.\r\n     * @param tender    Tender object\r\n     * @param requestId String Request Id\r\n     *  This example shows how to create and perform\r\n     * a authorization transaction.\r\n     * <p/>\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * // Create a new Authorization Transaction.\r\n     * AuthorizationTransaction Trans = new AuthorizationTransaction(\r\n     * userInfo,\r\n     * PayflowConnectionData,\r\n     * Invoice,\r\n     * Tender,\r\n     * RequestId);\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (Resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.transactionResponse();\r\n     * if (trxnResponse != null)\r\n     * {\r\n     * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n     * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n     * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n     * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n     * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n     * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n     * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n     * }\r\n     * // Get the Fraud Response parameters.\r\n     * FraudResponse fraudResp =  resp.getFraudResponse();\r\n     * if (fraudResp != null)\r\n     * {\r\n     * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n     * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n     * }\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n\r\n    public AuthorizationTransaction(UserInfo userInfo, Invoice invoice,\r\n                                    BaseTender tender, String requestId) {\r\n        this(userInfo, null, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * constructor to be used in case of basic and order auth\r\n     *\r\n     * @param trxType               String\r\n     * @param userInfo              userInfo\r\n     * @param payflowConnectionData PayflowConnectionData\r\n     * @param invoice               String\r\n     * @param tender                String\r\n     * @param requestId             String\r\n     */\r\n    protected AuthorizationTransaction(String trxType, UserInfo userInfo, PayflowConnectionData payflowConnectionData,\r\n                                       Invoice invoice,\r\n                                       BaseTender tender, String requestId) {\r\n        super(trxType, userInfo, payflowConnectionData,\r\n                invoice,\r\n                tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * @param trxType   String\r\n     * @param userInfo  userInfo\r\n     * @param invoice   Invoice\r\n     * @param tender    BaseTender\r\n     * @param requestId String\r\n     */\r\n    protected AuthorizationTransaction(String trxType, UserInfo userInfo, Invoice invoice,\r\n                                       BaseTender tender, String requestId) {\r\n        this(trxType, userInfo, null, invoice, tender, requestId);\r\n    }\r\n\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n        try {\r\n            super.generateRequest();\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_ORIGID, origId));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PARTIALAUTH, partialAuth));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_CREATESECURETOKEN, createSecureToken));\r\n            getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_SECURETOKENID, secureTokenId));\r\n        } catch (Exception ex) {\r\n            ErrorObject error = PayflowUtility.populateCommError(PayflowConstants.E_UNKNOWN_STATE, ex, PayflowConstants.SEVERITY_FATAL, false, null);\r\n            getContext().addError(error);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/AuthorizationTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/AuthorizationTransaction.java	(date 1600059185409)
@@ -3,18 +3,18 @@
 /**
  * This class is used to create and perform an
  * Authorization Transaction.
- * <p/>
+ *  * <p>
  * A successful authorization needs to be captured using a capture transaction.
  * </p>
  *
  *  This example shows how to create and perform an authorization transaction.
- * <p/>
+ *  * <p>
  * ..........
  * ..........
  * //Populate required data objects.
  * ..........
  * ..........
- * <p/>
+ *  * <p>
  * //Create a new Authorization Transaction.
  * AuthorizationTransaction trans = new AuthorizationTransaction(
  * userInfo,
@@ -24,7 +24,7 @@
  * RequestId);
  * //Submit the transaction.
  * trans.submitTransaction();
- * <p/>
+ *  * <p>
  * // Get the Response.
  * Response resp = trans.getResponse();
  * if (Resp != null)
@@ -51,7 +51,7 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null ++ ctx.getErrorCount() > 0)
+ * if (ctx != null ++ ctx.getErrorCount() %3E 0)
  * {
  * System.out.println("Errors = " + ctx.toString());
  * }
@@ -81,11 +81,11 @@
     /**
      * Gets, Sets OrigId. This property is used to perform a
      * reference Authorization Transaction.
-     * <p/>
+     *  * <p>
      * A reference Authorization transaction is an authorization transaction which copies the transaction data,
      * except the Account Number, Expiration Date and Swipe data from a previous trasnaction.
      * PNRef of this previous trasnaction needs to be set in this OrigId property.
-     * <p/>
+     *  * <p>
      * A successful authorization needs to be captured using a capture transaction.</p>
      *
      * @return origId String
@@ -95,7 +95,7 @@
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * //Create a new Authorization Transaction.
      * AuthorizationTransaction trans = new AuthorizationTransaction(
      * userInfo,
@@ -108,10 +108,10 @@
      * // Flag the transactions to allow partial authorizations
      * // of pre-paid credit cards.
      * trans.setPartialAuth("Y");
-     * <p/>
+     *  * <p>
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (resp != null)
@@ -138,7 +138,7 @@
      * }
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null ++ ctx.getErrorCount() > 0)
+     * if (ctx != null ++ Ctx.getErrorCount() %3E 0)
      * {
      * System.out.println(Environment.NewLine + "Errors = " + ctx.toString());
      * }
@@ -154,7 +154,7 @@
     /**
      * Gets, Sets partialAuth. This property is used to notify banks that a partial authorization
      * can be performed for a pre-paid debit/gift card.
-     * <p/>
+     *  * <p>
      * Partial Approval is supported for Visa, MasterCard, American Express and Discover (JCB (US Domestic only),
      * and Diners) Prepaid card products such as gift, Flexible Spending Account (FSA) or Healthcare Reimbursement
      * Account (HRA) cards. In addition Discover (JCB (US Domestic only), and Diners) supports partial Approval
@@ -166,7 +166,7 @@
      * transaction amount to be paid by other means. The introduction of the partial approval capability will reduce
      * decline frequency and enhance the consumer and merchant experience at the point of sale. Merchants will now
      * have the ability to accept partial approval rather than having the sale declined.
-     * <p/>
+     *  * <p>
      *
      * @return partialAuth String
      *  This example shows how to set the flag to support partial authorizations.
@@ -175,17 +175,17 @@
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * //Create a new Authorization Transaction.
      * AuthorizationTransaction trans = new AuthorizationTransaction(userInfo, PayflowConnectionData,
      * invoice, Tender, RequestId);
      * // Flag the transactions to allow partial authorizations
      * // of pre-paid credit cards.
      * trans.setPartialAuth("Y");
-     * <p/>
+     *  * <p>
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (resp != null)
@@ -210,12 +210,6 @@
      * System.out.println("POSTFPSMSG = " + fraudResp.getPostFpsMsg());
      * }
      * }
-     * // Get the Context and check for any contained SDK specific errors.
-     * Context ctx = resp.getTransactionContext();
-     * if (ctx != null ++ ctx.getErrorCount() > 0)
-     * {
-     * System.out.println(Environment.NewLine + "Errors = " + ctx.toString());
-     * }
      */
     public String getPartialAuth() {
         return partialAuth;
@@ -235,11 +229,11 @@
 
     /**
      * Gets, Sets CreateSecureToken, SecureTokenId. This property is used to create a SecureToken and SecureTokenId.
-     * <p/>
+     *  * <p>
      * Use a secure token to send non-credit card transaction data to the Payflow server for storage in
      * a way that can't be intercepted and manipulated maliciously.The secure token must be used with the hosted
      * checkout pages. The token is good for a one-time transaction and is valid for 30 minutes.
-     * <p/>
+     *  * <p>
      * NOTE: Without using a secure token, Payflow Pro merchants can host their own payment page and Payflow Link merchants
      * can use a form post to send transaction data to the hosted checkout pages. However, by not using the secure token,
      * these Payflow gateway users are responsible for the secure handling of data.  To obtain a secure token, pass a unique,
@@ -247,7 +241,7 @@
      * ID with a secure token and returns the token as a string of up to 32 alphanumeric characters.  To pass the transaction
      * data to the hosted checkout page, you pass the secure token and token ID in an HTTP form post. The token and ID trigger
      * the Payflow server to retrieve your data and display it for buyer approval.
-     * <p/>
+     *  * <p>
      *
      * @return secureToken String
      *  This example shows how to set the flag to create a secure token.
@@ -256,26 +250,26 @@
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * // Since we are using the hosted payment pages, you will not be sending the credit card data with the
      * // Secure Token Request.  You just send all other 'sensitive' data within this request and when you
      * // call the hosted payment pages, you'll only need to pass the SECURETOKEN; which is generated and returned
      * // and the SECURETOKENID that was created and used in the request.
-     * <p/>
+     *  * <p>
      * // Create a new Secure Token Authorization Transaction.  Even though this example is performing
      * // an authorization, you can create a secure token using SaleTransaction too.  Only Authorization and Sale
      * // type transactions are permitted.
      * AuthorizationTransaction Trans = new AuthorizationTransaction(User, Connection, Inv, PayflowUtility.RequestId);
-     * <p/>
+     *  * <p>
      * // Set the flag to create a Secure Token.
      * Trans.CreateSecureToken = "Y";
      * // The Secure Token Id must be a unique id up to 36 characters.  Using the RequestID object to
      * // generate a random id, but any means to create an id can be used.
      * Trans.SecureTokenId = PayflowUtility.RequestId;
-     * <p/>
+     *  * <p>
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (resp != null)
@@ -290,12 +284,6 @@
      * System.out.println("SECURETOKENID = " + trxnResponse.getSecureTokenId());
      * }
      * }
-     * // Get the Context and check for any contained SDK specific errors.
-     * Context ctx = resp.getTransactionContext();
-     * if (ctx != null ++ ctx.getErrorCount() > 0)
-     * {
-     * System.out.println(Environment.NewLine + "Errors = " + ctx.toString());
-     * }
      */
     public String getCreateSecureToken() {
         return createSecureToken;
@@ -332,13 +320,13 @@
      * @param tender                Tender object.
      * @param requestId             Request Id.
      *  This example shows how to create and perform a authorization transaction.
-     * <p/>
+     *  * <p>
      * ..........
      * ..........
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * //Create a new Authorization Transaction.
      * AuthorizationTransaction Trans = new AuthorizationTransaction(
      * userInfo,
@@ -348,7 +336,7 @@
      * RequestId);
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (Resp != null)
@@ -373,12 +361,6 @@
      * System.out.println("POSTFPSMSG = " + fraudResp.getPostFpsMsg());
      * }
      * }
-     * // Get the Context and check for any contained SDK specific errors.
-     * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
-     * {
-     * System.out.println("Errors = " + ctx.ToString());
-     * }
      */
     public AuthorizationTransaction(UserInfo userInfo, PayflowConnectionData payflowConnectionData,
                                     Invoice invoice,
@@ -389,29 +371,24 @@
     /**
      * Constructor.
      *
-     * @param userInfo  User Info object populated with user credentials.</param>
+     * @param userInfo  User Info object, populated with user credentials.
      * @param invoice   Invoice object.
      * @param tender    Tender object
      * @param requestId String Request Id
      *  This example shows how to create and perform
      * a authorization transaction.
-     * <p/>
+     *  * <p>
      * ..........
      * ..........
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * // Create a new Authorization Transaction.
-     * AuthorizationTransaction Trans = new AuthorizationTransaction(
-     * userInfo,
-     * PayflowConnectionData,
-     * Invoice,
-     * Tender,
-     * RequestId);
+     * AuthorizationTransaction Trans = new AuthorizationTransaction(userInfo, PayflowConnectionData, Invoice, Tender, RequestId);
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (Resp != null)
@@ -438,7 +415,7 @@
      * }
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.ToString());
      * }
Index: src/sdk/transactions/paypal/payflow/OrderTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to create and perform an Order Transaction for Express Checkout.\r\n * <p/>\r\n * An Order transaction represents an agreement to pay one or more authorized amounts up to\r\n * the specified total over a maximum of 29 days.\r\n * <p/>\r\n *\r\n *  This example shows how to create and perform a order transaction as part of Express Checkout.\r\n * <p/>\r\n * ..........\r\n * ..........\r\n * //Populate required data objects.\r\n * ..........\r\n * ..........\r\n * <p/>\r\n * // Create a new Order Transaction.\r\n * OrderTransaction Trans = new OrderTransaction(\r\n * userInfo,\r\n * PayflowConnectionData,\r\n * Invoice,\r\n * Tender,\r\n * RequestId);\r\n * //Submit the transaction.\r\n * trans.submitTransaction();\r\n * <p/>\r\n * // Get the Response.\r\n * Response resp = trans.getResponse();\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.transactionResponse();\r\n * // Display the transaction response parameters.\r\n * if (Resp != null) {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse TrxnResponse = Resp.getTransactionResponse();\r\n * if (TrxnResponse != null) {\r\n * System.out.println(\"RESULT = \" + TrxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + TrxnResponse.getRespMsg());\r\n * System.out.println(\"TOKEN = \" + Trans.getResponse().getEcSetResponse().getToken());\r\n * System.out.println(\"CORRELATIONID = \" + TrxnResponse.getCorrelationId());\r\n * // If value is true, then the Request ID has not been changed and the original response\r\n * // of the original transction is returned.\r\n * System.out.println(\"DUPLICATE = \" + TrxnResponse.getDuplicate());\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.ToString());\r\n * }\r\n */\r\n\r\npublic class OrderTransaction extends AuthorizationTransaction {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo              User Info object populated with user credentials.\r\n     * @param payflowConnectionData Connection object.\r\n     * @param invoice               Invoice object.\r\n     * @param tender                Tender object\r\n     * @param requestId             String Request Id\r\n     *  This example shows how to create and perform\r\n     * a authorization transaction.\r\n     * <p/>\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * // Create a new Order Transaction.\r\n     * OrderTransaction Trans = new OrderTransaction(\r\n     * userInfo,\r\n     * PayflowConnectionData,\r\n     * Invoice,\r\n     * Tender,\r\n     * RequestId);\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (Resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.transactionResponse();\r\n     * // Display the transaction response parameters.\r\n     * if (Resp != null) {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse TrxnResponse = Resp.getTransactionResponse();\r\n     * if (TrxnResponse != null) {\r\n     * System.out.println(\"RESULT = \" + TrxnResponse.getResult());\r\n     * System.out.println(\"RESPMSG = \" + TrxnResponse.getRespMsg());\r\n     * System.out.println(\"TOKEN = \" + Trans.getResponse().getEcSetResponse().getToken());\r\n     * System.out.println(\"CORRELATIONID = \" + TrxnResponse.getCorrelationId());\r\n     * // If value is true, then the Request ID has not been changed and the original response\r\n     * // of the original transction is returned.\r\n     * System.out.println(\"DUPLICATE = \" + TrxnResponse.getDuplicate());\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n    public OrderTransaction(UserInfo userInfo,\r\n                            PayflowConnectionData payflowConnectionData,\r\n                            Invoice invoice,\r\n                            PayPalTender tender,\r\n                            String requestId) {\r\n        super(\"O\", userInfo, payflowConnectionData, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo  User Info object populated with user credentials.\r\n     * @param invoice   Invoice object.\r\n     * @param tender    Tender object\r\n     * @param requestId String Request Id\r\n     *  This example shows how to create and perform\r\n     * a authorization transaction.\r\n     * <p/>\r\n     * ..........\r\n     * ..........\r\n     * //Populate required data objects.\r\n     * ..........\r\n     * ..........\r\n     * <p/>\r\n     * // Create a new Order Transaction.\r\n     * OrderTransaction Trans = new OrderTransaction(\r\n     * userInfo,\r\n     * Invoice,\r\n     * Tender,\r\n     * RequestId);\r\n     * //Submit the transaction.\r\n     * trans.submitTransaction();\r\n     * <p/>\r\n     * // Get the Response.\r\n     * Response resp = trans.getResponse();\r\n     * if (Resp != null)\r\n     * {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse trxnResponse =  resp.transactionResponse();\r\n     * // Display the transaction response parameters.\r\n     * if (Resp != null) {\r\n     * // Get the Transaction Response parameters.\r\n     * TransactionResponse TrxnResponse = Resp.getTransactionResponse();\r\n     * if (TrxnResponse != null) {\r\n     * System.out.println(\"RESULT = \" + TrxnResponse.getResult());\r\n     * System.out.println(\"RESPMSG = \" + TrxnResponse.getRespMsg());\r\n     * System.out.println(\"TOKEN = \" + Trans.getResponse().getEcSetResponse().getToken());\r\n     * System.out.println(\"CORRELATIONID = \" + TrxnResponse.getCorrelationId());\r\n     * // If value is true, then the Request ID has not been changed and the original response\r\n     * // of the original transction is returned.\r\n     * System.out.println(\"DUPLICATE = \" + TrxnResponse.getDuplicate());\r\n     * }\r\n     * // Get the Context and check for any contained SDK specific errors.\r\n     * Context ctx = resp.getTransactionContext();\r\n     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n     * {\r\n     * System.out.println(\"Errors = \" + ctx.ToString());\r\n     * }\r\n     */\r\n    public OrderTransaction(UserInfo userInfo,\r\n                            Invoice invoice,\r\n                            PayPalTender tender,\r\n                            String requestId) {\r\n        super(\"0\", userInfo, invoice, tender, requestId);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/OrderTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/OrderTransaction.java	(date 1600060492962)
@@ -2,19 +2,19 @@
 
 /**
  * This class is used to create and perform an Order Transaction for Express Checkout.
- * <p/>
+ *  * <p>
  * An Order transaction represents an agreement to pay one or more authorized amounts up to
  * the specified total over a maximum of 29 days.
- * <p/>
+ *  * <p>
  *
  *  This example shows how to create and perform a order transaction as part of Express Checkout.
- * <p/>
+ *  * <p>
  * ..........
  * ..........
  * //Populate required data objects.
  * ..........
  * ..........
- * <p/>
+ *  * <p>
  * // Create a new Order Transaction.
  * OrderTransaction Trans = new OrderTransaction(
  * userInfo,
@@ -24,7 +24,7 @@
  * RequestId);
  * //Submit the transaction.
  * trans.submitTransaction();
- * <p/>
+ *  * <p>
  * // Get the Response.
  * Response resp = trans.getResponse();
  * if (Resp != null)
@@ -46,7 +46,7 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
  * {
  * System.out.println("Errors = " + ctx.ToString());
  * }
@@ -63,13 +63,13 @@
      * @param requestId             String Request Id
      *  This example shows how to create and perform
      * a authorization transaction.
-     * <p/>
+     *  * <p>
      * ..........
      * ..........
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * // Create a new Order Transaction.
      * OrderTransaction Trans = new OrderTransaction(
      * userInfo,
@@ -79,7 +79,7 @@
      * RequestId);
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (Resp != null)
@@ -101,7 +101,7 @@
      * }
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.ToString());
      * }
@@ -123,13 +123,13 @@
      * @param requestId String Request Id
      *  This example shows how to create and perform
      * a authorization transaction.
-     * <p/>
+     *  * <p>
      * ..........
      * ..........
      * //Populate required data objects.
      * ..........
      * ..........
-     * <p/>
+     *  * <p>
      * // Create a new Order Transaction.
      * OrderTransaction Trans = new OrderTransaction(
      * userInfo,
@@ -138,7 +138,7 @@
      * RequestId);
      * //Submit the transaction.
      * trans.submitTransaction();
-     * <p/>
+     *  * <p>
      * // Get the Response.
      * Response resp = trans.getResponse();
      * if (Resp != null)
@@ -160,7 +160,7 @@
      * }
      * // Get the Context and check for any contained SDK specific errors.
      * Context ctx = resp.getTransactionContext();
-     * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+     * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
      * {
      * System.out.println("Errors = " + ctx.ToString());
      * }
Index: src/sdk/transactions/paypal/payflow/RecurringReActivateTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform a recurring transaction with\r\n * reactivate action.\r\n * <p/>\r\n * RecurringReactivatetransaction reactivates a profile with inactive STATUS.\r\n * (Profiles can be deactivated for the following reasons: the term has completed,\r\n * the profile reached maximum allowable payment failures, or the profile is canceled.)\r\n * Reactivation gives the option to alter any profile parameter, including an\r\n * Optional Transaction and a new start date must be specified .\r\n * </p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * //Set the Recurring related information.\r\n * RecurringInfo recurInfo = new RecurringInfo();\r\n * recurInfo.setOrigProfileId (\"RT0000001350\");\r\n * // The date that the first payment will be processed.\r\n * // This will be of the format mmddyyyy.\r\n * recurInfo.setStart (\"01012009\");\r\n * ////////////////////////////////////\r\n * <p/>\r\n * // Create a new Recurring ReActivate Transaction.\r\n * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(\r\n * user, connection, recurInfo, PayflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * <p/>\r\n * if (Resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * }\r\n * <p/>\r\n * // Get the Recurring Response parameters.\r\n * RecurringResponse recurResponse = resp.getRecurringResponse();\r\n * if (recurResponse != null)\r\n * {\r\n * System.out.println(\"RPREF = \" + recurResponse.getRPRef());\r\n * System.out.println(\"PROFILEID = \" + recurResponse.getProfileId());\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"/n\" + \"Errors = \" + Ctx.ToString());\r\n * }\r\n */\r\n\r\npublic class RecurringReActivateTransaction extends RecurringTransaction {\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              UserInfo             - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData  - Connection credentials object.\r\n     * @param recurringInfo         RecurringInfo        - Recurring Info object.\r\n     * @param requestId             String            - Request Id\r\n     *                              <p/>\r\n     *                              Each derived class of RecurringTransaction specifies a unique action\r\n     *                              transaction. This class can also be directly used to perform a recurring\r\n     *                              transaction. Alternatively, a new class can be extended from this to\r\n     *                              create a specific recurring action transaction.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringReActivateTransaction.\r\n     * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, connection, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n    public RecurringReActivateTransaction(UserInfo userInfo,\r\n                                          PayflowConnectionData payflowConnectionData,\r\n                                          RecurringInfo recurringInfo,\r\n                                          String requestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_REACTIVATE, recurringInfo,\r\n                userInfo, payflowConnectionData, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo      UserInfo      - User Info object populated with user credentials.\r\n     * @param recurringInfo RecurringInfo - Recurring Info object.\r\n     * @param requestId     String     - Request Id\r\n     *                      <p/>\r\n     *                      Each derived class of RecurringTransaction specifies a unique action\r\n     *                      transaction. This class can also be directly used to perform a recurring\r\n     *                      transaction. Alternatively, a new class can be extended from this to\r\n     *                      create a specific recurring action transaction.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringReActivateTransaction.\r\n     * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, recurInfo,\r\n     * payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n\r\n    public RecurringReActivateTransaction(UserInfo userInfo,\r\n                                          RecurringInfo recurringInfo,\r\n                                          String requestId) {\r\n        this(userInfo, null, recurringInfo, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param recurringInfo         RecurringInfo         - Recurring Info object.\r\n     * @param invoice               Invoice               - Invoice object.\r\n     * @param tender                Tender                - Tender object such as  Card Tender.\r\n     * @param requestId             String             - Request Id\r\n     *                              <p/>\r\n     *                              Each derived class of RecurringTransaction specifies a unique action\r\n     *                              transaction. This class can also be directly used to perform a recurring\r\n     *                              transaction. Alternatively, a new class can be extended from this to\r\n     *                              create a specific recurring action transaction.\r\n     *                              </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringReActivateTransaction.\r\n     * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, connection, recurInfo,\r\n     * inv, tender, payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n    public RecurringReActivateTransaction(UserInfo userInfo,\r\n                                          PayflowConnectionData payflowConnectionData,\r\n                                          RecurringInfo recurringInfo,\r\n                                          Invoice invoice,\r\n                                          BaseTender tender,\r\n                                          String requestId) {\r\n        super(PayflowConstants.RECURRING_ACTION_REACTIVATE, recurringInfo,\r\n                userInfo, payflowConnectionData, invoice, tender, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param userInfo      UserInfo      - User Info object populated with user credentials.\r\n     * @param recurringInfo RecurringInfo - Recurring Info object.\r\n     * @param invoice       Invoice       - Invoice object.\r\n     * @param tender        Tender        - Tender object such as  Card Tender.\r\n     * @param requestId     String     - Request Id\r\n     *                      <p/>\r\n     *                      Each derived class of RecurringTransaction specifies a unique action\r\n     *                      transaction. This class can also be directly used to perform a recurring\r\n     *                      transaction. Alternatively, a new class can be extended from this to\r\n     *                      create a specific recurring action transaction.\r\n     *                      </p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * <p/>\r\n     * // Create a new RecurringReActivateTransaction.\r\n     * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, recurInfo,\r\n     * inv, tender, payflowUtility.getRequestId ());\r\n     * <p/>\r\n     * // Submit the transaction.\r\n     * Response resp = trans.submitTransaction();\r\n     */\r\n\r\n\r\n    public RecurringReActivateTransaction(UserInfo userInfo,\r\n                                          RecurringInfo recurringInfo,\r\n                                          Invoice invoice,\r\n                                          BaseTender tender,\r\n                                          String requestId) {\r\n        this(userInfo, null, recurringInfo, invoice, tender, requestId);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/RecurringReActivateTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/RecurringReActivateTransaction.java	(date 1600063286720)
@@ -1,20 +1,20 @@
 package paypal.payflow;
 
 /**
+ * <pre>{@code
  * This class is used to perform a recurring transaction with
  * reactivate action.
- * <p/>
+ *
  * RecurringReactivatetransaction reactivates a profile with inactive STATUS.
  * (Profiles can be deactivated for the following reasons: the term has completed,
  * the profile reached maximum allowable payment failures, or the profile is canceled.)
  * Reactivation gives the option to alter any profile parameter, including an
  * Optional Transaction and a new start date must be specified .
- * </p>
  *
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *
  * //Set the Recurring related information.
  * RecurringInfo recurInfo = new RecurringInfo();
  * recurInfo.setOrigProfileId ("RT0000001350");
@@ -22,14 +22,14 @@
  * // This will be of the format mmddyyyy.
  * recurInfo.setStart ("01012009");
  * ////////////////////////////////////
- * <p/>
+ *
  * // Create a new Recurring ReActivate Transaction.
  * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(
  * user, connection, recurInfo, PayflowUtility.getRequestId());
- * <p/>
+ *
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
- * <p/>
+ *
  * if (Resp != null)
  * {
  * // Get the Transaction Response parameters.
@@ -39,7 +39,7 @@
  * System.out.println("RESULT = " + trxnResponse.getResult());
  * System.out.println("RESPMSG = " + trxnResponse.getRespMsg());
  * }
- * <p/>
+ *
  * // Get the Recurring Response parameters.
  * RecurringResponse recurResponse = resp.getRecurringResponse();
  * if (recurResponse != null)
@@ -50,10 +50,12 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null & ctx.getErrorCount() > 0)
  * {
  * System.out.println("/n" + "Errors = " + Ctx.ToString());
  * }
+ * }
+ * </pre>
  */
 
 public class RecurringReActivateTransaction extends RecurringTransaction {
@@ -65,7 +67,7 @@
      * @param payflowConnectionData PayflowConnectionData  - Connection credentials object.
      * @param recurringInfo         RecurringInfo        - Recurring Info object.
      * @param requestId             String            - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              Each derived class of RecurringTransaction specifies a unique action
      *                              transaction. This class can also be directly used to perform a recurring
      *                              transaction. Alternatively, a new class can be extended from this to
@@ -74,12 +76,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringReActivateTransaction.
      * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, connection, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -97,7 +98,7 @@
      * @param userInfo      UserInfo      - User Info object populated with user credentials.
      * @param recurringInfo RecurringInfo - Recurring Info object.
      * @param requestId     String     - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      Each derived class of RecurringTransaction specifies a unique action
      *                      transaction. This class can also be directly used to perform a recurring
      *                      transaction. Alternatively, a new class can be extended from this to
@@ -106,12 +107,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringReActivateTransaction.
      * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, recurInfo,
      * payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -132,7 +132,7 @@
      * @param invoice               Invoice               - Invoice object.
      * @param tender                Tender                - Tender object such as  Card Tender.
      * @param requestId             String             - Request Id
-     *                              <p/>
+     *                               * <p>
      *                              Each derived class of RecurringTransaction specifies a unique action
      *                              transaction. This class can also be directly used to perform a recurring
      *                              transaction. Alternatively, a new class can be extended from this to
@@ -141,12 +141,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringReActivateTransaction.
      * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, connection, recurInfo,
      * inv, tender, payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
@@ -169,7 +168,7 @@
      * @param invoice       Invoice       - Invoice object.
      * @param tender        Tender        - Tender object such as  Card Tender.
      * @param requestId     String     - Request Id
-     *                      <p/>
+     *                       * <p>
      *                      Each derived class of RecurringTransaction specifies a unique action
      *                      transaction. This class can also be directly used to perform a recurring
      *                      transaction. Alternatively, a new class can be extended from this to
@@ -178,12 +177,11 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
-     * <p/>
+     *  * <p>
      * // Create a new RecurringReActivateTransaction.
      * RecurringReActivateTransaction trans = new RecurringReActivateTransaction(user, recurInfo,
      * inv, tender, payflowUtility.getRequestId ());
-     * <p/>
+     *  * <p>
      * // Submit the transaction.
      * Response resp = trans.submitTransaction();
      */
Index: src/sdk/transactions/paypal/payflow/InquiryTransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n/**\r\n * This class is used to perform an inquiry transaction.\r\n * <p>Inquiry transaction gets the status of a previously performed\r\n * transaction. Therefore, inquiry transaction always takes the PNRef of a\r\n * previous transaction.</p>\r\n *\r\n *  ...............\r\n * // Populate data objects\r\n * ...............\r\n * <p/>\r\n * // Create a new Inquiry Transaction.\r\n * InquiryTransaction trans = new InquiryTransaction(\"PNRef of a previous transaction\",\r\n * user, uonnection, payflowUtility.getRequestId());\r\n * <p/>\r\n * // Submit the transaction.\r\n * Response resp = trans.submitTransaction();\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse = resp.getTransactionResponse();\r\n * if (trxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + trxnResponse.getResult());\r\n * System.out.println(\"PNREF = \" + trxnResponse.getPnref());\r\n * System.out.println(\"RESPMSG = \" + trxnResponse.getRespMsg());\r\n * System.out.println(\"AUTHCODE = \" + trxnResponse.getAuthCode());\r\n * System.out.println(\"AVSADDR = \" + trxnResponse.getAVSAddr());\r\n * System.out.println(\"AVSZIP = \" + trxnResponse.getAVSZip());\r\n * System.out.println(\"IAVS = \" + trxnResponse.getIAVS());\r\n * }\r\n * // Get the Fraud Response parameters.\r\n * FraudResponse fraudResp =  resp.getFraudResponse();\r\n * if (fraudResp != null)\r\n * {\r\n * System.out.println(\"PREFPSMSG = \" + fraudResp.getPreFpsMsg());\r\n * System.out.println(\"POSTFPSMSG = \" + fraudResp.getPostFpsMsg());\r\n * }\r\n * }\r\n * <p/>\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.getTransactionContext();\r\n * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.toString());\r\n * }\r\n */\r\n\r\npublic final class InquiryTransaction extends ReferenceTransaction {\r\n\r\n    /**\r\n     * <p/>\r\n     * Private Constructor. This prevents\r\n     * creation of an empty Transaction object.\r\n     * </p>\r\n     */\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param origId                String                - OrigId, Original Transaction Id.\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param requestId             String                - Request Id\r\n     *                              <p>Inquiry transaction gets the status of a previously performed\r\n     *                              transaction. Therefore, inquiry transaction always takes the PNRef of a\r\n     *                              previous transaction.</p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Inquiry Transaction.\r\n     * InquiryTransaction trans = new InquiryTransaction(\"PNRef of a previous transaction\",\r\n     * user, connection, payflowUtility.getRequestId());\r\n     */\r\n    public InquiryTransaction(String origId,\r\n                              UserInfo userInfo,\r\n                              PayflowConnectionData payflowConnectionData,\r\n                              String requestId) {\r\n        super(PayflowConstants.TRXTYPE_INQUIRY, origId, userInfo,\r\n                payflowConnectionData, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param origId    String   - OrigId, Original Transaction Id.\r\n     * @param userInfo  UserInfo - User Info object populated with user credentials.\r\n     * @param requestId String   - Request Id\r\n     *                  <p>Inquiry transaction gets the status of a previously performed\r\n     *                  transaction. Therefore, inquiry transaction always takes the PNRef of a\r\n     *                  previous transaction.</p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Inquiry Transaction.\r\n     * InquiryTransaction trans = new InquiryTransaction(\"PNRef of a previous transaction\",\r\n     * user, payflowUtility.getRequestId());\r\n     */\r\n\r\n    public InquiryTransaction(String origId, UserInfo userInfo, String requestId) {\r\n        super(PayflowConstants.TRXTYPE_INQUIRY, origId, userInfo, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param origId                String                - OrigId, Original Transaction Id.\r\n     * @param userInfo              UserInfo              - User Info object populated with user credentials.\r\n     * @param payflowConnectionData PayflowConnectionData - Connection credentials object.\r\n     * @param invoice               Invoice               - Invoice object.\r\n     * @param requestId             String                - Request Id\r\n     *                              <p>Inquiry transaction gets the status of a previously performed\r\n     *                              transaction. Therefore, inquiry transaction always takes the PNRef of a\r\n     *                              previous transaction.</p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Inquiry Transaction.\r\n     * InquiryTransaction trans = new InquiryTransaction(\"PNRef of a previous transaction\",\r\n     * user, connection, invoice, payflowUtility.getRequestId());\r\n     */\r\n\r\n\r\n    public InquiryTransaction(String origId,\r\n                              UserInfo userInfo,\r\n                              PayflowConnectionData payflowConnectionData,\r\n                              Invoice invoice,\r\n                              String requestId) {\r\n        super(PayflowConstants.TRXTYPE_INQUIRY, origId, userInfo,\r\n                payflowConnectionData, invoice, requestId);\r\n    }\r\n\r\n    /**\r\n     * Constructor\r\n     *\r\n     * @param origId    String   - OrigId, Original Transaction Id.\r\n     * @param userInfo  UserInfo - User Info object populated with user credentials.\r\n     * @param invoice   Invoice  - Invoice object.\r\n     * @param requestId String   - Request Id\r\n     *                  <p>Inquiry transaction gets the status of a previously performed\r\n     *                  transaction. Therefore, inquiry transaction always takes the PNRef of a\r\n     *                  previous transaction.</p>\r\n     *  ...............\r\n     * // Populate data objects\r\n     * ...............\r\n     * <p/>\r\n     * // Create a new Inquiry Transaction.\r\n     * InquiryTransaction trans = new InquiryTransaction(\"PNRef of a previous transaction\",\r\n     * user, connection, invoice, payflowUtility.getRequestId());\r\n     */\r\n\r\n\r\n    public InquiryTransaction(String origId,\r\n                              UserInfo userInfo,\r\n                              Invoice invoice,\r\n                              String requestId) {\r\n        this(origId, userInfo, null, invoice, requestId);\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/InquiryTransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/InquiryTransaction.java	(date 1600060217881)
@@ -9,11 +9,11 @@
  *  ...............
  * // Populate data objects
  * ...............
- * <p/>
+ *  * <p>
  * // Create a new Inquiry Transaction.
  * InquiryTransaction trans = new InquiryTransaction("PNRef of a previous transaction",
  * user, uonnection, payflowUtility.getRequestId());
- * <p/>
+ *  * <p>
  * // Submit the transaction.
  * Response resp = trans.submitTransaction();
  * if (resp != null)
@@ -38,10 +38,10 @@
  * System.out.println("POSTFPSMSG = " + fraudResp.getPostFpsMsg());
  * }
  * }
- * <p/>
+ *  * <p>
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.getTransactionContext();
- * if (ctx != null &amp;&amp; ctx.getErrorCount() > 0)
+ * if (ctx != null &amp;&amp; ctx.getErrorCount() %3E 0)
  * {
  * System.out.println("Errors = " + ctx.toString());
  * }
@@ -50,7 +50,7 @@
 public final class InquiryTransaction extends ReferenceTransaction {
 
     /**
-     * <p/>
+     *  * <p>
      * Private Constructor. This prevents
      * creation of an empty Transaction object.
      * </p>
@@ -69,7 +69,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Inquiry Transaction.
      * InquiryTransaction trans = new InquiryTransaction("PNRef of a previous transaction",
      * user, connection, payflowUtility.getRequestId());
@@ -94,7 +94,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Inquiry Transaction.
      * InquiryTransaction trans = new InquiryTransaction("PNRef of a previous transaction",
      * user, payflowUtility.getRequestId());
@@ -118,7 +118,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Inquiry Transaction.
      * InquiryTransaction trans = new InquiryTransaction("PNRef of a previous transaction",
      * user, connection, invoice, payflowUtility.getRequestId());
@@ -147,7 +147,7 @@
      *  ...............
      * // Populate data objects
      * ...............
-     * <p/>
+     *  * <p>
      * // Create a new Inquiry Transaction.
      * InquiryTransaction trans = new InquiryTransaction("PNRef of a previous transaction",
      * user, connection, invoice, payflowUtility.getRequestId());
Index: src/sdk/transactions/paypal/payflow/BuyerAuthVATransaction.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package paypal.payflow;\r\n\r\n\r\n/**\r\n * This class is used to create and perform\r\n * a Validate Authentication transaction.\r\n * Validate Authentication is the second step of Buyer authentication process.\r\n * <p/>\r\n * When the user authenticates on the secure authentication server, the server\r\n * returns back a Payer authentication Signature (PaRes). You must send this value of PaRes\r\n * to validate the authentication to the payment gateway during the Validate Authentication.\r\n * The gateway will then return the authentication status of the user in the response.\r\n * You should send this authntication information from the response into you main transaction.\r\n * For more information, please refer to the Payflow Developers' Guide.\r\n * </p>\r\n *\r\n *  This example shows how to create and perform a Verify Eknrollment transaction.\r\n * ..........\r\n * ..........\r\n * //Populate required data objects.\r\n * ..........\r\n * ..........\r\n * <p/>\r\n * //Create a new validate Auhtentication Transaction.\r\n * BuyerAuthVATransaction trans = new BuyerAuthVATransaction(\r\n * UserInfo,\r\n * PayflowConnectionData,\r\n * Pares,\r\n * RequestId);\r\n * //Submit the transaction.\r\n * trans.submitTransaction();\r\n * <p/>\r\n * // Get the Response.\r\n * Response resp = trans.getResponse();\r\n * if (resp != null)\r\n * {\r\n * // Get the Transaction Response parameters.\r\n * TransactionResponse trxnResponse =  Resp.getTransactionResponse();\r\n * if (TrxnResponse != null)\r\n * {\r\n * System.out.println(\"RESULT = \" + TrxnResponse.Result);\r\n * System.out.println(\"RESPMSG = \" + TrxnResponse.RespMsg);\r\n * }\r\n * <p/>\r\n * <p/>\r\n * // Get the Buyer auth Response parameters.\r\n * BuyerAuthResponse bAResponse = resp.BuyerAuthResponse;\r\n * if (BAResponse != null)\r\n * {\r\n * System.out.println(\"AUTHENTICATION_STATUS = \" + bAResponse.Authentication_Status);\r\n * System.out.println(\"AUTHENTICATION_ID = \" + bAResponse.Authentication_Id);\r\n * }\r\n * }\r\n * // Get the Context and check for any contained SDK specific errors.\r\n * Context ctx = resp.TransactionContext;\r\n * if (ctx != null ++ ctx.getErrorCount() > 0)\r\n * {\r\n * System.out.println(\"Errors = \" + ctx.ToString());\r\n * }\r\n */\r\n\r\npublic final class BuyerAuthVATransaction extends BuyerAuthTransaction {\r\n    /**\r\n     * Holds the PaRes value.\r\n     */\r\n    private String mPaRes;\r\n\r\n\r\n    /**\r\n     * constructor\r\n     *\r\n     * @param userInfo              UserInfo UserInfo object populated with user credentials\r\n     * @param payflowConnectionData PayflowConnectionData\r\n     * @param paRes                 String PaRes value\r\n     * @param requestId             String\r\n     */\r\n    public BuyerAuthVATransaction(UserInfo userInfo,\r\n                                  PayflowConnectionData payflowConnectionData,\r\n                                  String paRes,\r\n                                  String requestId) {\r\n        super(PayflowConstants.TRXTYPE_BUYERAUTH_VA, userInfo,\r\n                payflowConnectionData, requestId);\r\n        mPaRes = paRes;\r\n    }\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param userInfo  UserInfo User Info object populated with user credentials.\r\n     * @param paRes     String PaRes Value\r\n     * @param requestId String\r\n     */\r\n    public BuyerAuthVATransaction(UserInfo userInfo,\r\n                                  String paRes,\r\n                                  String requestId) {\r\n        this(userInfo, null, paRes, requestId);\r\n    }\r\n\r\n    /**\r\n     * Generates the transaction request.\r\n     */\r\n    protected void generateRequest() {\r\n        super.generateRequest();\r\n        getRequestBuffer().append(PayflowUtility.appendToRequest(PayflowConstants.PARAM_PARES, mPaRes));\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/sdk/transactions/paypal/payflow/BuyerAuthVATransaction.java	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ src/sdk/transactions/paypal/payflow/BuyerAuthVATransaction.java	(date 1600059104963)
@@ -5,7 +5,7 @@
  * This class is used to create and perform
  * a Validate Authentication transaction.
  * Validate Authentication is the second step of Buyer authentication process.
- * <p/>
+ *  * <p>
  * When the user authenticates on the secure authentication server, the server
  * returns back a Payer authentication Signature (PaRes). You must send this value of PaRes
  * to validate the authentication to the payment gateway during the Validate Authentication.
@@ -20,7 +20,7 @@
  * //Populate required data objects.
  * ..........
  * ..........
- * <p/>
+ *  * <p>
  * //Create a new validate Auhtentication Transaction.
  * BuyerAuthVATransaction trans = new BuyerAuthVATransaction(
  * UserInfo,
@@ -29,7 +29,7 @@
  * RequestId);
  * //Submit the transaction.
  * trans.submitTransaction();
- * <p/>
+ *  * <p>
  * // Get the Response.
  * Response resp = trans.getResponse();
  * if (resp != null)
@@ -41,8 +41,7 @@
  * System.out.println("RESULT = " + TrxnResponse.Result);
  * System.out.println("RESPMSG = " + TrxnResponse.RespMsg);
  * }
- * <p/>
- * <p/>
+ *  * <p>
  * // Get the Buyer auth Response parameters.
  * BuyerAuthResponse bAResponse = resp.BuyerAuthResponse;
  * if (BAResponse != null)
@@ -53,7 +52,7 @@
  * }
  * // Get the Context and check for any contained SDK specific errors.
  * Context ctx = resp.TransactionContext;
- * if (ctx != null ++ ctx.getErrorCount() > 0)
+ * if (ctx != null ++ ctx.getErrorCount() %3E 0)
  * {
  * System.out.println("Errors = " + ctx.ToString());
  * }
Index: .idea/ant.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/ant.xml	(date 1600065820323)
+++ .idea/ant.xml	(date 1600065820323)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="AntConfiguration">
+    <buildFile url="file://$PROJECT_DIR$/build/build.xml" />
+  </component>
+</project>
\ No newline at end of file
Index: ../dotNET/Payflow dotNET SDK.sln
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\nMicrosoft Visual Studio Solution File, Format Version 12.00\r\n# Visual Studio Version 16\r\nVisualStudioVersion = 16.0.30428.66\r\nMinimumVisualStudioVersion = 10.0.40219.1\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"PFProSDK\", \"PFProSDK\\PFProSDK.csproj\", \"{CE010258-E90B-4349-9BDA-C717768C9442}\"\r\nEndProject\r\nProject(\"{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}\") = \"SamplesCS\", \"SamplesCS\\SamplesCS.csproj\", \"{73AD89A0-693B-464F-99EC-020DE7DFF591}\"\r\nEndProject\r\nProject(\"{F184B08F-C81C-45F6-A57F-5ABD9991F28F}\") = \"SamplesVB\", \"SamplesVB\\SamplesVB.vbproj\", \"{5DFB23B2-BC06-496A-AA34-41488BC86F82}\"\r\nEndProject\r\nProject(\"{2150E333-8FDC-42A3-9474-1A3956D46DE8}\") = \"Solution Items\", \"Solution Items\", \"{9BCC3AAF-6761-49BB-B187-11B5B3315AB1}\"\r\n\tProjectSection(SolutionItems) = preProject\r\n\t\tCHANGELOG.md = CHANGELOG.md\r\n\t\tCONTRIBUTING.md = CONTRIBUTING.md\r\n\t\tLICENSE.txt = LICENSE.txt\r\n\t\tREADME.md = README.md\r\n\tEndProjectSection\r\nEndProject\r\nGlobal\r\n\tGlobalSection(SolutionConfigurationPlatforms) = preSolution\r\n\t\tDebug|Any CPU = Debug|Any CPU\r\n\t\tRelease|Any CPU = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(ProjectConfigurationPlatforms) = postSolution\r\n\t\t{CE010258-E90B-4349-9BDA-C717768C9442}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{CE010258-E90B-4349-9BDA-C717768C9442}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{CE010258-E90B-4349-9BDA-C717768C9442}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{CE010258-E90B-4349-9BDA-C717768C9442}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{73AD89A0-693B-464F-99EC-020DE7DFF591}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{73AD89A0-693B-464F-99EC-020DE7DFF591}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{73AD89A0-693B-464F-99EC-020DE7DFF591}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{73AD89A0-693B-464F-99EC-020DE7DFF591}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\t\t{5DFB23B2-BC06-496A-AA34-41488BC86F82}.Debug|Any CPU.ActiveCfg = Debug|Any CPU\r\n\t\t{5DFB23B2-BC06-496A-AA34-41488BC86F82}.Debug|Any CPU.Build.0 = Debug|Any CPU\r\n\t\t{5DFB23B2-BC06-496A-AA34-41488BC86F82}.Release|Any CPU.ActiveCfg = Release|Any CPU\r\n\t\t{5DFB23B2-BC06-496A-AA34-41488BC86F82}.Release|Any CPU.Build.0 = Release|Any CPU\r\n\tEndGlobalSection\r\n\tGlobalSection(SolutionProperties) = preSolution\r\n\t\tHideSolutionNode = FALSE\r\n\tEndGlobalSection\r\n\tGlobalSection(ExtensibilityGlobals) = postSolution\r\n\t\tSolutionGuid = {6C9E70BB-7A8B-45D9-8852-3DD17313922A}\r\n\tEndGlobalSection\r\nEndGlobal\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- ../dotNET/Payflow dotNET SDK.sln	(revision 4275d20055562ecc9677b7d76097cc083beb32f4)
+++ ../dotNET/Payflow dotNET SDK.sln	(date 1600047398675)
@@ -17,6 +17,8 @@
 		README.md = README.md
 	EndProjectSection
 EndProject
+Project("{7CF6DF6D-3B04-46F8-A40B-537D21BCA0B4}") = "Payflow SDK Docs", "..\..\..\Sandcastle Help\Payflow SDK Docs.shfbproj", "{0A65541E-8B2C-4401-9A0C-648F6B194E3B}"
+EndProject
 Global
 	GlobalSection(SolutionConfigurationPlatforms) = preSolution
 		Debug|Any CPU = Debug|Any CPU
@@ -35,6 +37,10 @@
 		{5DFB23B2-BC06-496A-AA34-41488BC86F82}.Debug|Any CPU.Build.0 = Debug|Any CPU
 		{5DFB23B2-BC06-496A-AA34-41488BC86F82}.Release|Any CPU.ActiveCfg = Release|Any CPU
 		{5DFB23B2-BC06-496A-AA34-41488BC86F82}.Release|Any CPU.Build.0 = Release|Any CPU
+		{0A65541E-8B2C-4401-9A0C-648F6B194E3B}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
+		{0A65541E-8B2C-4401-9A0C-648F6B194E3B}.Debug|Any CPU.Build.0 = Debug|Any CPU
+		{0A65541E-8B2C-4401-9A0C-648F6B194E3B}.Release|Any CPU.ActiveCfg = Release|Any CPU
+		{0A65541E-8B2C-4401-9A0C-648F6B194E3B}.Release|Any CPU.Build.0 = Release|Any CPU
 	EndGlobalSection
 	GlobalSection(SolutionProperties) = preSolution
 		HideSolutionNode = FALSE
